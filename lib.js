(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('crypto')) :
	typeof define === 'function' && define.amd ? define(['crypto'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.require$$0$1));
})(this, (function (require$$0$1) { 'use strict';

	function _mergeNamespaces(n, m) {
		m.forEach(function (e) {
			e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
				if (k !== 'default' && !(k in n)) {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () { return e[k]; }
					});
				}
			});
		});
		return Object.freeze(n);
	}

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	var dist$5 = {};

	var dist$4 = {};

	var handle = {};

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.DisallowedDomainError = exports.UnsupportedDomainError = exports.ReservedHandleError = exports.InvalidHandleError = exports.isValidTld = exports.isValidHandle = exports.normalizeAndEnsureValidHandle = exports.normalizeHandle = exports.ensureValidHandleRegex = exports.ensureValidHandle = exports.DISALLOWED_TLDS = exports.INVALID_HANDLE = void 0;
	  exports.INVALID_HANDLE = 'handle.invalid';
	  // Currently these are registration-time restrictions, not protocol-level
	  // restrictions. We have a couple accounts in the wild that we need to clean up
	  // before hard-disallow.
	  // See also: https://en.wikipedia.org/wiki/Top-level_domain#Reserved_domains
	  exports.DISALLOWED_TLDS = ['.local', '.arpa', '.invalid', '.localhost', '.internal', '.example', '.alt',
	  // policy could concievably change on ".onion" some day
	  '.onion'
	  // NOTE: .test is allowed in testing and devopment. In practical terms
	  // "should" "never" actually resolve and get registered in production
	  ];
	  // Handle constraints, in English:
	  //  - must be a possible domain name
	  //    - RFC-1035 is commonly referenced, but has been updated. eg, RFC-3696,
	  //      section 2. and RFC-3986, section 3. can now have leading numbers (eg,
	  //      4chan.org)
	  //    - "labels" (sub-names) are made of ASCII letters, digits, hyphens
	  //    - can not start or end with a hyphen
	  //    - TLD (last component) should not start with a digit
	  //    - can't end with a hyphen (can end with digit)
	  //    - each segment must be between 1 and 63 characters (not including any periods)
	  //    - overall length can't be more than 253 characters
	  //    - separated by (ASCII) periods; does not start or end with period
	  //    - case insensitive
	  //    - domains (handles) are equal if they are the same lower-case
	  //    - punycode allowed for internationalization
	  //  - no whitespace, null bytes, joining chars, etc
	  //  - does not validate whether domain or TLD exists, or is a reserved or
	  //    special TLD (eg, .onion or .local)
	  //  - does not validate punycode
	  const ensureValidHandle = handle => {
	    // check that all chars are boring ASCII
	    if (!/^[a-zA-Z0-9.-]*$/.test(handle)) {
	      throw new InvalidHandleError('Disallowed characters in handle (ASCII letters, digits, dashes, periods only)');
	    }
	    if (handle.length > 253) {
	      throw new InvalidHandleError('Handle is too long (253 chars max)');
	    }
	    const labels = handle.split('.');
	    if (labels.length < 2) {
	      throw new InvalidHandleError('Handle domain needs at least two parts');
	    }
	    for (let i = 0; i < labels.length; i++) {
	      const l = labels[i];
	      if (l.length < 1) {
	        throw new InvalidHandleError('Handle parts can not be empty');
	      }
	      if (l.length > 63) {
	        throw new InvalidHandleError('Handle part too long (max 63 chars)');
	      }
	      if (l.endsWith('-') || l.startsWith('-')) {
	        throw new InvalidHandleError('Handle parts can not start or end with hyphens');
	      }
	      if (i + 1 == labels.length && !/^[a-zA-Z]/.test(l)) {
	        throw new InvalidHandleError('Handle final component (TLD) must start with ASCII letter');
	      }
	    }
	  };
	  exports.ensureValidHandle = ensureValidHandle;
	  // simple regex translation of above constraints
	  const ensureValidHandleRegex = handle => {
	    if (!/^([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?$/.test(handle)) {
	      throw new InvalidHandleError("Handle didn't validate via regex");
	    }
	    if (handle.length > 253) {
	      throw new InvalidHandleError('Handle is too long (253 chars max)');
	    }
	  };
	  exports.ensureValidHandleRegex = ensureValidHandleRegex;
	  const normalizeHandle = handle => {
	    return handle.toLowerCase();
	  };
	  exports.normalizeHandle = normalizeHandle;
	  const normalizeAndEnsureValidHandle = handle => {
	    const normalized = (0, exports.normalizeHandle)(handle);
	    (0, exports.ensureValidHandle)(normalized);
	    return normalized;
	  };
	  exports.normalizeAndEnsureValidHandle = normalizeAndEnsureValidHandle;
	  const isValidHandle = handle => {
	    try {
	      (0, exports.ensureValidHandle)(handle);
	    } catch (err) {
	      if (err instanceof InvalidHandleError) {
	        return false;
	      }
	      throw err;
	    }
	    return true;
	  };
	  exports.isValidHandle = isValidHandle;
	  const isValidTld = handle => {
	    return !exports.DISALLOWED_TLDS.some(domain => handle.endsWith(domain));
	  };
	  exports.isValidTld = isValidTld;
	  class InvalidHandleError extends Error {}
	  exports.InvalidHandleError = InvalidHandleError;
	  class ReservedHandleError extends Error {}
	  exports.ReservedHandleError = ReservedHandleError;
	  class UnsupportedDomainError extends Error {}
	  exports.UnsupportedDomainError = UnsupportedDomainError;
	  class DisallowedDomainError extends Error {}
	  exports.DisallowedDomainError = DisallowedDomainError;
	})(handle);

	var did = {};

	Object.defineProperty(did, "__esModule", {
	  value: true
	});
	did.InvalidDidError = did.ensureValidDidRegex = did.ensureValidDid = void 0;
	// Human-readable constraints:
	//   - valid W3C DID (https://www.w3.org/TR/did-core/#did-syntax)
	//      - entire URI is ASCII: [a-zA-Z0-9._:%-]
	//      - always starts "did:" (lower-case)
	//      - method name is one or more lower-case letters, followed by ":"
	//      - remaining identifier can have any of the above chars, but can not end in ":"
	//      - it seems that a bunch of ":" can be included, and don't need spaces between
	//      - "%" is used only for "percent encoding" and must be followed by two hex characters (and thus can't end in "%")
	//      - query ("?") and fragment ("#") stuff is defined for "DID URIs", but not as part of identifier itself
	//      - "The current specification does not take a position on the maximum length of a DID"
	//   - in current atproto, only allowing did:plc and did:web. But not *forcing* this at lexicon layer
	//   - hard length limit of 8KBytes
	//   - not going to validate "percent encoding" here
	const ensureValidDid = did => {
	  // check that all chars are boring ASCII
	  if (!/^[a-zA-Z0-9._:%-]*$/.test(did)) {
	    throw new InvalidDidError('Disallowed characters in DID (ASCII letters, digits, and a couple other characters only)');
	  }
	  const parts = did.split(':');
	  if (parts.length < 3) {
	    throw new InvalidDidError('DID requires prefix, method, and method-specific content');
	  }
	  if (parts[0] != 'did') {
	    throw new InvalidDidError('DID requires "did:" prefix');
	  }
	  if (!/^[a-z]+$/.test(parts[1])) {
	    throw new InvalidDidError('DID method must be lower-case letters');
	  }
	  if (did.endsWith(':') || did.endsWith('%')) {
	    throw new InvalidDidError('DID can not end with ":" or "%"');
	  }
	  if (did.length > 2 * 1024) {
	    throw new InvalidDidError('DID is too long (2048 chars max)');
	  }
	};
	did.ensureValidDid = ensureValidDid;
	const ensureValidDidRegex = did => {
	  // simple regex to enforce most constraints via just regex and length.
	  // hand wrote this regex based on above constraints
	  if (!/^did:[a-z]+:[a-zA-Z0-9._:%-]*[a-zA-Z0-9._-]$/.test(did)) {
	    throw new InvalidDidError("DID didn't validate via regex");
	  }
	  if (did.length > 2 * 1024) {
	    throw new InvalidDidError('DID is too long (2048 chars max)');
	  }
	};
	did.ensureValidDidRegex = ensureValidDidRegex;
	class InvalidDidError extends Error {}
	did.InvalidDidError = InvalidDidError;

	var nsid = {};

	(function (exports) {

	  /*
	  Grammar:
	  	alpha     = "a" / "b" / "c" / "d" / "e" / "f" / "g" / "h" / "i" / "j" / "k" / "l" / "m" / "n" / "o" / "p" / "q" / "r" / "s" / "t" / "u" / "v" / "w" / "x" / "y" / "z" / "A" / "B" / "C" / "D" / "E" / "F" / "G" / "H" / "I" / "J" / "K" / "L" / "M" / "N" / "O" / "P" / "Q" / "R" / "S" / "T" / "U" / "V" / "W" / "X" / "Y" / "Z"
	  number    = "1" / "2" / "3" / "4" / "5" / "6" / "7" / "8" / "9" / "0"
	  delim     = "."
	  segment   = alpha *( alpha / number / "-" )
	  authority = segment *( delim segment )
	  name      = alpha *( alpha )
	  nsid      = authority delim name
	  	*/
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.InvalidNsidError = exports.ensureValidNsidRegex = exports.ensureValidNsid = exports.NSID = void 0;
	  class NSID {
	    static parse(nsid) {
	      return new NSID(nsid);
	    }
	    static create(authority, name) {
	      const segments = [...authority.split('.').reverse(), name].join('.');
	      return new NSID(segments);
	    }
	    static isValid(nsid) {
	      try {
	        NSID.parse(nsid);
	        return true;
	      } catch (e) {
	        return false;
	      }
	    }
	    constructor(nsid) {
	      Object.defineProperty(this, "segments", {
	        enumerable: true,
	        configurable: true,
	        writable: true,
	        value: []
	      });
	      (0, exports.ensureValidNsid)(nsid);
	      this.segments = nsid.split('.');
	    }
	    get authority() {
	      return this.segments.slice(0, this.segments.length - 1).reverse().join('.');
	    }
	    get name() {
	      return this.segments.at(this.segments.length - 1);
	    }
	    toString() {
	      return this.segments.join('.');
	    }
	  }
	  exports.NSID = NSID;
	  // Human readable constraints on NSID:
	  // - a valid domain in reversed notation
	  // - followed by an additional period-separated name, which is camel-case letters
	  const ensureValidNsid = nsid => {
	    const toCheck = nsid;
	    // check that all chars are boring ASCII
	    if (!/^[a-zA-Z0-9.-]*$/.test(toCheck)) {
	      throw new InvalidNsidError('Disallowed characters in NSID (ASCII letters, digits, dashes, periods only)');
	    }
	    if (toCheck.length > 253 + 1 + 63) {
	      throw new InvalidNsidError('NSID is too long (317 chars max)');
	    }
	    const labels = toCheck.split('.');
	    if (labels.length < 3) {
	      throw new InvalidNsidError('NSID needs at least three parts');
	    }
	    for (let i = 0; i < labels.length; i++) {
	      const l = labels[i];
	      if (l.length < 1) {
	        throw new InvalidNsidError('NSID parts can not be empty');
	      }
	      if (l.length > 63) {
	        throw new InvalidNsidError('NSID part too long (max 63 chars)');
	      }
	      if (l.endsWith('-') || l.startsWith('-')) {
	        throw new InvalidNsidError('NSID parts can not start or end with hyphen');
	      }
	      if (/^[0-9]/.test(l) && i == 0) {
	        throw new InvalidNsidError('NSID first part may not start with a digit');
	      }
	      if (!/^[a-zA-Z]+$/.test(l) && i + 1 == labels.length) {
	        throw new InvalidNsidError('NSID name part must be only letters');
	      }
	    }
	  };
	  exports.ensureValidNsid = ensureValidNsid;
	  const ensureValidNsidRegex = nsid => {
	    // simple regex to enforce most constraints via just regex and length.
	    // hand wrote this regex based on above constraints
	    if (!/^[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(\.[a-zA-Z]([a-zA-Z]{0,61}[a-zA-Z])?)$/.test(nsid)) {
	      throw new InvalidNsidError("NSID didn't validate via regex");
	    }
	    if (nsid.length > 253 + 1 + 63) {
	      throw new InvalidNsidError('NSID is too long (317 chars max)');
	    }
	  };
	  exports.ensureValidNsidRegex = ensureValidNsidRegex;
	  class InvalidNsidError extends Error {}
	  exports.InvalidNsidError = InvalidNsidError;
	})(nsid);

	var aturi = {};

	var aturi_validation = {};

	Object.defineProperty(aturi_validation, "__esModule", {
	  value: true
	});
	aturi_validation.ensureValidAtUriRegex = aturi_validation.ensureValidAtUri = void 0;
	const handle_1 = handle;
	const did_1 = did;
	const nsid_1 = nsid;
	// Human-readable constraints on ATURI:
	//   - following regular URLs, a 8KByte hard total length limit
	//   - follows ATURI docs on website
	//      - all ASCII characters, no whitespace. non-ASCII could be URL-encoded
	//      - starts "at://"
	//      - "authority" is a valid DID or a valid handle
	//      - optionally, follow "authority" with "/" and valid NSID as start of path
	//      - optionally, if NSID given, follow that with "/" and rkey
	//      - rkey path component can include URL-encoded ("percent encoded"), or:
	//          ALPHA / DIGIT / "-" / "." / "_" / "~" / ":" / "@" / "!" / "$" / "&" / "'" / "(" / ")" / "*" / "+" / "," / ";" / "="
	//          [a-zA-Z0-9._~:@!$&'\(\)*+,;=-]
	//      - rkey must have at least one char
	//      - regardless of path component, a fragment can follow  as "#" and then a JSON pointer (RFC-6901)
	const ensureValidAtUri = uri => {
	  // JSON pointer is pretty different from rest of URI, so split that out first
	  const uriParts = uri.split('#');
	  if (uriParts.length > 2) {
	    throw new Error('ATURI can have at most one "#", separating fragment out');
	  }
	  const fragmentPart = uriParts[1] || null;
	  uri = uriParts[0];
	  // check that all chars are boring ASCII
	  if (!/^[a-zA-Z0-9._~:@!$&')(*+,;=%/-]*$/.test(uri)) {
	    throw new Error('Disallowed characters in ATURI (ASCII)');
	  }
	  const parts = uri.split('/');
	  if (parts.length >= 3 && (parts[0] != 'at:' || parts[1].length != 0)) {
	    throw new Error('ATURI must start with "at://"');
	  }
	  if (parts.length < 3) {
	    throw new Error('ATURI requires at least method and authority sections');
	  }
	  try {
	    if (parts[2].startsWith('did:')) {
	      (0, did_1.ensureValidDid)(parts[2]);
	    } else {
	      (0, handle_1.ensureValidHandle)(parts[2]);
	    }
	  } catch {
	    throw new Error('ATURI authority must be a valid handle or DID');
	  }
	  if (parts.length >= 4) {
	    if (parts[3].length == 0) {
	      throw new Error('ATURI can not have a slash after authority without a path segment');
	    }
	    try {
	      (0, nsid_1.ensureValidNsid)(parts[3]);
	    } catch {
	      throw new Error('ATURI requires first path segment (if supplied) to be valid NSID');
	    }
	  }
	  if (parts.length >= 5) {
	    if (parts[4].length == 0) {
	      throw new Error('ATURI can not have a slash after collection, unless record key is provided');
	    }
	    // would validate rkey here, but there are basically no constraints!
	  }
	  if (parts.length >= 6) {
	    throw new Error('ATURI path can have at most two parts, and no trailing slash');
	  }
	  if (uriParts.length >= 2 && fragmentPart == null) {
	    throw new Error('ATURI fragment must be non-empty and start with slash');
	  }
	  if (fragmentPart != null) {
	    if (fragmentPart.length == 0 || fragmentPart[0] != '/') {
	      throw new Error('ATURI fragment must be non-empty and start with slash');
	    }
	    // NOTE: enforcing *some* checks here for sanity. Eg, at least no whitespace
	    if (!/^\/[a-zA-Z0-9._~:@!$&')(*+,;=%[\]/-]*$/.test(fragmentPart)) {
	      throw new Error('Disallowed characters in ATURI fragment (ASCII)');
	    }
	  }
	  if (uri.length > 8 * 1024) {
	    throw new Error('ATURI is far too long');
	  }
	};
	aturi_validation.ensureValidAtUri = ensureValidAtUri;
	const ensureValidAtUriRegex = uri => {
	  // simple regex to enforce most constraints via just regex and length.
	  // hand wrote this regex based on above constraints. whew!
	  const aturiRegex = /^at:\/\/(?<authority>[a-zA-Z0-9._:%-]+)(\/(?<collection>[a-zA-Z0-9-.]+)(\/(?<rkey>[a-zA-Z0-9._~:@!$&%')(*+,;=-]+))?)?(#(?<fragment>\/[a-zA-Z0-9._~:@!$&%')(*+,;=\-[\]/\\]*))?$/;
	  const rm = uri.match(aturiRegex);
	  if (!rm || !rm.groups) {
	    throw new Error("ATURI didn't validate via regex");
	  }
	  const groups = rm.groups;
	  try {
	    (0, handle_1.ensureValidHandleRegex)(groups.authority);
	  } catch {
	    try {
	      (0, did_1.ensureValidDidRegex)(groups.authority);
	    } catch {
	      throw new Error('ATURI authority must be a valid handle or DID');
	    }
	  }
	  if (groups.collection) {
	    try {
	      (0, nsid_1.ensureValidNsidRegex)(groups.collection);
	    } catch {
	      throw new Error('ATURI collection path segment must be a valid NSID');
	    }
	  }
	  if (uri.length > 8 * 1024) {
	    throw new Error('ATURI is far too long');
	  }
	};
	aturi_validation.ensureValidAtUriRegex = ensureValidAtUriRegex;

	(function (exports) {

	  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = {
	        enumerable: true,
	        get: function () {
	          return m[k];
	        }
	      };
	    }
	    Object.defineProperty(o, k2, desc);
	  } : function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	  });
	  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function (m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	  };
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.AtUri = exports.ATP_URI_REGEX = void 0;
	  __exportStar(aturi_validation, exports);
	  exports.ATP_URI_REGEX =
	  // proto-    --did--------------   --name----------------   --path----   --query--   --hash--
	  /^(at:\/\/)?((?:did:[a-z0-9:%-]+)|(?:[a-z0-9][a-z0-9.:-]*))(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;
	  //                       --path-----   --query--  --hash--
	  const RELATIVE_REGEX = /^(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;
	  class AtUri {
	    constructor(uri, base) {
	      Object.defineProperty(this, "hash", {
	        enumerable: true,
	        configurable: true,
	        writable: true,
	        value: void 0
	      });
	      Object.defineProperty(this, "host", {
	        enumerable: true,
	        configurable: true,
	        writable: true,
	        value: void 0
	      });
	      Object.defineProperty(this, "pathname", {
	        enumerable: true,
	        configurable: true,
	        writable: true,
	        value: void 0
	      });
	      Object.defineProperty(this, "searchParams", {
	        enumerable: true,
	        configurable: true,
	        writable: true,
	        value: void 0
	      });
	      let parsed;
	      if (base) {
	        parsed = parse(base);
	        if (!parsed) {
	          throw new Error(`Invalid at uri: ${base}`);
	        }
	        const relativep = parseRelative(uri);
	        if (!relativep) {
	          throw new Error(`Invalid path: ${uri}`);
	        }
	        Object.assign(parsed, relativep);
	      } else {
	        parsed = parse(uri);
	        if (!parsed) {
	          throw new Error(`Invalid at uri: ${uri}`);
	        }
	      }
	      this.hash = parsed.hash;
	      this.host = parsed.host;
	      this.pathname = parsed.pathname;
	      this.searchParams = parsed.searchParams;
	    }
	    static make(handleOrDid, collection, rkey) {
	      let str = handleOrDid;
	      if (collection) str += '/' + collection;
	      if (rkey) str += '/' + rkey;
	      return new AtUri(str);
	    }
	    get protocol() {
	      return 'at:';
	    }
	    get origin() {
	      return `at://${this.host}`;
	    }
	    get hostname() {
	      return this.host;
	    }
	    set hostname(v) {
	      this.host = v;
	    }
	    get search() {
	      return this.searchParams.toString();
	    }
	    set search(v) {
	      this.searchParams = new URLSearchParams(v);
	    }
	    get collection() {
	      return this.pathname.split('/').filter(Boolean)[0] || '';
	    }
	    set collection(v) {
	      const parts = this.pathname.split('/').filter(Boolean);
	      parts[0] = v;
	      this.pathname = parts.join('/');
	    }
	    get rkey() {
	      return this.pathname.split('/').filter(Boolean)[1] || '';
	    }
	    set rkey(v) {
	      const parts = this.pathname.split('/').filter(Boolean);
	      if (!parts[0]) parts[0] = 'undefined';
	      parts[1] = v;
	      this.pathname = parts.join('/');
	    }
	    get href() {
	      return this.toString();
	    }
	    toString() {
	      let path = this.pathname || '/';
	      if (!path.startsWith('/')) {
	        path = `/${path}`;
	      }
	      let qs = this.searchParams.toString();
	      if (qs && !qs.startsWith('?')) {
	        qs = `?${qs}`;
	      }
	      let hash = this.hash;
	      if (hash && !hash.startsWith('#')) {
	        hash = `#${hash}`;
	      }
	      return `at://${this.host}${path}${qs}${hash}`;
	    }
	  }
	  exports.AtUri = AtUri;
	  function parse(str) {
	    const match = exports.ATP_URI_REGEX.exec(str);
	    if (match) {
	      return {
	        hash: match[5] || '',
	        host: match[2] || '',
	        pathname: match[3] || '',
	        searchParams: new URLSearchParams(match[4] || '')
	      };
	    }
	    return undefined;
	  }
	  function parseRelative(str) {
	    const match = RELATIVE_REGEX.exec(str);
	    if (match) {
	      return {
	        hash: match[3] || '',
	        pathname: match[1] || '',
	        searchParams: new URLSearchParams(match[2] || '')
	      };
	    }
	    return undefined;
	  }
	})(aturi);

	var tid$1 = {};

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.InvalidTidError = exports.isValidTid = exports.ensureValidTid = void 0;
	  const ensureValidTid = tid => {
	    if (tid.length != 13) {
	      throw new InvalidTidError('TID must be 13 characters');
	    }
	    // simple regex to enforce most constraints via just regex and length.
	    if (!/^[234567abcdefghij][234567abcdefghijklmnopqrstuvwxyz]{12}$/.test(tid)) {
	      throw new InvalidTidError('TID syntax not valid (regex)');
	    }
	  };
	  exports.ensureValidTid = ensureValidTid;
	  const isValidTid = tid => {
	    try {
	      (0, exports.ensureValidTid)(tid);
	    } catch (err) {
	      if (err instanceof InvalidTidError) {
	        return false;
	      }
	      throw err;
	    }
	    return true;
	  };
	  exports.isValidTid = isValidTid;
	  class InvalidTidError extends Error {}
	  exports.InvalidTidError = InvalidTidError;
	})(tid$1);

	var recordkey = {};

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.InvalidRecordKeyError = exports.isValidRecordKey = exports.ensureValidRecordKey = void 0;
	  const ensureValidRecordKey = rkey => {
	    if (rkey.length > 512 || rkey.length < 1) {
	      throw new InvalidRecordKeyError('record key must be 1 to 512 characters');
	    }
	    // simple regex to enforce most constraints via just regex and length.
	    if (!/^[a-zA-Z0-9_~.:-]{1,512}$/.test(rkey)) {
	      throw new InvalidRecordKeyError('record key syntax not valid (regex)');
	    }
	    if (rkey == '.' || rkey == '..') throw new InvalidRecordKeyError('record key can not be "." or ".."');
	  };
	  exports.ensureValidRecordKey = ensureValidRecordKey;
	  const isValidRecordKey = rkey => {
	    try {
	      (0, exports.ensureValidRecordKey)(rkey);
	    } catch (err) {
	      if (err instanceof InvalidRecordKeyError) {
	        return false;
	      }
	      throw err;
	    }
	    return true;
	  };
	  exports.isValidRecordKey = isValidRecordKey;
	  class InvalidRecordKeyError extends Error {}
	  exports.InvalidRecordKeyError = InvalidRecordKeyError;
	})(recordkey);

	var datetime = {};

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.InvalidDatetimeError = exports.normalizeDatetimeAlways = exports.normalizeDatetime = exports.isValidDatetime = exports.ensureValidDatetime = void 0;
	  /* Validates datetime string against atproto Lexicon 'datetime' format.
	   * Syntax is described at: https://atproto.com/specs/lexicon#datetime
	   */
	  const ensureValidDatetime = dtStr => {
	    const date = new Date(dtStr);
	    // must parse as ISO 8601; this also verifies semantics like month is not 13 or 00
	    if (isNaN(date.getTime())) {
	      throw new InvalidDatetimeError('datetime did not parse as ISO 8601');
	    }
	    if (date.toISOString().startsWith('-')) {
	      throw new InvalidDatetimeError('datetime normalized to a negative time');
	    }
	    // regex and other checks for RFC-3339
	    if (!/^[0-9]{4}-[01][0-9]-[0-3][0-9]T[0-2][0-9]:[0-6][0-9]:[0-6][0-9](.[0-9]{1,20})?(Z|([+-][0-2][0-9]:[0-5][0-9]))$/.test(dtStr)) {
	      throw new InvalidDatetimeError("datetime didn't validate via regex");
	    }
	    if (dtStr.length > 64) {
	      throw new InvalidDatetimeError('datetime is too long (64 chars max)');
	    }
	    if (dtStr.endsWith('-00:00')) {
	      throw new InvalidDatetimeError('datetime can not use "-00:00" for UTC timezone');
	    }
	    if (dtStr.startsWith('000')) {
	      throw new InvalidDatetimeError('datetime so close to year zero not allowed');
	    }
	  };
	  exports.ensureValidDatetime = ensureValidDatetime;
	  /* Same logic as ensureValidDatetime(), but returns a boolean instead of throwing an exception.
	   */
	  const isValidDatetime = dtStr => {
	    try {
	      (0, exports.ensureValidDatetime)(dtStr);
	    } catch (err) {
	      if (err instanceof InvalidDatetimeError) {
	        return false;
	      }
	      throw err;
	    }
	    return true;
	  };
	  exports.isValidDatetime = isValidDatetime;
	  /* Takes a flexible datetime string and normalizes representation.
	   *
	   * This function will work with any valid atproto datetime (eg, anything which isValidDatetime() is true for). It *additionally* is more flexible about accepting datetimes that don't comply to RFC 3339, or are missing timezone information, and normalizing them to a valid datetime.
	   *
	   * One use-case is a consistent, sortable string. Another is to work with older invalid createdAt datetimes.
	   *
	   * Successful output will be a valid atproto datetime with millisecond precision (3 sub-second digits) and UTC timezone with trailing 'Z' syntax. Throws `InvalidDatetimeError` if the input string could not be parsed as a datetime, even with permissive parsing.
	   *
	   * Expected output format: YYYY-MM-DDTHH:mm:ss.sssZ
	   */
	  const normalizeDatetime = dtStr => {
	    if ((0, exports.isValidDatetime)(dtStr)) {
	      const outStr = new Date(dtStr).toISOString();
	      if ((0, exports.isValidDatetime)(outStr)) {
	        return outStr;
	      }
	    }
	    // check if this permissive datetime is missing a timezone
	    if (!/.*(([+-]\d\d:?\d\d)|[a-zA-Z])$/.test(dtStr)) {
	      const date = new Date(dtStr + 'Z');
	      if (!isNaN(date.getTime())) {
	        const tzStr = date.toISOString();
	        if ((0, exports.isValidDatetime)(tzStr)) {
	          return tzStr;
	        }
	      }
	    }
	    // finally try parsing as simple datetime
	    const date = new Date(dtStr);
	    if (isNaN(date.getTime())) {
	      throw new InvalidDatetimeError('datetime did not parse as any timestamp format');
	    }
	    const isoStr = date.toISOString();
	    if ((0, exports.isValidDatetime)(isoStr)) {
	      return isoStr;
	    } else {
	      throw new InvalidDatetimeError('datetime normalized to invalid timestamp string');
	    }
	  };
	  exports.normalizeDatetime = normalizeDatetime;
	  /* Variant of normalizeDatetime() which always returns a valid datetime strings.
	   *
	   * If a InvalidDatetimeError is encountered, returns the UNIX epoch time as a UTC datetime (1970-01-01T00:00:00.000Z).
	   */
	  const normalizeDatetimeAlways = dtStr => {
	    try {
	      return (0, exports.normalizeDatetime)(dtStr);
	    } catch (err) {
	      if (err instanceof InvalidDatetimeError) {
	        return new Date(0).toISOString();
	      }
	      throw err;
	    }
	  };
	  exports.normalizeDatetimeAlways = normalizeDatetimeAlways;
	  /* Indicates a datetime string did not pass full atproto Lexicon datetime string format checks.
	   */
	  class InvalidDatetimeError extends Error {}
	  exports.InvalidDatetimeError = InvalidDatetimeError;
	})(datetime);

	(function (exports) {

	  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = {
	        enumerable: true,
	        get: function () {
	          return m[k];
	        }
	      };
	    }
	    Object.defineProperty(o, k2, desc);
	  } : function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	  });
	  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function (m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	  };
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  __exportStar(handle, exports);
	  __exportStar(did, exports);
	  __exportStar(nsid, exports);
	  __exportStar(aturi, exports);
	  __exportStar(tid$1, exports);
	  __exportStar(recordkey, exports);
	  __exportStar(datetime, exports);
	})(dist$4);

	var dist$3 = {};

	var types$5 = {};

	var lib$1 = {};

	var external$1 = {};

	var errors = {};

	var en = {};

	var util$7 = {};

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.getParsedType = exports.ZodParsedType = exports.objectUtil = exports.util = void 0;
	  var util;
	  (function (util) {
	    util.assertEqual = val => val;
	    function assertIs(_arg) {}
	    util.assertIs = assertIs;
	    function assertNever(_x) {
	      throw new Error();
	    }
	    util.assertNever = assertNever;
	    util.arrayToEnum = items => {
	      const obj = {};
	      for (const item of items) {
	        obj[item] = item;
	      }
	      return obj;
	    };
	    util.getValidEnumValues = obj => {
	      const validKeys = util.objectKeys(obj).filter(k => typeof obj[obj[k]] !== "number");
	      const filtered = {};
	      for (const k of validKeys) {
	        filtered[k] = obj[k];
	      }
	      return util.objectValues(filtered);
	    };
	    util.objectValues = obj => {
	      return util.objectKeys(obj).map(function (e) {
	        return obj[e];
	      });
	    };
	    util.objectKeys = typeof Object.keys === "function" // eslint-disable-line ban/ban
	    ? obj => Object.keys(obj) // eslint-disable-line ban/ban
	    : object => {
	      const keys = [];
	      for (const key in object) {
	        if (Object.prototype.hasOwnProperty.call(object, key)) {
	          keys.push(key);
	        }
	      }
	      return keys;
	    };
	    util.find = (arr, checker) => {
	      for (const item of arr) {
	        if (checker(item)) return item;
	      }
	      return undefined;
	    };
	    util.isInteger = typeof Number.isInteger === "function" ? val => Number.isInteger(val) // eslint-disable-line ban/ban
	    : val => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
	    function joinValues(array, separator = " | ") {
	      return array.map(val => typeof val === "string" ? `'${val}'` : val).join(separator);
	    }
	    util.joinValues = joinValues;
	    util.jsonStringifyReplacer = (_, value) => {
	      if (typeof value === "bigint") {
	        return value.toString();
	      }
	      return value;
	    };
	  })(util = exports.util || (exports.util = {}));
	  (function (objectUtil) {
	    objectUtil.mergeShapes = (first, second) => {
	      return {
	        ...first,
	        ...second // second overwrites first
	      };
	    };
	  })(exports.objectUtil || (exports.objectUtil = {}));
	  exports.ZodParsedType = util.arrayToEnum(["string", "nan", "number", "integer", "float", "boolean", "date", "bigint", "symbol", "function", "undefined", "null", "array", "object", "unknown", "promise", "void", "never", "map", "set"]);
	  const getParsedType = data => {
	    const t = typeof data;
	    switch (t) {
	      case "undefined":
	        return exports.ZodParsedType.undefined;
	      case "string":
	        return exports.ZodParsedType.string;
	      case "number":
	        return isNaN(data) ? exports.ZodParsedType.nan : exports.ZodParsedType.number;
	      case "boolean":
	        return exports.ZodParsedType.boolean;
	      case "function":
	        return exports.ZodParsedType.function;
	      case "bigint":
	        return exports.ZodParsedType.bigint;
	      case "symbol":
	        return exports.ZodParsedType.symbol;
	      case "object":
	        if (Array.isArray(data)) {
	          return exports.ZodParsedType.array;
	        }
	        if (data === null) {
	          return exports.ZodParsedType.null;
	        }
	        if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
	          return exports.ZodParsedType.promise;
	        }
	        if (typeof Map !== "undefined" && data instanceof Map) {
	          return exports.ZodParsedType.map;
	        }
	        if (typeof Set !== "undefined" && data instanceof Set) {
	          return exports.ZodParsedType.set;
	        }
	        if (typeof Date !== "undefined" && data instanceof Date) {
	          return exports.ZodParsedType.date;
	        }
	        return exports.ZodParsedType.object;
	      default:
	        return exports.ZodParsedType.unknown;
	    }
	  };
	  exports.getParsedType = getParsedType;
	})(util$7);

	var ZodError$1 = {};

	Object.defineProperty(ZodError$1, "__esModule", {
	  value: true
	});
	ZodError$1.ZodError = ZodError$1.quotelessJson = ZodError$1.ZodIssueCode = void 0;
	const util_1$O = util$7;
	ZodError$1.ZodIssueCode = util_1$O.util.arrayToEnum(["invalid_type", "invalid_literal", "custom", "invalid_union", "invalid_union_discriminator", "invalid_enum_value", "unrecognized_keys", "invalid_arguments", "invalid_return_type", "invalid_date", "invalid_string", "too_small", "too_big", "invalid_intersection_types", "not_multiple_of", "not_finite"]);
	const quotelessJson = obj => {
	  const json = JSON.stringify(obj, null, 2);
	  return json.replace(/"([^"]+)":/g, "$1:");
	};
	ZodError$1.quotelessJson = quotelessJson;
	class ZodError extends Error {
	  constructor(issues) {
	    super();
	    this.issues = [];
	    this.addIssue = sub => {
	      this.issues = [...this.issues, sub];
	    };
	    this.addIssues = (subs = []) => {
	      this.issues = [...this.issues, ...subs];
	    };
	    const actualProto = new.target.prototype;
	    if (Object.setPrototypeOf) {
	      // eslint-disable-next-line ban/ban
	      Object.setPrototypeOf(this, actualProto);
	    } else {
	      this.__proto__ = actualProto;
	    }
	    this.name = "ZodError";
	    this.issues = issues;
	  }
	  get errors() {
	    return this.issues;
	  }
	  format(_mapper) {
	    const mapper = _mapper || function (issue) {
	      return issue.message;
	    };
	    const fieldErrors = {
	      _errors: []
	    };
	    const processError = error => {
	      for (const issue of error.issues) {
	        if (issue.code === "invalid_union") {
	          issue.unionErrors.map(processError);
	        } else if (issue.code === "invalid_return_type") {
	          processError(issue.returnTypeError);
	        } else if (issue.code === "invalid_arguments") {
	          processError(issue.argumentsError);
	        } else if (issue.path.length === 0) {
	          fieldErrors._errors.push(mapper(issue));
	        } else {
	          let curr = fieldErrors;
	          let i = 0;
	          while (i < issue.path.length) {
	            const el = issue.path[i];
	            const terminal = i === issue.path.length - 1;
	            if (!terminal) {
	              curr[el] = curr[el] || {
	                _errors: []
	              };
	              // if (typeof el === "string") {
	              //   curr[el] = curr[el] || { _errors: [] };
	              // } else if (typeof el === "number") {
	              //   const errorArray: any = [];
	              //   errorArray._errors = [];
	              //   curr[el] = curr[el] || errorArray;
	              // }
	            } else {
	              curr[el] = curr[el] || {
	                _errors: []
	              };
	              curr[el]._errors.push(mapper(issue));
	            }
	            curr = curr[el];
	            i++;
	          }
	        }
	      }
	    };
	    processError(this);
	    return fieldErrors;
	  }
	  static assert(value) {
	    if (!(value instanceof ZodError)) {
	      throw new Error(`Not a ZodError: ${value}`);
	    }
	  }
	  toString() {
	    return this.message;
	  }
	  get message() {
	    return JSON.stringify(this.issues, util_1$O.util.jsonStringifyReplacer, 2);
	  }
	  get isEmpty() {
	    return this.issues.length === 0;
	  }
	  flatten(mapper = issue => issue.message) {
	    const fieldErrors = {};
	    const formErrors = [];
	    for (const sub of this.issues) {
	      if (sub.path.length > 0) {
	        fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
	        fieldErrors[sub.path[0]].push(mapper(sub));
	      } else {
	        formErrors.push(mapper(sub));
	      }
	    }
	    return {
	      formErrors,
	      fieldErrors
	    };
	  }
	  get formErrors() {
	    return this.flatten();
	  }
	}
	ZodError$1.ZodError = ZodError;
	ZodError.create = issues => {
	  const error = new ZodError(issues);
	  return error;
	};

	Object.defineProperty(en, "__esModule", {
	  value: true
	});
	const util_1$N = util$7;
	const ZodError_1 = ZodError$1;
	const errorMap = (issue, _ctx) => {
	  let message;
	  switch (issue.code) {
	    case ZodError_1.ZodIssueCode.invalid_type:
	      if (issue.received === util_1$N.ZodParsedType.undefined) {
	        message = "Required";
	      } else {
	        message = `Expected ${issue.expected}, received ${issue.received}`;
	      }
	      break;
	    case ZodError_1.ZodIssueCode.invalid_literal:
	      message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util_1$N.util.jsonStringifyReplacer)}`;
	      break;
	    case ZodError_1.ZodIssueCode.unrecognized_keys:
	      message = `Unrecognized key(s) in object: ${util_1$N.util.joinValues(issue.keys, ", ")}`;
	      break;
	    case ZodError_1.ZodIssueCode.invalid_union:
	      message = `Invalid input`;
	      break;
	    case ZodError_1.ZodIssueCode.invalid_union_discriminator:
	      message = `Invalid discriminator value. Expected ${util_1$N.util.joinValues(issue.options)}`;
	      break;
	    case ZodError_1.ZodIssueCode.invalid_enum_value:
	      message = `Invalid enum value. Expected ${util_1$N.util.joinValues(issue.options)}, received '${issue.received}'`;
	      break;
	    case ZodError_1.ZodIssueCode.invalid_arguments:
	      message = `Invalid function arguments`;
	      break;
	    case ZodError_1.ZodIssueCode.invalid_return_type:
	      message = `Invalid function return type`;
	      break;
	    case ZodError_1.ZodIssueCode.invalid_date:
	      message = `Invalid date`;
	      break;
	    case ZodError_1.ZodIssueCode.invalid_string:
	      if (typeof issue.validation === "object") {
	        if ("includes" in issue.validation) {
	          message = `Invalid input: must include "${issue.validation.includes}"`;
	          if (typeof issue.validation.position === "number") {
	            message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
	          }
	        } else if ("startsWith" in issue.validation) {
	          message = `Invalid input: must start with "${issue.validation.startsWith}"`;
	        } else if ("endsWith" in issue.validation) {
	          message = `Invalid input: must end with "${issue.validation.endsWith}"`;
	        } else {
	          util_1$N.util.assertNever(issue.validation);
	        }
	      } else if (issue.validation !== "regex") {
	        message = `Invalid ${issue.validation}`;
	      } else {
	        message = "Invalid";
	      }
	      break;
	    case ZodError_1.ZodIssueCode.too_small:
	      if (issue.type === "array") message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;else if (issue.type === "string") message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;else if (issue.type === "number") message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;else if (issue.type === "date") message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;else message = "Invalid input";
	      break;
	    case ZodError_1.ZodIssueCode.too_big:
	      if (issue.type === "array") message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;else if (issue.type === "string") message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;else if (issue.type === "number") message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;else if (issue.type === "bigint") message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;else if (issue.type === "date") message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;else message = "Invalid input";
	      break;
	    case ZodError_1.ZodIssueCode.custom:
	      message = `Invalid input`;
	      break;
	    case ZodError_1.ZodIssueCode.invalid_intersection_types:
	      message = `Intersection results could not be merged`;
	      break;
	    case ZodError_1.ZodIssueCode.not_multiple_of:
	      message = `Number must be a multiple of ${issue.multipleOf}`;
	      break;
	    case ZodError_1.ZodIssueCode.not_finite:
	      message = "Number must be finite";
	      break;
	    default:
	      message = _ctx.defaultError;
	      util_1$N.util.assertNever(issue);
	  }
	  return {
	    message
	  };
	};
	en.default = errorMap;

	var __importDefault$4 = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
	  return mod && mod.__esModule ? mod : {
	    "default": mod
	  };
	};
	Object.defineProperty(errors, "__esModule", {
	  value: true
	});
	errors.getErrorMap = errors.setErrorMap = errors.defaultErrorMap = void 0;
	const en_1 = __importDefault$4(en);
	errors.defaultErrorMap = en_1.default;
	let overrideErrorMap = en_1.default;
	function setErrorMap(map) {
	  overrideErrorMap = map;
	}
	errors.setErrorMap = setErrorMap;
	function getErrorMap() {
	  return overrideErrorMap;
	}
	errors.getErrorMap = getErrorMap;

	var parseUtil = {};

	(function (exports) {

	  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
	    return mod && mod.__esModule ? mod : {
	      "default": mod
	    };
	  };
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.isAsync = exports.isValid = exports.isDirty = exports.isAborted = exports.OK = exports.DIRTY = exports.INVALID = exports.ParseStatus = exports.addIssueToContext = exports.EMPTY_PATH = exports.makeIssue = void 0;
	  const errors_1 = errors;
	  const en_1 = __importDefault(en);
	  const makeIssue = params => {
	    const {
	      data,
	      path,
	      errorMaps,
	      issueData
	    } = params;
	    const fullPath = [...path, ...(issueData.path || [])];
	    const fullIssue = {
	      ...issueData,
	      path: fullPath
	    };
	    if (issueData.message !== undefined) {
	      return {
	        ...issueData,
	        path: fullPath,
	        message: issueData.message
	      };
	    }
	    let errorMessage = "";
	    const maps = errorMaps.filter(m => !!m).slice().reverse();
	    for (const map of maps) {
	      errorMessage = map(fullIssue, {
	        data,
	        defaultError: errorMessage
	      }).message;
	    }
	    return {
	      ...issueData,
	      path: fullPath,
	      message: errorMessage
	    };
	  };
	  exports.makeIssue = makeIssue;
	  exports.EMPTY_PATH = [];
	  function addIssueToContext(ctx, issueData) {
	    const overrideMap = (0, errors_1.getErrorMap)();
	    const issue = (0, exports.makeIssue)({
	      issueData: issueData,
	      data: ctx.data,
	      path: ctx.path,
	      errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, overrideMap, overrideMap === en_1.default ? undefined : en_1.default // then global default map
	      ].filter(x => !!x)
	    });
	    ctx.common.issues.push(issue);
	  }
	  exports.addIssueToContext = addIssueToContext;
	  class ParseStatus {
	    constructor() {
	      this.value = "valid";
	    }
	    dirty() {
	      if (this.value === "valid") this.value = "dirty";
	    }
	    abort() {
	      if (this.value !== "aborted") this.value = "aborted";
	    }
	    static mergeArray(status, results) {
	      const arrayValue = [];
	      for (const s of results) {
	        if (s.status === "aborted") return exports.INVALID;
	        if (s.status === "dirty") status.dirty();
	        arrayValue.push(s.value);
	      }
	      return {
	        status: status.value,
	        value: arrayValue
	      };
	    }
	    static async mergeObjectAsync(status, pairs) {
	      const syncPairs = [];
	      for (const pair of pairs) {
	        const key = await pair.key;
	        const value = await pair.value;
	        syncPairs.push({
	          key,
	          value
	        });
	      }
	      return ParseStatus.mergeObjectSync(status, syncPairs);
	    }
	    static mergeObjectSync(status, pairs) {
	      const finalObject = {};
	      for (const pair of pairs) {
	        const {
	          key,
	          value
	        } = pair;
	        if (key.status === "aborted") return exports.INVALID;
	        if (value.status === "aborted") return exports.INVALID;
	        if (key.status === "dirty") status.dirty();
	        if (value.status === "dirty") status.dirty();
	        if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
	          finalObject[key.value] = value.value;
	        }
	      }
	      return {
	        status: status.value,
	        value: finalObject
	      };
	    }
	  }
	  exports.ParseStatus = ParseStatus;
	  exports.INVALID = Object.freeze({
	    status: "aborted"
	  });
	  const DIRTY = value => ({
	    status: "dirty",
	    value
	  });
	  exports.DIRTY = DIRTY;
	  const OK = value => ({
	    status: "valid",
	    value
	  });
	  exports.OK = OK;
	  const isAborted = x => x.status === "aborted";
	  exports.isAborted = isAborted;
	  const isDirty = x => x.status === "dirty";
	  exports.isDirty = isDirty;
	  const isValid = x => x.status === "valid";
	  exports.isValid = isValid;
	  const isAsync = x => typeof Promise !== "undefined" && x instanceof Promise;
	  exports.isAsync = isAsync;
	})(parseUtil);

	var typeAliases = {};

	Object.defineProperty(typeAliases, "__esModule", {
	  value: true
	});

	var types$4 = {};

	var errorUtil = {};

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.errorUtil = void 0;
	  (function (errorUtil) {
	    errorUtil.errToObj = message => typeof message === "string" ? {
	      message
	    } : message || {};
	    errorUtil.toString = message => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
	  })(exports.errorUtil || (exports.errorUtil = {}));
	})(errorUtil);

	(function (exports) {

	  var __classPrivateFieldGet = commonjsGlobal && commonjsGlobal.__classPrivateFieldGet || function (receiver, state, kind, f) {
	    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
	    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
	    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
	  };
	  var __classPrivateFieldSet = commonjsGlobal && commonjsGlobal.__classPrivateFieldSet || function (receiver, state, value, kind, f) {
	    if (kind === "m") throw new TypeError("Private method is not writable");
	    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
	    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
	    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
	  };
	  var _ZodEnum_cache, _ZodNativeEnum_cache;
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.boolean = exports.bigint = exports.array = exports.any = exports.coerce = exports.ZodFirstPartyTypeKind = exports.late = exports.ZodSchema = exports.Schema = exports.custom = exports.ZodReadonly = exports.ZodPipeline = exports.ZodBranded = exports.BRAND = exports.ZodNaN = exports.ZodCatch = exports.ZodDefault = exports.ZodNullable = exports.ZodOptional = exports.ZodTransformer = exports.ZodEffects = exports.ZodPromise = exports.ZodNativeEnum = exports.ZodEnum = exports.ZodLiteral = exports.ZodLazy = exports.ZodFunction = exports.ZodSet = exports.ZodMap = exports.ZodRecord = exports.ZodTuple = exports.ZodIntersection = exports.ZodDiscriminatedUnion = exports.ZodUnion = exports.ZodObject = exports.ZodArray = exports.ZodVoid = exports.ZodNever = exports.ZodUnknown = exports.ZodAny = exports.ZodNull = exports.ZodUndefined = exports.ZodSymbol = exports.ZodDate = exports.ZodBoolean = exports.ZodBigInt = exports.ZodNumber = exports.ZodString = exports.datetimeRegex = exports.ZodType = void 0;
	  exports.NEVER = exports.void = exports.unknown = exports.union = exports.undefined = exports.tuple = exports.transformer = exports.symbol = exports.string = exports.strictObject = exports.set = exports.record = exports.promise = exports.preprocess = exports.pipeline = exports.ostring = exports.optional = exports.onumber = exports.oboolean = exports.object = exports.number = exports.nullable = exports.null = exports.never = exports.nativeEnum = exports.nan = exports.map = exports.literal = exports.lazy = exports.intersection = exports.instanceof = exports.function = exports.enum = exports.effect = exports.discriminatedUnion = exports.date = void 0;
	  const errors_1 = errors;
	  const errorUtil_1 = errorUtil;
	  const parseUtil_1 = parseUtil;
	  const util_1 = util$7;
	  const ZodError_1 = ZodError$1;
	  class ParseInputLazyPath {
	    constructor(parent, value, path, key) {
	      this._cachedPath = [];
	      this.parent = parent;
	      this.data = value;
	      this._path = path;
	      this._key = key;
	    }
	    get path() {
	      if (!this._cachedPath.length) {
	        if (this._key instanceof Array) {
	          this._cachedPath.push(...this._path, ...this._key);
	        } else {
	          this._cachedPath.push(...this._path, this._key);
	        }
	      }
	      return this._cachedPath;
	    }
	  }
	  const handleResult = (ctx, result) => {
	    if ((0, parseUtil_1.isValid)(result)) {
	      return {
	        success: true,
	        data: result.value
	      };
	    } else {
	      if (!ctx.common.issues.length) {
	        throw new Error("Validation failed but no issues detected.");
	      }
	      return {
	        success: false,
	        get error() {
	          if (this._error) return this._error;
	          const error = new ZodError_1.ZodError(ctx.common.issues);
	          this._error = error;
	          return this._error;
	        }
	      };
	    }
	  };
	  function processCreateParams(params) {
	    if (!params) return {};
	    const {
	      errorMap,
	      invalid_type_error,
	      required_error,
	      description
	    } = params;
	    if (errorMap && (invalid_type_error || required_error)) {
	      throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
	    }
	    if (errorMap) return {
	      errorMap: errorMap,
	      description
	    };
	    const customMap = (iss, ctx) => {
	      var _a, _b;
	      const {
	        message
	      } = params;
	      if (iss.code === "invalid_enum_value") {
	        return {
	          message: message !== null && message !== void 0 ? message : ctx.defaultError
	        };
	      }
	      if (typeof ctx.data === "undefined") {
	        return {
	          message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError
	        };
	      }
	      if (iss.code !== "invalid_type") return {
	        message: ctx.defaultError
	      };
	      return {
	        message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError
	      };
	    };
	    return {
	      errorMap: customMap,
	      description
	    };
	  }
	  class ZodType {
	    constructor(def) {
	      /** Alias of safeParseAsync */
	      this.spa = this.safeParseAsync;
	      this._def = def;
	      this.parse = this.parse.bind(this);
	      this.safeParse = this.safeParse.bind(this);
	      this.parseAsync = this.parseAsync.bind(this);
	      this.safeParseAsync = this.safeParseAsync.bind(this);
	      this.spa = this.spa.bind(this);
	      this.refine = this.refine.bind(this);
	      this.refinement = this.refinement.bind(this);
	      this.superRefine = this.superRefine.bind(this);
	      this.optional = this.optional.bind(this);
	      this.nullable = this.nullable.bind(this);
	      this.nullish = this.nullish.bind(this);
	      this.array = this.array.bind(this);
	      this.promise = this.promise.bind(this);
	      this.or = this.or.bind(this);
	      this.and = this.and.bind(this);
	      this.transform = this.transform.bind(this);
	      this.brand = this.brand.bind(this);
	      this.default = this.default.bind(this);
	      this.catch = this.catch.bind(this);
	      this.describe = this.describe.bind(this);
	      this.pipe = this.pipe.bind(this);
	      this.readonly = this.readonly.bind(this);
	      this.isNullable = this.isNullable.bind(this);
	      this.isOptional = this.isOptional.bind(this);
	    }
	    get description() {
	      return this._def.description;
	    }
	    _getType(input) {
	      return (0, util_1.getParsedType)(input.data);
	    }
	    _getOrReturnCtx(input, ctx) {
	      return ctx || {
	        common: input.parent.common,
	        data: input.data,
	        parsedType: (0, util_1.getParsedType)(input.data),
	        schemaErrorMap: this._def.errorMap,
	        path: input.path,
	        parent: input.parent
	      };
	    }
	    _processInputParams(input) {
	      return {
	        status: new parseUtil_1.ParseStatus(),
	        ctx: {
	          common: input.parent.common,
	          data: input.data,
	          parsedType: (0, util_1.getParsedType)(input.data),
	          schemaErrorMap: this._def.errorMap,
	          path: input.path,
	          parent: input.parent
	        }
	      };
	    }
	    _parseSync(input) {
	      const result = this._parse(input);
	      if ((0, parseUtil_1.isAsync)(result)) {
	        throw new Error("Synchronous parse encountered promise.");
	      }
	      return result;
	    }
	    _parseAsync(input) {
	      const result = this._parse(input);
	      return Promise.resolve(result);
	    }
	    parse(data, params) {
	      const result = this.safeParse(data, params);
	      if (result.success) return result.data;
	      throw result.error;
	    }
	    safeParse(data, params) {
	      var _a;
	      const ctx = {
	        common: {
	          issues: [],
	          async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
	          contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
	        },
	        path: (params === null || params === void 0 ? void 0 : params.path) || [],
	        schemaErrorMap: this._def.errorMap,
	        parent: null,
	        data,
	        parsedType: (0, util_1.getParsedType)(data)
	      };
	      const result = this._parseSync({
	        data,
	        path: ctx.path,
	        parent: ctx
	      });
	      return handleResult(ctx, result);
	    }
	    async parseAsync(data, params) {
	      const result = await this.safeParseAsync(data, params);
	      if (result.success) return result.data;
	      throw result.error;
	    }
	    async safeParseAsync(data, params) {
	      const ctx = {
	        common: {
	          issues: [],
	          contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
	          async: true
	        },
	        path: (params === null || params === void 0 ? void 0 : params.path) || [],
	        schemaErrorMap: this._def.errorMap,
	        parent: null,
	        data,
	        parsedType: (0, util_1.getParsedType)(data)
	      };
	      const maybeAsyncResult = this._parse({
	        data,
	        path: ctx.path,
	        parent: ctx
	      });
	      const result = await ((0, parseUtil_1.isAsync)(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
	      return handleResult(ctx, result);
	    }
	    refine(check, message) {
	      const getIssueProperties = val => {
	        if (typeof message === "string" || typeof message === "undefined") {
	          return {
	            message
	          };
	        } else if (typeof message === "function") {
	          return message(val);
	        } else {
	          return message;
	        }
	      };
	      return this._refinement((val, ctx) => {
	        const result = check(val);
	        const setError = () => ctx.addIssue({
	          code: ZodError_1.ZodIssueCode.custom,
	          ...getIssueProperties(val)
	        });
	        if (typeof Promise !== "undefined" && result instanceof Promise) {
	          return result.then(data => {
	            if (!data) {
	              setError();
	              return false;
	            } else {
	              return true;
	            }
	          });
	        }
	        if (!result) {
	          setError();
	          return false;
	        } else {
	          return true;
	        }
	      });
	    }
	    refinement(check, refinementData) {
	      return this._refinement((val, ctx) => {
	        if (!check(val)) {
	          ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
	          return false;
	        } else {
	          return true;
	        }
	      });
	    }
	    _refinement(refinement) {
	      return new ZodEffects({
	        schema: this,
	        typeName: ZodFirstPartyTypeKind.ZodEffects,
	        effect: {
	          type: "refinement",
	          refinement
	        }
	      });
	    }
	    superRefine(refinement) {
	      return this._refinement(refinement);
	    }
	    optional() {
	      return ZodOptional.create(this, this._def);
	    }
	    nullable() {
	      return ZodNullable.create(this, this._def);
	    }
	    nullish() {
	      return this.nullable().optional();
	    }
	    array() {
	      return ZodArray.create(this, this._def);
	    }
	    promise() {
	      return ZodPromise.create(this, this._def);
	    }
	    or(option) {
	      return ZodUnion.create([this, option], this._def);
	    }
	    and(incoming) {
	      return ZodIntersection.create(this, incoming, this._def);
	    }
	    transform(transform) {
	      return new ZodEffects({
	        ...processCreateParams(this._def),
	        schema: this,
	        typeName: ZodFirstPartyTypeKind.ZodEffects,
	        effect: {
	          type: "transform",
	          transform
	        }
	      });
	    }
	    default(def) {
	      const defaultValueFunc = typeof def === "function" ? def : () => def;
	      return new ZodDefault({
	        ...processCreateParams(this._def),
	        innerType: this,
	        defaultValue: defaultValueFunc,
	        typeName: ZodFirstPartyTypeKind.ZodDefault
	      });
	    }
	    brand() {
	      return new ZodBranded({
	        typeName: ZodFirstPartyTypeKind.ZodBranded,
	        type: this,
	        ...processCreateParams(this._def)
	      });
	    }
	    catch(def) {
	      const catchValueFunc = typeof def === "function" ? def : () => def;
	      return new ZodCatch({
	        ...processCreateParams(this._def),
	        innerType: this,
	        catchValue: catchValueFunc,
	        typeName: ZodFirstPartyTypeKind.ZodCatch
	      });
	    }
	    describe(description) {
	      const This = this.constructor;
	      return new This({
	        ...this._def,
	        description
	      });
	    }
	    pipe(target) {
	      return ZodPipeline.create(this, target);
	    }
	    readonly() {
	      return ZodReadonly.create(this);
	    }
	    isOptional() {
	      return this.safeParse(undefined).success;
	    }
	    isNullable() {
	      return this.safeParse(null).success;
	    }
	  }
	  exports.ZodType = ZodType;
	  exports.Schema = ZodType;
	  exports.ZodSchema = ZodType;
	  const cuidRegex = /^c[^\s-]{8,}$/i;
	  const cuid2Regex = /^[0-9a-z]+$/;
	  const ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/;
	  // const uuidRegex =
	  //   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
	  const uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
	  const nanoidRegex = /^[a-z0-9_-]{21}$/i;
	  const durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
	  // from https://stackoverflow.com/a/46181/1550155
	  // old version: too slow, didn't support unicode
	  // const emailRegex = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
	  //old email regex
	  // const emailRegex = /^(([^<>()[\].,;:\s@"]+(\.[^<>()[\].,;:\s@"]+)*)|(".+"))@((?!-)([^<>()[\].,;:\s@"]+\.)+[^<>()[\].,;:\s@"]{1,})[^-<>()[\].,;:\s@"]$/i;
	  // eslint-disable-next-line
	  // const emailRegex =
	  //   /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/;
	  // const emailRegex =
	  //   /^[a-zA-Z0-9\.\!\#\$\%\&\'\*\+\/\=\?\^\_\`\{\|\}\~\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
	  // const emailRegex =
	  //   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/i;
	  const emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
	  // const emailRegex =
	  //   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\.[a-z0-9\-]+)*$/i;
	  // from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression
	  const _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
	  let emojiRegex;
	  // faster, simpler, safer
	  const ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
	  const ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
	  // https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript
	  const base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
	  // simple
	  // const dateRegexSource = `\\d{4}-\\d{2}-\\d{2}`;
	  // no leap year validation
	  // const dateRegexSource = `\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\d|2\\d))`;
	  // with leap year validation
	  const dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
	  const dateRegex = new RegExp(`^${dateRegexSource}$`);
	  function timeRegexSource(args) {
	    // let regex = `\\d{2}:\\d{2}:\\d{2}`;
	    let regex = `([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d`;
	    if (args.precision) {
	      regex = `${regex}\\.\\d{${args.precision}}`;
	    } else if (args.precision == null) {
	      regex = `${regex}(\\.\\d+)?`;
	    }
	    return regex;
	  }
	  function timeRegex(args) {
	    return new RegExp(`^${timeRegexSource(args)}$`);
	  }
	  // Adapted from https://stackoverflow.com/a/3143231
	  function datetimeRegex(args) {
	    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
	    const opts = [];
	    opts.push(args.local ? `Z?` : `Z`);
	    if (args.offset) opts.push(`([+-]\\d{2}:?\\d{2})`);
	    regex = `${regex}(${opts.join("|")})`;
	    return new RegExp(`^${regex}$`);
	  }
	  exports.datetimeRegex = datetimeRegex;
	  function isValidIP(ip, version) {
	    if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
	      return true;
	    }
	    if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
	      return true;
	    }
	    return false;
	  }
	  class ZodString extends ZodType {
	    _parse(input) {
	      if (this._def.coerce) {
	        input.data = String(input.data);
	      }
	      const parsedType = this._getType(input);
	      if (parsedType !== util_1.ZodParsedType.string) {
	        const ctx = this._getOrReturnCtx(input);
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          code: ZodError_1.ZodIssueCode.invalid_type,
	          expected: util_1.ZodParsedType.string,
	          received: ctx.parsedType
	        });
	        return parseUtil_1.INVALID;
	      }
	      const status = new parseUtil_1.ParseStatus();
	      let ctx = undefined;
	      for (const check of this._def.checks) {
	        if (check.kind === "min") {
	          if (input.data.length < check.value) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              code: ZodError_1.ZodIssueCode.too_small,
	              minimum: check.value,
	              type: "string",
	              inclusive: true,
	              exact: false,
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "max") {
	          if (input.data.length > check.value) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              code: ZodError_1.ZodIssueCode.too_big,
	              maximum: check.value,
	              type: "string",
	              inclusive: true,
	              exact: false,
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "length") {
	          const tooBig = input.data.length > check.value;
	          const tooSmall = input.data.length < check.value;
	          if (tooBig || tooSmall) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            if (tooBig) {
	              (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.too_big,
	                maximum: check.value,
	                type: "string",
	                inclusive: true,
	                exact: true,
	                message: check.message
	              });
	            } else if (tooSmall) {
	              (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.too_small,
	                minimum: check.value,
	                type: "string",
	                inclusive: true,
	                exact: true,
	                message: check.message
	              });
	            }
	            status.dirty();
	          }
	        } else if (check.kind === "email") {
	          if (!emailRegex.test(input.data)) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              validation: "email",
	              code: ZodError_1.ZodIssueCode.invalid_string,
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "emoji") {
	          if (!emojiRegex) {
	            emojiRegex = new RegExp(_emojiRegex, "u");
	          }
	          if (!emojiRegex.test(input.data)) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              validation: "emoji",
	              code: ZodError_1.ZodIssueCode.invalid_string,
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "uuid") {
	          if (!uuidRegex.test(input.data)) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              validation: "uuid",
	              code: ZodError_1.ZodIssueCode.invalid_string,
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "nanoid") {
	          if (!nanoidRegex.test(input.data)) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              validation: "nanoid",
	              code: ZodError_1.ZodIssueCode.invalid_string,
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "cuid") {
	          if (!cuidRegex.test(input.data)) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              validation: "cuid",
	              code: ZodError_1.ZodIssueCode.invalid_string,
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "cuid2") {
	          if (!cuid2Regex.test(input.data)) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              validation: "cuid2",
	              code: ZodError_1.ZodIssueCode.invalid_string,
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "ulid") {
	          if (!ulidRegex.test(input.data)) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              validation: "ulid",
	              code: ZodError_1.ZodIssueCode.invalid_string,
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "url") {
	          try {
	            new URL(input.data);
	          } catch (_a) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              validation: "url",
	              code: ZodError_1.ZodIssueCode.invalid_string,
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "regex") {
	          check.regex.lastIndex = 0;
	          const testResult = check.regex.test(input.data);
	          if (!testResult) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              validation: "regex",
	              code: ZodError_1.ZodIssueCode.invalid_string,
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "trim") {
	          input.data = input.data.trim();
	        } else if (check.kind === "includes") {
	          if (!input.data.includes(check.value, check.position)) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              code: ZodError_1.ZodIssueCode.invalid_string,
	              validation: {
	                includes: check.value,
	                position: check.position
	              },
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "toLowerCase") {
	          input.data = input.data.toLowerCase();
	        } else if (check.kind === "toUpperCase") {
	          input.data = input.data.toUpperCase();
	        } else if (check.kind === "startsWith") {
	          if (!input.data.startsWith(check.value)) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              code: ZodError_1.ZodIssueCode.invalid_string,
	              validation: {
	                startsWith: check.value
	              },
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "endsWith") {
	          if (!input.data.endsWith(check.value)) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              code: ZodError_1.ZodIssueCode.invalid_string,
	              validation: {
	                endsWith: check.value
	              },
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "datetime") {
	          const regex = datetimeRegex(check);
	          if (!regex.test(input.data)) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              code: ZodError_1.ZodIssueCode.invalid_string,
	              validation: "datetime",
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "date") {
	          const regex = dateRegex;
	          if (!regex.test(input.data)) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              code: ZodError_1.ZodIssueCode.invalid_string,
	              validation: "date",
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "time") {
	          const regex = timeRegex(check);
	          if (!regex.test(input.data)) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              code: ZodError_1.ZodIssueCode.invalid_string,
	              validation: "time",
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "duration") {
	          if (!durationRegex.test(input.data)) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              validation: "duration",
	              code: ZodError_1.ZodIssueCode.invalid_string,
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "ip") {
	          if (!isValidIP(input.data, check.version)) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              validation: "ip",
	              code: ZodError_1.ZodIssueCode.invalid_string,
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "base64") {
	          if (!base64Regex.test(input.data)) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              validation: "base64",
	              code: ZodError_1.ZodIssueCode.invalid_string,
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else {
	          util_1.util.assertNever(check);
	        }
	      }
	      return {
	        status: status.value,
	        value: input.data
	      };
	    }
	    _regex(regex, validation, message) {
	      return this.refinement(data => regex.test(data), {
	        validation,
	        code: ZodError_1.ZodIssueCode.invalid_string,
	        ...errorUtil_1.errorUtil.errToObj(message)
	      });
	    }
	    _addCheck(check) {
	      return new ZodString({
	        ...this._def,
	        checks: [...this._def.checks, check]
	      });
	    }
	    email(message) {
	      return this._addCheck({
	        kind: "email",
	        ...errorUtil_1.errorUtil.errToObj(message)
	      });
	    }
	    url(message) {
	      return this._addCheck({
	        kind: "url",
	        ...errorUtil_1.errorUtil.errToObj(message)
	      });
	    }
	    emoji(message) {
	      return this._addCheck({
	        kind: "emoji",
	        ...errorUtil_1.errorUtil.errToObj(message)
	      });
	    }
	    uuid(message) {
	      return this._addCheck({
	        kind: "uuid",
	        ...errorUtil_1.errorUtil.errToObj(message)
	      });
	    }
	    nanoid(message) {
	      return this._addCheck({
	        kind: "nanoid",
	        ...errorUtil_1.errorUtil.errToObj(message)
	      });
	    }
	    cuid(message) {
	      return this._addCheck({
	        kind: "cuid",
	        ...errorUtil_1.errorUtil.errToObj(message)
	      });
	    }
	    cuid2(message) {
	      return this._addCheck({
	        kind: "cuid2",
	        ...errorUtil_1.errorUtil.errToObj(message)
	      });
	    }
	    ulid(message) {
	      return this._addCheck({
	        kind: "ulid",
	        ...errorUtil_1.errorUtil.errToObj(message)
	      });
	    }
	    base64(message) {
	      return this._addCheck({
	        kind: "base64",
	        ...errorUtil_1.errorUtil.errToObj(message)
	      });
	    }
	    ip(options) {
	      return this._addCheck({
	        kind: "ip",
	        ...errorUtil_1.errorUtil.errToObj(options)
	      });
	    }
	    datetime(options) {
	      var _a, _b;
	      if (typeof options === "string") {
	        return this._addCheck({
	          kind: "datetime",
	          precision: null,
	          offset: false,
	          local: false,
	          message: options
	        });
	      }
	      return this._addCheck({
	        kind: "datetime",
	        precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
	        offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
	        local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,
	        ...errorUtil_1.errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
	      });
	    }
	    date(message) {
	      return this._addCheck({
	        kind: "date",
	        message
	      });
	    }
	    time(options) {
	      if (typeof options === "string") {
	        return this._addCheck({
	          kind: "time",
	          precision: null,
	          message: options
	        });
	      }
	      return this._addCheck({
	        kind: "time",
	        precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
	        ...errorUtil_1.errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
	      });
	    }
	    duration(message) {
	      return this._addCheck({
	        kind: "duration",
	        ...errorUtil_1.errorUtil.errToObj(message)
	      });
	    }
	    regex(regex, message) {
	      return this._addCheck({
	        kind: "regex",
	        regex: regex,
	        ...errorUtil_1.errorUtil.errToObj(message)
	      });
	    }
	    includes(value, options) {
	      return this._addCheck({
	        kind: "includes",
	        value: value,
	        position: options === null || options === void 0 ? void 0 : options.position,
	        ...errorUtil_1.errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
	      });
	    }
	    startsWith(value, message) {
	      return this._addCheck({
	        kind: "startsWith",
	        value: value,
	        ...errorUtil_1.errorUtil.errToObj(message)
	      });
	    }
	    endsWith(value, message) {
	      return this._addCheck({
	        kind: "endsWith",
	        value: value,
	        ...errorUtil_1.errorUtil.errToObj(message)
	      });
	    }
	    min(minLength, message) {
	      return this._addCheck({
	        kind: "min",
	        value: minLength,
	        ...errorUtil_1.errorUtil.errToObj(message)
	      });
	    }
	    max(maxLength, message) {
	      return this._addCheck({
	        kind: "max",
	        value: maxLength,
	        ...errorUtil_1.errorUtil.errToObj(message)
	      });
	    }
	    length(len, message) {
	      return this._addCheck({
	        kind: "length",
	        value: len,
	        ...errorUtil_1.errorUtil.errToObj(message)
	      });
	    }
	    /**
	     * @deprecated Use z.string().min(1) instead.
	     * @see {@link ZodString.min}
	     */
	    nonempty(message) {
	      return this.min(1, errorUtil_1.errorUtil.errToObj(message));
	    }
	    trim() {
	      return new ZodString({
	        ...this._def,
	        checks: [...this._def.checks, {
	          kind: "trim"
	        }]
	      });
	    }
	    toLowerCase() {
	      return new ZodString({
	        ...this._def,
	        checks: [...this._def.checks, {
	          kind: "toLowerCase"
	        }]
	      });
	    }
	    toUpperCase() {
	      return new ZodString({
	        ...this._def,
	        checks: [...this._def.checks, {
	          kind: "toUpperCase"
	        }]
	      });
	    }
	    get isDatetime() {
	      return !!this._def.checks.find(ch => ch.kind === "datetime");
	    }
	    get isDate() {
	      return !!this._def.checks.find(ch => ch.kind === "date");
	    }
	    get isTime() {
	      return !!this._def.checks.find(ch => ch.kind === "time");
	    }
	    get isDuration() {
	      return !!this._def.checks.find(ch => ch.kind === "duration");
	    }
	    get isEmail() {
	      return !!this._def.checks.find(ch => ch.kind === "email");
	    }
	    get isURL() {
	      return !!this._def.checks.find(ch => ch.kind === "url");
	    }
	    get isEmoji() {
	      return !!this._def.checks.find(ch => ch.kind === "emoji");
	    }
	    get isUUID() {
	      return !!this._def.checks.find(ch => ch.kind === "uuid");
	    }
	    get isNANOID() {
	      return !!this._def.checks.find(ch => ch.kind === "nanoid");
	    }
	    get isCUID() {
	      return !!this._def.checks.find(ch => ch.kind === "cuid");
	    }
	    get isCUID2() {
	      return !!this._def.checks.find(ch => ch.kind === "cuid2");
	    }
	    get isULID() {
	      return !!this._def.checks.find(ch => ch.kind === "ulid");
	    }
	    get isIP() {
	      return !!this._def.checks.find(ch => ch.kind === "ip");
	    }
	    get isBase64() {
	      return !!this._def.checks.find(ch => ch.kind === "base64");
	    }
	    get minLength() {
	      let min = null;
	      for (const ch of this._def.checks) {
	        if (ch.kind === "min") {
	          if (min === null || ch.value > min) min = ch.value;
	        }
	      }
	      return min;
	    }
	    get maxLength() {
	      let max = null;
	      for (const ch of this._def.checks) {
	        if (ch.kind === "max") {
	          if (max === null || ch.value < max) max = ch.value;
	        }
	      }
	      return max;
	    }
	  }
	  exports.ZodString = ZodString;
	  ZodString.create = params => {
	    var _a;
	    return new ZodString({
	      checks: [],
	      typeName: ZodFirstPartyTypeKind.ZodString,
	      coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
	      ...processCreateParams(params)
	    });
	  };
	  // https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034
	  function floatSafeRemainder(val, step) {
	    const valDecCount = (val.toString().split(".")[1] || "").length;
	    const stepDecCount = (step.toString().split(".")[1] || "").length;
	    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
	    const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
	    const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
	    return valInt % stepInt / Math.pow(10, decCount);
	  }
	  class ZodNumber extends ZodType {
	    constructor() {
	      super(...arguments);
	      this.min = this.gte;
	      this.max = this.lte;
	      this.step = this.multipleOf;
	    }
	    _parse(input) {
	      if (this._def.coerce) {
	        input.data = Number(input.data);
	      }
	      const parsedType = this._getType(input);
	      if (parsedType !== util_1.ZodParsedType.number) {
	        const ctx = this._getOrReturnCtx(input);
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          code: ZodError_1.ZodIssueCode.invalid_type,
	          expected: util_1.ZodParsedType.number,
	          received: ctx.parsedType
	        });
	        return parseUtil_1.INVALID;
	      }
	      let ctx = undefined;
	      const status = new parseUtil_1.ParseStatus();
	      for (const check of this._def.checks) {
	        if (check.kind === "int") {
	          if (!util_1.util.isInteger(input.data)) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              code: ZodError_1.ZodIssueCode.invalid_type,
	              expected: "integer",
	              received: "float",
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "min") {
	          const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
	          if (tooSmall) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              code: ZodError_1.ZodIssueCode.too_small,
	              minimum: check.value,
	              type: "number",
	              inclusive: check.inclusive,
	              exact: false,
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "max") {
	          const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
	          if (tooBig) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              code: ZodError_1.ZodIssueCode.too_big,
	              maximum: check.value,
	              type: "number",
	              inclusive: check.inclusive,
	              exact: false,
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "multipleOf") {
	          if (floatSafeRemainder(input.data, check.value) !== 0) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              code: ZodError_1.ZodIssueCode.not_multiple_of,
	              multipleOf: check.value,
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "finite") {
	          if (!Number.isFinite(input.data)) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              code: ZodError_1.ZodIssueCode.not_finite,
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else {
	          util_1.util.assertNever(check);
	        }
	      }
	      return {
	        status: status.value,
	        value: input.data
	      };
	    }
	    gte(value, message) {
	      return this.setLimit("min", value, true, errorUtil_1.errorUtil.toString(message));
	    }
	    gt(value, message) {
	      return this.setLimit("min", value, false, errorUtil_1.errorUtil.toString(message));
	    }
	    lte(value, message) {
	      return this.setLimit("max", value, true, errorUtil_1.errorUtil.toString(message));
	    }
	    lt(value, message) {
	      return this.setLimit("max", value, false, errorUtil_1.errorUtil.toString(message));
	    }
	    setLimit(kind, value, inclusive, message) {
	      return new ZodNumber({
	        ...this._def,
	        checks: [...this._def.checks, {
	          kind,
	          value,
	          inclusive,
	          message: errorUtil_1.errorUtil.toString(message)
	        }]
	      });
	    }
	    _addCheck(check) {
	      return new ZodNumber({
	        ...this._def,
	        checks: [...this._def.checks, check]
	      });
	    }
	    int(message) {
	      return this._addCheck({
	        kind: "int",
	        message: errorUtil_1.errorUtil.toString(message)
	      });
	    }
	    positive(message) {
	      return this._addCheck({
	        kind: "min",
	        value: 0,
	        inclusive: false,
	        message: errorUtil_1.errorUtil.toString(message)
	      });
	    }
	    negative(message) {
	      return this._addCheck({
	        kind: "max",
	        value: 0,
	        inclusive: false,
	        message: errorUtil_1.errorUtil.toString(message)
	      });
	    }
	    nonpositive(message) {
	      return this._addCheck({
	        kind: "max",
	        value: 0,
	        inclusive: true,
	        message: errorUtil_1.errorUtil.toString(message)
	      });
	    }
	    nonnegative(message) {
	      return this._addCheck({
	        kind: "min",
	        value: 0,
	        inclusive: true,
	        message: errorUtil_1.errorUtil.toString(message)
	      });
	    }
	    multipleOf(value, message) {
	      return this._addCheck({
	        kind: "multipleOf",
	        value: value,
	        message: errorUtil_1.errorUtil.toString(message)
	      });
	    }
	    finite(message) {
	      return this._addCheck({
	        kind: "finite",
	        message: errorUtil_1.errorUtil.toString(message)
	      });
	    }
	    safe(message) {
	      return this._addCheck({
	        kind: "min",
	        inclusive: true,
	        value: Number.MIN_SAFE_INTEGER,
	        message: errorUtil_1.errorUtil.toString(message)
	      })._addCheck({
	        kind: "max",
	        inclusive: true,
	        value: Number.MAX_SAFE_INTEGER,
	        message: errorUtil_1.errorUtil.toString(message)
	      });
	    }
	    get minValue() {
	      let min = null;
	      for (const ch of this._def.checks) {
	        if (ch.kind === "min") {
	          if (min === null || ch.value > min) min = ch.value;
	        }
	      }
	      return min;
	    }
	    get maxValue() {
	      let max = null;
	      for (const ch of this._def.checks) {
	        if (ch.kind === "max") {
	          if (max === null || ch.value < max) max = ch.value;
	        }
	      }
	      return max;
	    }
	    get isInt() {
	      return !!this._def.checks.find(ch => ch.kind === "int" || ch.kind === "multipleOf" && util_1.util.isInteger(ch.value));
	    }
	    get isFinite() {
	      let max = null,
	        min = null;
	      for (const ch of this._def.checks) {
	        if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
	          return true;
	        } else if (ch.kind === "min") {
	          if (min === null || ch.value > min) min = ch.value;
	        } else if (ch.kind === "max") {
	          if (max === null || ch.value < max) max = ch.value;
	        }
	      }
	      return Number.isFinite(min) && Number.isFinite(max);
	    }
	  }
	  exports.ZodNumber = ZodNumber;
	  ZodNumber.create = params => {
	    return new ZodNumber({
	      checks: [],
	      typeName: ZodFirstPartyTypeKind.ZodNumber,
	      coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
	      ...processCreateParams(params)
	    });
	  };
	  class ZodBigInt extends ZodType {
	    constructor() {
	      super(...arguments);
	      this.min = this.gte;
	      this.max = this.lte;
	    }
	    _parse(input) {
	      if (this._def.coerce) {
	        input.data = BigInt(input.data);
	      }
	      const parsedType = this._getType(input);
	      if (parsedType !== util_1.ZodParsedType.bigint) {
	        const ctx = this._getOrReturnCtx(input);
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          code: ZodError_1.ZodIssueCode.invalid_type,
	          expected: util_1.ZodParsedType.bigint,
	          received: ctx.parsedType
	        });
	        return parseUtil_1.INVALID;
	      }
	      let ctx = undefined;
	      const status = new parseUtil_1.ParseStatus();
	      for (const check of this._def.checks) {
	        if (check.kind === "min") {
	          const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
	          if (tooSmall) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              code: ZodError_1.ZodIssueCode.too_small,
	              type: "bigint",
	              minimum: check.value,
	              inclusive: check.inclusive,
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "max") {
	          const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
	          if (tooBig) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              code: ZodError_1.ZodIssueCode.too_big,
	              type: "bigint",
	              maximum: check.value,
	              inclusive: check.inclusive,
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "multipleOf") {
	          if (input.data % check.value !== BigInt(0)) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              code: ZodError_1.ZodIssueCode.not_multiple_of,
	              multipleOf: check.value,
	              message: check.message
	            });
	            status.dirty();
	          }
	        } else {
	          util_1.util.assertNever(check);
	        }
	      }
	      return {
	        status: status.value,
	        value: input.data
	      };
	    }
	    gte(value, message) {
	      return this.setLimit("min", value, true, errorUtil_1.errorUtil.toString(message));
	    }
	    gt(value, message) {
	      return this.setLimit("min", value, false, errorUtil_1.errorUtil.toString(message));
	    }
	    lte(value, message) {
	      return this.setLimit("max", value, true, errorUtil_1.errorUtil.toString(message));
	    }
	    lt(value, message) {
	      return this.setLimit("max", value, false, errorUtil_1.errorUtil.toString(message));
	    }
	    setLimit(kind, value, inclusive, message) {
	      return new ZodBigInt({
	        ...this._def,
	        checks: [...this._def.checks, {
	          kind,
	          value,
	          inclusive,
	          message: errorUtil_1.errorUtil.toString(message)
	        }]
	      });
	    }
	    _addCheck(check) {
	      return new ZodBigInt({
	        ...this._def,
	        checks: [...this._def.checks, check]
	      });
	    }
	    positive(message) {
	      return this._addCheck({
	        kind: "min",
	        value: BigInt(0),
	        inclusive: false,
	        message: errorUtil_1.errorUtil.toString(message)
	      });
	    }
	    negative(message) {
	      return this._addCheck({
	        kind: "max",
	        value: BigInt(0),
	        inclusive: false,
	        message: errorUtil_1.errorUtil.toString(message)
	      });
	    }
	    nonpositive(message) {
	      return this._addCheck({
	        kind: "max",
	        value: BigInt(0),
	        inclusive: true,
	        message: errorUtil_1.errorUtil.toString(message)
	      });
	    }
	    nonnegative(message) {
	      return this._addCheck({
	        kind: "min",
	        value: BigInt(0),
	        inclusive: true,
	        message: errorUtil_1.errorUtil.toString(message)
	      });
	    }
	    multipleOf(value, message) {
	      return this._addCheck({
	        kind: "multipleOf",
	        value,
	        message: errorUtil_1.errorUtil.toString(message)
	      });
	    }
	    get minValue() {
	      let min = null;
	      for (const ch of this._def.checks) {
	        if (ch.kind === "min") {
	          if (min === null || ch.value > min) min = ch.value;
	        }
	      }
	      return min;
	    }
	    get maxValue() {
	      let max = null;
	      for (const ch of this._def.checks) {
	        if (ch.kind === "max") {
	          if (max === null || ch.value < max) max = ch.value;
	        }
	      }
	      return max;
	    }
	  }
	  exports.ZodBigInt = ZodBigInt;
	  ZodBigInt.create = params => {
	    var _a;
	    return new ZodBigInt({
	      checks: [],
	      typeName: ZodFirstPartyTypeKind.ZodBigInt,
	      coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
	      ...processCreateParams(params)
	    });
	  };
	  class ZodBoolean extends ZodType {
	    _parse(input) {
	      if (this._def.coerce) {
	        input.data = Boolean(input.data);
	      }
	      const parsedType = this._getType(input);
	      if (parsedType !== util_1.ZodParsedType.boolean) {
	        const ctx = this._getOrReturnCtx(input);
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          code: ZodError_1.ZodIssueCode.invalid_type,
	          expected: util_1.ZodParsedType.boolean,
	          received: ctx.parsedType
	        });
	        return parseUtil_1.INVALID;
	      }
	      return (0, parseUtil_1.OK)(input.data);
	    }
	  }
	  exports.ZodBoolean = ZodBoolean;
	  ZodBoolean.create = params => {
	    return new ZodBoolean({
	      typeName: ZodFirstPartyTypeKind.ZodBoolean,
	      coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
	      ...processCreateParams(params)
	    });
	  };
	  class ZodDate extends ZodType {
	    _parse(input) {
	      if (this._def.coerce) {
	        input.data = new Date(input.data);
	      }
	      const parsedType = this._getType(input);
	      if (parsedType !== util_1.ZodParsedType.date) {
	        const ctx = this._getOrReturnCtx(input);
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          code: ZodError_1.ZodIssueCode.invalid_type,
	          expected: util_1.ZodParsedType.date,
	          received: ctx.parsedType
	        });
	        return parseUtil_1.INVALID;
	      }
	      if (isNaN(input.data.getTime())) {
	        const ctx = this._getOrReturnCtx(input);
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          code: ZodError_1.ZodIssueCode.invalid_date
	        });
	        return parseUtil_1.INVALID;
	      }
	      const status = new parseUtil_1.ParseStatus();
	      let ctx = undefined;
	      for (const check of this._def.checks) {
	        if (check.kind === "min") {
	          if (input.data.getTime() < check.value) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              code: ZodError_1.ZodIssueCode.too_small,
	              message: check.message,
	              inclusive: true,
	              exact: false,
	              minimum: check.value,
	              type: "date"
	            });
	            status.dirty();
	          }
	        } else if (check.kind === "max") {
	          if (input.data.getTime() > check.value) {
	            ctx = this._getOrReturnCtx(input, ctx);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              code: ZodError_1.ZodIssueCode.too_big,
	              message: check.message,
	              inclusive: true,
	              exact: false,
	              maximum: check.value,
	              type: "date"
	            });
	            status.dirty();
	          }
	        } else {
	          util_1.util.assertNever(check);
	        }
	      }
	      return {
	        status: status.value,
	        value: new Date(input.data.getTime())
	      };
	    }
	    _addCheck(check) {
	      return new ZodDate({
	        ...this._def,
	        checks: [...this._def.checks, check]
	      });
	    }
	    min(minDate, message) {
	      return this._addCheck({
	        kind: "min",
	        value: minDate.getTime(),
	        message: errorUtil_1.errorUtil.toString(message)
	      });
	    }
	    max(maxDate, message) {
	      return this._addCheck({
	        kind: "max",
	        value: maxDate.getTime(),
	        message: errorUtil_1.errorUtil.toString(message)
	      });
	    }
	    get minDate() {
	      let min = null;
	      for (const ch of this._def.checks) {
	        if (ch.kind === "min") {
	          if (min === null || ch.value > min) min = ch.value;
	        }
	      }
	      return min != null ? new Date(min) : null;
	    }
	    get maxDate() {
	      let max = null;
	      for (const ch of this._def.checks) {
	        if (ch.kind === "max") {
	          if (max === null || ch.value < max) max = ch.value;
	        }
	      }
	      return max != null ? new Date(max) : null;
	    }
	  }
	  exports.ZodDate = ZodDate;
	  ZodDate.create = params => {
	    return new ZodDate({
	      checks: [],
	      coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
	      typeName: ZodFirstPartyTypeKind.ZodDate,
	      ...processCreateParams(params)
	    });
	  };
	  class ZodSymbol extends ZodType {
	    _parse(input) {
	      const parsedType = this._getType(input);
	      if (parsedType !== util_1.ZodParsedType.symbol) {
	        const ctx = this._getOrReturnCtx(input);
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          code: ZodError_1.ZodIssueCode.invalid_type,
	          expected: util_1.ZodParsedType.symbol,
	          received: ctx.parsedType
	        });
	        return parseUtil_1.INVALID;
	      }
	      return (0, parseUtil_1.OK)(input.data);
	    }
	  }
	  exports.ZodSymbol = ZodSymbol;
	  ZodSymbol.create = params => {
	    return new ZodSymbol({
	      typeName: ZodFirstPartyTypeKind.ZodSymbol,
	      ...processCreateParams(params)
	    });
	  };
	  class ZodUndefined extends ZodType {
	    _parse(input) {
	      const parsedType = this._getType(input);
	      if (parsedType !== util_1.ZodParsedType.undefined) {
	        const ctx = this._getOrReturnCtx(input);
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          code: ZodError_1.ZodIssueCode.invalid_type,
	          expected: util_1.ZodParsedType.undefined,
	          received: ctx.parsedType
	        });
	        return parseUtil_1.INVALID;
	      }
	      return (0, parseUtil_1.OK)(input.data);
	    }
	  }
	  exports.ZodUndefined = ZodUndefined;
	  ZodUndefined.create = params => {
	    return new ZodUndefined({
	      typeName: ZodFirstPartyTypeKind.ZodUndefined,
	      ...processCreateParams(params)
	    });
	  };
	  class ZodNull extends ZodType {
	    _parse(input) {
	      const parsedType = this._getType(input);
	      if (parsedType !== util_1.ZodParsedType.null) {
	        const ctx = this._getOrReturnCtx(input);
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          code: ZodError_1.ZodIssueCode.invalid_type,
	          expected: util_1.ZodParsedType.null,
	          received: ctx.parsedType
	        });
	        return parseUtil_1.INVALID;
	      }
	      return (0, parseUtil_1.OK)(input.data);
	    }
	  }
	  exports.ZodNull = ZodNull;
	  ZodNull.create = params => {
	    return new ZodNull({
	      typeName: ZodFirstPartyTypeKind.ZodNull,
	      ...processCreateParams(params)
	    });
	  };
	  class ZodAny extends ZodType {
	    constructor() {
	      super(...arguments);
	      // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.
	      this._any = true;
	    }
	    _parse(input) {
	      return (0, parseUtil_1.OK)(input.data);
	    }
	  }
	  exports.ZodAny = ZodAny;
	  ZodAny.create = params => {
	    return new ZodAny({
	      typeName: ZodFirstPartyTypeKind.ZodAny,
	      ...processCreateParams(params)
	    });
	  };
	  class ZodUnknown extends ZodType {
	    constructor() {
	      super(...arguments);
	      // required
	      this._unknown = true;
	    }
	    _parse(input) {
	      return (0, parseUtil_1.OK)(input.data);
	    }
	  }
	  exports.ZodUnknown = ZodUnknown;
	  ZodUnknown.create = params => {
	    return new ZodUnknown({
	      typeName: ZodFirstPartyTypeKind.ZodUnknown,
	      ...processCreateParams(params)
	    });
	  };
	  class ZodNever extends ZodType {
	    _parse(input) {
	      const ctx = this._getOrReturnCtx(input);
	      (0, parseUtil_1.addIssueToContext)(ctx, {
	        code: ZodError_1.ZodIssueCode.invalid_type,
	        expected: util_1.ZodParsedType.never,
	        received: ctx.parsedType
	      });
	      return parseUtil_1.INVALID;
	    }
	  }
	  exports.ZodNever = ZodNever;
	  ZodNever.create = params => {
	    return new ZodNever({
	      typeName: ZodFirstPartyTypeKind.ZodNever,
	      ...processCreateParams(params)
	    });
	  };
	  class ZodVoid extends ZodType {
	    _parse(input) {
	      const parsedType = this._getType(input);
	      if (parsedType !== util_1.ZodParsedType.undefined) {
	        const ctx = this._getOrReturnCtx(input);
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          code: ZodError_1.ZodIssueCode.invalid_type,
	          expected: util_1.ZodParsedType.void,
	          received: ctx.parsedType
	        });
	        return parseUtil_1.INVALID;
	      }
	      return (0, parseUtil_1.OK)(input.data);
	    }
	  }
	  exports.ZodVoid = ZodVoid;
	  ZodVoid.create = params => {
	    return new ZodVoid({
	      typeName: ZodFirstPartyTypeKind.ZodVoid,
	      ...processCreateParams(params)
	    });
	  };
	  class ZodArray extends ZodType {
	    _parse(input) {
	      const {
	        ctx,
	        status
	      } = this._processInputParams(input);
	      const def = this._def;
	      if (ctx.parsedType !== util_1.ZodParsedType.array) {
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          code: ZodError_1.ZodIssueCode.invalid_type,
	          expected: util_1.ZodParsedType.array,
	          received: ctx.parsedType
	        });
	        return parseUtil_1.INVALID;
	      }
	      if (def.exactLength !== null) {
	        const tooBig = ctx.data.length > def.exactLength.value;
	        const tooSmall = ctx.data.length < def.exactLength.value;
	        if (tooBig || tooSmall) {
	          (0, parseUtil_1.addIssueToContext)(ctx, {
	            code: tooBig ? ZodError_1.ZodIssueCode.too_big : ZodError_1.ZodIssueCode.too_small,
	            minimum: tooSmall ? def.exactLength.value : undefined,
	            maximum: tooBig ? def.exactLength.value : undefined,
	            type: "array",
	            inclusive: true,
	            exact: true,
	            message: def.exactLength.message
	          });
	          status.dirty();
	        }
	      }
	      if (def.minLength !== null) {
	        if (ctx.data.length < def.minLength.value) {
	          (0, parseUtil_1.addIssueToContext)(ctx, {
	            code: ZodError_1.ZodIssueCode.too_small,
	            minimum: def.minLength.value,
	            type: "array",
	            inclusive: true,
	            exact: false,
	            message: def.minLength.message
	          });
	          status.dirty();
	        }
	      }
	      if (def.maxLength !== null) {
	        if (ctx.data.length > def.maxLength.value) {
	          (0, parseUtil_1.addIssueToContext)(ctx, {
	            code: ZodError_1.ZodIssueCode.too_big,
	            maximum: def.maxLength.value,
	            type: "array",
	            inclusive: true,
	            exact: false,
	            message: def.maxLength.message
	          });
	          status.dirty();
	        }
	      }
	      if (ctx.common.async) {
	        return Promise.all([...ctx.data].map((item, i) => {
	          return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
	        })).then(result => {
	          return parseUtil_1.ParseStatus.mergeArray(status, result);
	        });
	      }
	      const result = [...ctx.data].map((item, i) => {
	        return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
	      });
	      return parseUtil_1.ParseStatus.mergeArray(status, result);
	    }
	    get element() {
	      return this._def.type;
	    }
	    min(minLength, message) {
	      return new ZodArray({
	        ...this._def,
	        minLength: {
	          value: minLength,
	          message: errorUtil_1.errorUtil.toString(message)
	        }
	      });
	    }
	    max(maxLength, message) {
	      return new ZodArray({
	        ...this._def,
	        maxLength: {
	          value: maxLength,
	          message: errorUtil_1.errorUtil.toString(message)
	        }
	      });
	    }
	    length(len, message) {
	      return new ZodArray({
	        ...this._def,
	        exactLength: {
	          value: len,
	          message: errorUtil_1.errorUtil.toString(message)
	        }
	      });
	    }
	    nonempty(message) {
	      return this.min(1, message);
	    }
	  }
	  exports.ZodArray = ZodArray;
	  ZodArray.create = (schema, params) => {
	    return new ZodArray({
	      type: schema,
	      minLength: null,
	      maxLength: null,
	      exactLength: null,
	      typeName: ZodFirstPartyTypeKind.ZodArray,
	      ...processCreateParams(params)
	    });
	  };
	  function deepPartialify(schema) {
	    if (schema instanceof ZodObject) {
	      const newShape = {};
	      for (const key in schema.shape) {
	        const fieldSchema = schema.shape[key];
	        newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
	      }
	      return new ZodObject({
	        ...schema._def,
	        shape: () => newShape
	      });
	    } else if (schema instanceof ZodArray) {
	      return new ZodArray({
	        ...schema._def,
	        type: deepPartialify(schema.element)
	      });
	    } else if (schema instanceof ZodOptional) {
	      return ZodOptional.create(deepPartialify(schema.unwrap()));
	    } else if (schema instanceof ZodNullable) {
	      return ZodNullable.create(deepPartialify(schema.unwrap()));
	    } else if (schema instanceof ZodTuple) {
	      return ZodTuple.create(schema.items.map(item => deepPartialify(item)));
	    } else {
	      return schema;
	    }
	  }
	  class ZodObject extends ZodType {
	    constructor() {
	      super(...arguments);
	      this._cached = null;
	      /**
	       * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.
	       * If you want to pass through unknown properties, use `.passthrough()` instead.
	       */
	      this.nonstrict = this.passthrough;
	      // extend<
	      //   Augmentation extends ZodRawShape,
	      //   NewOutput extends util.flatten<{
	      //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
	      //       ? Augmentation[k]["_output"]
	      //       : k extends keyof Output
	      //       ? Output[k]
	      //       : never;
	      //   }>,
	      //   NewInput extends util.flatten<{
	      //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
	      //       ? Augmentation[k]["_input"]
	      //       : k extends keyof Input
	      //       ? Input[k]
	      //       : never;
	      //   }>
	      // >(
	      //   augmentation: Augmentation
	      // ): ZodObject<
	      //   extendShape<T, Augmentation>,
	      //   UnknownKeys,
	      //   Catchall,
	      //   NewOutput,
	      //   NewInput
	      // > {
	      //   return new ZodObject({
	      //     ...this._def,
	      //     shape: () => ({
	      //       ...this._def.shape(),
	      //       ...augmentation,
	      //     }),
	      //   }) as any;
	      // }
	      /**
	       * @deprecated Use `.extend` instead
	       *  */
	      this.augment = this.extend;
	    }
	    _getCached() {
	      if (this._cached !== null) return this._cached;
	      const shape = this._def.shape();
	      const keys = util_1.util.objectKeys(shape);
	      return this._cached = {
	        shape,
	        keys
	      };
	    }
	    _parse(input) {
	      const parsedType = this._getType(input);
	      if (parsedType !== util_1.ZodParsedType.object) {
	        const ctx = this._getOrReturnCtx(input);
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          code: ZodError_1.ZodIssueCode.invalid_type,
	          expected: util_1.ZodParsedType.object,
	          received: ctx.parsedType
	        });
	        return parseUtil_1.INVALID;
	      }
	      const {
	        status,
	        ctx
	      } = this._processInputParams(input);
	      const {
	        shape,
	        keys: shapeKeys
	      } = this._getCached();
	      const extraKeys = [];
	      if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
	        for (const key in ctx.data) {
	          if (!shapeKeys.includes(key)) {
	            extraKeys.push(key);
	          }
	        }
	      }
	      const pairs = [];
	      for (const key of shapeKeys) {
	        const keyValidator = shape[key];
	        const value = ctx.data[key];
	        pairs.push({
	          key: {
	            status: "valid",
	            value: key
	          },
	          value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
	          alwaysSet: key in ctx.data
	        });
	      }
	      if (this._def.catchall instanceof ZodNever) {
	        const unknownKeys = this._def.unknownKeys;
	        if (unknownKeys === "passthrough") {
	          for (const key of extraKeys) {
	            pairs.push({
	              key: {
	                status: "valid",
	                value: key
	              },
	              value: {
	                status: "valid",
	                value: ctx.data[key]
	              }
	            });
	          }
	        } else if (unknownKeys === "strict") {
	          if (extraKeys.length > 0) {
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	              code: ZodError_1.ZodIssueCode.unrecognized_keys,
	              keys: extraKeys
	            });
	            status.dirty();
	          }
	        } else if (unknownKeys === "strip") ; else {
	          throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
	        }
	      } else {
	        // run catchall validation
	        const catchall = this._def.catchall;
	        for (const key of extraKeys) {
	          const value = ctx.data[key];
	          pairs.push({
	            key: {
	              status: "valid",
	              value: key
	            },
	            value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)
	            ),
	            alwaysSet: key in ctx.data
	          });
	        }
	      }
	      if (ctx.common.async) {
	        return Promise.resolve().then(async () => {
	          const syncPairs = [];
	          for (const pair of pairs) {
	            const key = await pair.key;
	            const value = await pair.value;
	            syncPairs.push({
	              key,
	              value,
	              alwaysSet: pair.alwaysSet
	            });
	          }
	          return syncPairs;
	        }).then(syncPairs => {
	          return parseUtil_1.ParseStatus.mergeObjectSync(status, syncPairs);
	        });
	      } else {
	        return parseUtil_1.ParseStatus.mergeObjectSync(status, pairs);
	      }
	    }
	    get shape() {
	      return this._def.shape();
	    }
	    strict(message) {
	      errorUtil_1.errorUtil.errToObj;
	      return new ZodObject({
	        ...this._def,
	        unknownKeys: "strict",
	        ...(message !== undefined ? {
	          errorMap: (issue, ctx) => {
	            var _a, _b, _c, _d;
	            const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
	            if (issue.code === "unrecognized_keys") return {
	              message: (_d = errorUtil_1.errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
	            };
	            return {
	              message: defaultError
	            };
	          }
	        } : {})
	      });
	    }
	    strip() {
	      return new ZodObject({
	        ...this._def,
	        unknownKeys: "strip"
	      });
	    }
	    passthrough() {
	      return new ZodObject({
	        ...this._def,
	        unknownKeys: "passthrough"
	      });
	    }
	    // const AugmentFactory =
	    //   <Def extends ZodObjectDef>(def: Def) =>
	    //   <Augmentation extends ZodRawShape>(
	    //     augmentation: Augmentation
	    //   ): ZodObject<
	    //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
	    //     Def["unknownKeys"],
	    //     Def["catchall"]
	    //   > => {
	    //     return new ZodObject({
	    //       ...def,
	    //       shape: () => ({
	    //         ...def.shape(),
	    //         ...augmentation,
	    //       }),
	    //     }) as any;
	    //   };
	    extend(augmentation) {
	      return new ZodObject({
	        ...this._def,
	        shape: () => ({
	          ...this._def.shape(),
	          ...augmentation
	        })
	      });
	    }
	    /**
	     * Prior to zod@1.0.12 there was a bug in the
	     * inferred type of merged objects. Please
	     * upgrade if you are experiencing issues.
	     */
	    merge(merging) {
	      const merged = new ZodObject({
	        unknownKeys: merging._def.unknownKeys,
	        catchall: merging._def.catchall,
	        shape: () => ({
	          ...this._def.shape(),
	          ...merging._def.shape()
	        }),
	        typeName: ZodFirstPartyTypeKind.ZodObject
	      });
	      return merged;
	    }
	    // merge<
	    //   Incoming extends AnyZodObject,
	    //   Augmentation extends Incoming["shape"],
	    //   NewOutput extends {
	    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
	    //       ? Augmentation[k]["_output"]
	    //       : k extends keyof Output
	    //       ? Output[k]
	    //       : never;
	    //   },
	    //   NewInput extends {
	    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
	    //       ? Augmentation[k]["_input"]
	    //       : k extends keyof Input
	    //       ? Input[k]
	    //       : never;
	    //   }
	    // >(
	    //   merging: Incoming
	    // ): ZodObject<
	    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
	    //   Incoming["_def"]["unknownKeys"],
	    //   Incoming["_def"]["catchall"],
	    //   NewOutput,
	    //   NewInput
	    // > {
	    //   const merged: any = new ZodObject({
	    //     unknownKeys: merging._def.unknownKeys,
	    //     catchall: merging._def.catchall,
	    //     shape: () =>
	    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
	    //     typeName: ZodFirstPartyTypeKind.ZodObject,
	    //   }) as any;
	    //   return merged;
	    // }
	    setKey(key, schema) {
	      return this.augment({
	        [key]: schema
	      });
	    }
	    // merge<Incoming extends AnyZodObject>(
	    //   merging: Incoming
	    // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
	    // ZodObject<
	    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
	    //   Incoming["_def"]["unknownKeys"],
	    //   Incoming["_def"]["catchall"]
	    // > {
	    //   // const mergedShape = objectUtil.mergeShapes(
	    //   //   this._def.shape(),
	    //   //   merging._def.shape()
	    //   // );
	    //   const merged: any = new ZodObject({
	    //     unknownKeys: merging._def.unknownKeys,
	    //     catchall: merging._def.catchall,
	    //     shape: () =>
	    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
	    //     typeName: ZodFirstPartyTypeKind.ZodObject,
	    //   }) as any;
	    //   return merged;
	    // }
	    catchall(index) {
	      return new ZodObject({
	        ...this._def,
	        catchall: index
	      });
	    }
	    pick(mask) {
	      const shape = {};
	      util_1.util.objectKeys(mask).forEach(key => {
	        if (mask[key] && this.shape[key]) {
	          shape[key] = this.shape[key];
	        }
	      });
	      return new ZodObject({
	        ...this._def,
	        shape: () => shape
	      });
	    }
	    omit(mask) {
	      const shape = {};
	      util_1.util.objectKeys(this.shape).forEach(key => {
	        if (!mask[key]) {
	          shape[key] = this.shape[key];
	        }
	      });
	      return new ZodObject({
	        ...this._def,
	        shape: () => shape
	      });
	    }
	    /**
	     * @deprecated
	     */
	    deepPartial() {
	      return deepPartialify(this);
	    }
	    partial(mask) {
	      const newShape = {};
	      util_1.util.objectKeys(this.shape).forEach(key => {
	        const fieldSchema = this.shape[key];
	        if (mask && !mask[key]) {
	          newShape[key] = fieldSchema;
	        } else {
	          newShape[key] = fieldSchema.optional();
	        }
	      });
	      return new ZodObject({
	        ...this._def,
	        shape: () => newShape
	      });
	    }
	    required(mask) {
	      const newShape = {};
	      util_1.util.objectKeys(this.shape).forEach(key => {
	        if (mask && !mask[key]) {
	          newShape[key] = this.shape[key];
	        } else {
	          const fieldSchema = this.shape[key];
	          let newField = fieldSchema;
	          while (newField instanceof ZodOptional) {
	            newField = newField._def.innerType;
	          }
	          newShape[key] = newField;
	        }
	      });
	      return new ZodObject({
	        ...this._def,
	        shape: () => newShape
	      });
	    }
	    keyof() {
	      return createZodEnum(util_1.util.objectKeys(this.shape));
	    }
	  }
	  exports.ZodObject = ZodObject;
	  ZodObject.create = (shape, params) => {
	    return new ZodObject({
	      shape: () => shape,
	      unknownKeys: "strip",
	      catchall: ZodNever.create(),
	      typeName: ZodFirstPartyTypeKind.ZodObject,
	      ...processCreateParams(params)
	    });
	  };
	  ZodObject.strictCreate = (shape, params) => {
	    return new ZodObject({
	      shape: () => shape,
	      unknownKeys: "strict",
	      catchall: ZodNever.create(),
	      typeName: ZodFirstPartyTypeKind.ZodObject,
	      ...processCreateParams(params)
	    });
	  };
	  ZodObject.lazycreate = (shape, params) => {
	    return new ZodObject({
	      shape,
	      unknownKeys: "strip",
	      catchall: ZodNever.create(),
	      typeName: ZodFirstPartyTypeKind.ZodObject,
	      ...processCreateParams(params)
	    });
	  };
	  class ZodUnion extends ZodType {
	    _parse(input) {
	      const {
	        ctx
	      } = this._processInputParams(input);
	      const options = this._def.options;
	      function handleResults(results) {
	        // return first issue-free validation if it exists
	        for (const result of results) {
	          if (result.result.status === "valid") {
	            return result.result;
	          }
	        }
	        for (const result of results) {
	          if (result.result.status === "dirty") {
	            // add issues from dirty option
	            ctx.common.issues.push(...result.ctx.common.issues);
	            return result.result;
	          }
	        }
	        // return invalid
	        const unionErrors = results.map(result => new ZodError_1.ZodError(result.ctx.common.issues));
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          code: ZodError_1.ZodIssueCode.invalid_union,
	          unionErrors
	        });
	        return parseUtil_1.INVALID;
	      }
	      if (ctx.common.async) {
	        return Promise.all(options.map(async option => {
	          const childCtx = {
	            ...ctx,
	            common: {
	              ...ctx.common,
	              issues: []
	            },
	            parent: null
	          };
	          return {
	            result: await option._parseAsync({
	              data: ctx.data,
	              path: ctx.path,
	              parent: childCtx
	            }),
	            ctx: childCtx
	          };
	        })).then(handleResults);
	      } else {
	        let dirty = undefined;
	        const issues = [];
	        for (const option of options) {
	          const childCtx = {
	            ...ctx,
	            common: {
	              ...ctx.common,
	              issues: []
	            },
	            parent: null
	          };
	          const result = option._parseSync({
	            data: ctx.data,
	            path: ctx.path,
	            parent: childCtx
	          });
	          if (result.status === "valid") {
	            return result;
	          } else if (result.status === "dirty" && !dirty) {
	            dirty = {
	              result,
	              ctx: childCtx
	            };
	          }
	          if (childCtx.common.issues.length) {
	            issues.push(childCtx.common.issues);
	          }
	        }
	        if (dirty) {
	          ctx.common.issues.push(...dirty.ctx.common.issues);
	          return dirty.result;
	        }
	        const unionErrors = issues.map(issues => new ZodError_1.ZodError(issues));
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          code: ZodError_1.ZodIssueCode.invalid_union,
	          unionErrors
	        });
	        return parseUtil_1.INVALID;
	      }
	    }
	    get options() {
	      return this._def.options;
	    }
	  }
	  exports.ZodUnion = ZodUnion;
	  ZodUnion.create = (types, params) => {
	    return new ZodUnion({
	      options: types,
	      typeName: ZodFirstPartyTypeKind.ZodUnion,
	      ...processCreateParams(params)
	    });
	  };
	  /////////////////////////////////////////////////////
	  /////////////////////////////////////////////////////
	  //////////                                 //////////
	  //////////      ZodDiscriminatedUnion      //////////
	  //////////                                 //////////
	  /////////////////////////////////////////////////////
	  /////////////////////////////////////////////////////
	  const getDiscriminator = type => {
	    if (type instanceof ZodLazy) {
	      return getDiscriminator(type.schema);
	    } else if (type instanceof ZodEffects) {
	      return getDiscriminator(type.innerType());
	    } else if (type instanceof ZodLiteral) {
	      return [type.value];
	    } else if (type instanceof ZodEnum) {
	      return type.options;
	    } else if (type instanceof ZodNativeEnum) {
	      // eslint-disable-next-line ban/ban
	      return util_1.util.objectValues(type.enum);
	    } else if (type instanceof ZodDefault) {
	      return getDiscriminator(type._def.innerType);
	    } else if (type instanceof ZodUndefined) {
	      return [undefined];
	    } else if (type instanceof ZodNull) {
	      return [null];
	    } else if (type instanceof ZodOptional) {
	      return [undefined, ...getDiscriminator(type.unwrap())];
	    } else if (type instanceof ZodNullable) {
	      return [null, ...getDiscriminator(type.unwrap())];
	    } else if (type instanceof ZodBranded) {
	      return getDiscriminator(type.unwrap());
	    } else if (type instanceof ZodReadonly) {
	      return getDiscriminator(type.unwrap());
	    } else if (type instanceof ZodCatch) {
	      return getDiscriminator(type._def.innerType);
	    } else {
	      return [];
	    }
	  };
	  class ZodDiscriminatedUnion extends ZodType {
	    _parse(input) {
	      const {
	        ctx
	      } = this._processInputParams(input);
	      if (ctx.parsedType !== util_1.ZodParsedType.object) {
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          code: ZodError_1.ZodIssueCode.invalid_type,
	          expected: util_1.ZodParsedType.object,
	          received: ctx.parsedType
	        });
	        return parseUtil_1.INVALID;
	      }
	      const discriminator = this.discriminator;
	      const discriminatorValue = ctx.data[discriminator];
	      const option = this.optionsMap.get(discriminatorValue);
	      if (!option) {
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          code: ZodError_1.ZodIssueCode.invalid_union_discriminator,
	          options: Array.from(this.optionsMap.keys()),
	          path: [discriminator]
	        });
	        return parseUtil_1.INVALID;
	      }
	      if (ctx.common.async) {
	        return option._parseAsync({
	          data: ctx.data,
	          path: ctx.path,
	          parent: ctx
	        });
	      } else {
	        return option._parseSync({
	          data: ctx.data,
	          path: ctx.path,
	          parent: ctx
	        });
	      }
	    }
	    get discriminator() {
	      return this._def.discriminator;
	    }
	    get options() {
	      return this._def.options;
	    }
	    get optionsMap() {
	      return this._def.optionsMap;
	    }
	    /**
	     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
	     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
	     * have a different value for each object in the union.
	     * @param discriminator the name of the discriminator property
	     * @param types an array of object schemas
	     * @param params
	     */
	    static create(discriminator, options, params) {
	      // Get all the valid discriminator values
	      const optionsMap = new Map();
	      // try {
	      for (const type of options) {
	        const discriminatorValues = getDiscriminator(type.shape[discriminator]);
	        if (!discriminatorValues.length) {
	          throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
	        }
	        for (const value of discriminatorValues) {
	          if (optionsMap.has(value)) {
	            throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
	          }
	          optionsMap.set(value, type);
	        }
	      }
	      return new ZodDiscriminatedUnion({
	        typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
	        discriminator,
	        options,
	        optionsMap,
	        ...processCreateParams(params)
	      });
	    }
	  }
	  exports.ZodDiscriminatedUnion = ZodDiscriminatedUnion;
	  function mergeValues(a, b) {
	    const aType = (0, util_1.getParsedType)(a);
	    const bType = (0, util_1.getParsedType)(b);
	    if (a === b) {
	      return {
	        valid: true,
	        data: a
	      };
	    } else if (aType === util_1.ZodParsedType.object && bType === util_1.ZodParsedType.object) {
	      const bKeys = util_1.util.objectKeys(b);
	      const sharedKeys = util_1.util.objectKeys(a).filter(key => bKeys.indexOf(key) !== -1);
	      const newObj = {
	        ...a,
	        ...b
	      };
	      for (const key of sharedKeys) {
	        const sharedValue = mergeValues(a[key], b[key]);
	        if (!sharedValue.valid) {
	          return {
	            valid: false
	          };
	        }
	        newObj[key] = sharedValue.data;
	      }
	      return {
	        valid: true,
	        data: newObj
	      };
	    } else if (aType === util_1.ZodParsedType.array && bType === util_1.ZodParsedType.array) {
	      if (a.length !== b.length) {
	        return {
	          valid: false
	        };
	      }
	      const newArray = [];
	      for (let index = 0; index < a.length; index++) {
	        const itemA = a[index];
	        const itemB = b[index];
	        const sharedValue = mergeValues(itemA, itemB);
	        if (!sharedValue.valid) {
	          return {
	            valid: false
	          };
	        }
	        newArray.push(sharedValue.data);
	      }
	      return {
	        valid: true,
	        data: newArray
	      };
	    } else if (aType === util_1.ZodParsedType.date && bType === util_1.ZodParsedType.date && +a === +b) {
	      return {
	        valid: true,
	        data: a
	      };
	    } else {
	      return {
	        valid: false
	      };
	    }
	  }
	  class ZodIntersection extends ZodType {
	    _parse(input) {
	      const {
	        status,
	        ctx
	      } = this._processInputParams(input);
	      const handleParsed = (parsedLeft, parsedRight) => {
	        if ((0, parseUtil_1.isAborted)(parsedLeft) || (0, parseUtil_1.isAborted)(parsedRight)) {
	          return parseUtil_1.INVALID;
	        }
	        const merged = mergeValues(parsedLeft.value, parsedRight.value);
	        if (!merged.valid) {
	          (0, parseUtil_1.addIssueToContext)(ctx, {
	            code: ZodError_1.ZodIssueCode.invalid_intersection_types
	          });
	          return parseUtil_1.INVALID;
	        }
	        if ((0, parseUtil_1.isDirty)(parsedLeft) || (0, parseUtil_1.isDirty)(parsedRight)) {
	          status.dirty();
	        }
	        return {
	          status: status.value,
	          value: merged.data
	        };
	      };
	      if (ctx.common.async) {
	        return Promise.all([this._def.left._parseAsync({
	          data: ctx.data,
	          path: ctx.path,
	          parent: ctx
	        }), this._def.right._parseAsync({
	          data: ctx.data,
	          path: ctx.path,
	          parent: ctx
	        })]).then(([left, right]) => handleParsed(left, right));
	      } else {
	        return handleParsed(this._def.left._parseSync({
	          data: ctx.data,
	          path: ctx.path,
	          parent: ctx
	        }), this._def.right._parseSync({
	          data: ctx.data,
	          path: ctx.path,
	          parent: ctx
	        }));
	      }
	    }
	  }
	  exports.ZodIntersection = ZodIntersection;
	  ZodIntersection.create = (left, right, params) => {
	    return new ZodIntersection({
	      left: left,
	      right: right,
	      typeName: ZodFirstPartyTypeKind.ZodIntersection,
	      ...processCreateParams(params)
	    });
	  };
	  class ZodTuple extends ZodType {
	    _parse(input) {
	      const {
	        status,
	        ctx
	      } = this._processInputParams(input);
	      if (ctx.parsedType !== util_1.ZodParsedType.array) {
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          code: ZodError_1.ZodIssueCode.invalid_type,
	          expected: util_1.ZodParsedType.array,
	          received: ctx.parsedType
	        });
	        return parseUtil_1.INVALID;
	      }
	      if (ctx.data.length < this._def.items.length) {
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          code: ZodError_1.ZodIssueCode.too_small,
	          minimum: this._def.items.length,
	          inclusive: true,
	          exact: false,
	          type: "array"
	        });
	        return parseUtil_1.INVALID;
	      }
	      const rest = this._def.rest;
	      if (!rest && ctx.data.length > this._def.items.length) {
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          code: ZodError_1.ZodIssueCode.too_big,
	          maximum: this._def.items.length,
	          inclusive: true,
	          exact: false,
	          type: "array"
	        });
	        status.dirty();
	      }
	      const items = [...ctx.data].map((item, itemIndex) => {
	        const schema = this._def.items[itemIndex] || this._def.rest;
	        if (!schema) return null;
	        return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
	      }).filter(x => !!x); // filter nulls
	      if (ctx.common.async) {
	        return Promise.all(items).then(results => {
	          return parseUtil_1.ParseStatus.mergeArray(status, results);
	        });
	      } else {
	        return parseUtil_1.ParseStatus.mergeArray(status, items);
	      }
	    }
	    get items() {
	      return this._def.items;
	    }
	    rest(rest) {
	      return new ZodTuple({
	        ...this._def,
	        rest
	      });
	    }
	  }
	  exports.ZodTuple = ZodTuple;
	  ZodTuple.create = (schemas, params) => {
	    if (!Array.isArray(schemas)) {
	      throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
	    }
	    return new ZodTuple({
	      items: schemas,
	      typeName: ZodFirstPartyTypeKind.ZodTuple,
	      rest: null,
	      ...processCreateParams(params)
	    });
	  };
	  class ZodRecord extends ZodType {
	    get keySchema() {
	      return this._def.keyType;
	    }
	    get valueSchema() {
	      return this._def.valueType;
	    }
	    _parse(input) {
	      const {
	        status,
	        ctx
	      } = this._processInputParams(input);
	      if (ctx.parsedType !== util_1.ZodParsedType.object) {
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          code: ZodError_1.ZodIssueCode.invalid_type,
	          expected: util_1.ZodParsedType.object,
	          received: ctx.parsedType
	        });
	        return parseUtil_1.INVALID;
	      }
	      const pairs = [];
	      const keyType = this._def.keyType;
	      const valueType = this._def.valueType;
	      for (const key in ctx.data) {
	        pairs.push({
	          key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
	          value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
	          alwaysSet: key in ctx.data
	        });
	      }
	      if (ctx.common.async) {
	        return parseUtil_1.ParseStatus.mergeObjectAsync(status, pairs);
	      } else {
	        return parseUtil_1.ParseStatus.mergeObjectSync(status, pairs);
	      }
	    }
	    get element() {
	      return this._def.valueType;
	    }
	    static create(first, second, third) {
	      if (second instanceof ZodType) {
	        return new ZodRecord({
	          keyType: first,
	          valueType: second,
	          typeName: ZodFirstPartyTypeKind.ZodRecord,
	          ...processCreateParams(third)
	        });
	      }
	      return new ZodRecord({
	        keyType: ZodString.create(),
	        valueType: first,
	        typeName: ZodFirstPartyTypeKind.ZodRecord,
	        ...processCreateParams(second)
	      });
	    }
	  }
	  exports.ZodRecord = ZodRecord;
	  class ZodMap extends ZodType {
	    get keySchema() {
	      return this._def.keyType;
	    }
	    get valueSchema() {
	      return this._def.valueType;
	    }
	    _parse(input) {
	      const {
	        status,
	        ctx
	      } = this._processInputParams(input);
	      if (ctx.parsedType !== util_1.ZodParsedType.map) {
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          code: ZodError_1.ZodIssueCode.invalid_type,
	          expected: util_1.ZodParsedType.map,
	          received: ctx.parsedType
	        });
	        return parseUtil_1.INVALID;
	      }
	      const keyType = this._def.keyType;
	      const valueType = this._def.valueType;
	      const pairs = [...ctx.data.entries()].map(([key, value], index) => {
	        return {
	          key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
	          value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
	        };
	      });
	      if (ctx.common.async) {
	        const finalMap = new Map();
	        return Promise.resolve().then(async () => {
	          for (const pair of pairs) {
	            const key = await pair.key;
	            const value = await pair.value;
	            if (key.status === "aborted" || value.status === "aborted") {
	              return parseUtil_1.INVALID;
	            }
	            if (key.status === "dirty" || value.status === "dirty") {
	              status.dirty();
	            }
	            finalMap.set(key.value, value.value);
	          }
	          return {
	            status: status.value,
	            value: finalMap
	          };
	        });
	      } else {
	        const finalMap = new Map();
	        for (const pair of pairs) {
	          const key = pair.key;
	          const value = pair.value;
	          if (key.status === "aborted" || value.status === "aborted") {
	            return parseUtil_1.INVALID;
	          }
	          if (key.status === "dirty" || value.status === "dirty") {
	            status.dirty();
	          }
	          finalMap.set(key.value, value.value);
	        }
	        return {
	          status: status.value,
	          value: finalMap
	        };
	      }
	    }
	  }
	  exports.ZodMap = ZodMap;
	  ZodMap.create = (keyType, valueType, params) => {
	    return new ZodMap({
	      valueType,
	      keyType,
	      typeName: ZodFirstPartyTypeKind.ZodMap,
	      ...processCreateParams(params)
	    });
	  };
	  class ZodSet extends ZodType {
	    _parse(input) {
	      const {
	        status,
	        ctx
	      } = this._processInputParams(input);
	      if (ctx.parsedType !== util_1.ZodParsedType.set) {
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          code: ZodError_1.ZodIssueCode.invalid_type,
	          expected: util_1.ZodParsedType.set,
	          received: ctx.parsedType
	        });
	        return parseUtil_1.INVALID;
	      }
	      const def = this._def;
	      if (def.minSize !== null) {
	        if (ctx.data.size < def.minSize.value) {
	          (0, parseUtil_1.addIssueToContext)(ctx, {
	            code: ZodError_1.ZodIssueCode.too_small,
	            minimum: def.minSize.value,
	            type: "set",
	            inclusive: true,
	            exact: false,
	            message: def.minSize.message
	          });
	          status.dirty();
	        }
	      }
	      if (def.maxSize !== null) {
	        if (ctx.data.size > def.maxSize.value) {
	          (0, parseUtil_1.addIssueToContext)(ctx, {
	            code: ZodError_1.ZodIssueCode.too_big,
	            maximum: def.maxSize.value,
	            type: "set",
	            inclusive: true,
	            exact: false,
	            message: def.maxSize.message
	          });
	          status.dirty();
	        }
	      }
	      const valueType = this._def.valueType;
	      function finalizeSet(elements) {
	        const parsedSet = new Set();
	        for (const element of elements) {
	          if (element.status === "aborted") return parseUtil_1.INVALID;
	          if (element.status === "dirty") status.dirty();
	          parsedSet.add(element.value);
	        }
	        return {
	          status: status.value,
	          value: parsedSet
	        };
	      }
	      const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
	      if (ctx.common.async) {
	        return Promise.all(elements).then(elements => finalizeSet(elements));
	      } else {
	        return finalizeSet(elements);
	      }
	    }
	    min(minSize, message) {
	      return new ZodSet({
	        ...this._def,
	        minSize: {
	          value: minSize,
	          message: errorUtil_1.errorUtil.toString(message)
	        }
	      });
	    }
	    max(maxSize, message) {
	      return new ZodSet({
	        ...this._def,
	        maxSize: {
	          value: maxSize,
	          message: errorUtil_1.errorUtil.toString(message)
	        }
	      });
	    }
	    size(size, message) {
	      return this.min(size, message).max(size, message);
	    }
	    nonempty(message) {
	      return this.min(1, message);
	    }
	  }
	  exports.ZodSet = ZodSet;
	  ZodSet.create = (valueType, params) => {
	    return new ZodSet({
	      valueType,
	      minSize: null,
	      maxSize: null,
	      typeName: ZodFirstPartyTypeKind.ZodSet,
	      ...processCreateParams(params)
	    });
	  };
	  class ZodFunction extends ZodType {
	    constructor() {
	      super(...arguments);
	      this.validate = this.implement;
	    }
	    _parse(input) {
	      const {
	        ctx
	      } = this._processInputParams(input);
	      if (ctx.parsedType !== util_1.ZodParsedType.function) {
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          code: ZodError_1.ZodIssueCode.invalid_type,
	          expected: util_1.ZodParsedType.function,
	          received: ctx.parsedType
	        });
	        return parseUtil_1.INVALID;
	      }
	      function makeArgsIssue(args, error) {
	        return (0, parseUtil_1.makeIssue)({
	          data: args,
	          path: ctx.path,
	          errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, (0, errors_1.getErrorMap)(), errors_1.defaultErrorMap].filter(x => !!x),
	          issueData: {
	            code: ZodError_1.ZodIssueCode.invalid_arguments,
	            argumentsError: error
	          }
	        });
	      }
	      function makeReturnsIssue(returns, error) {
	        return (0, parseUtil_1.makeIssue)({
	          data: returns,
	          path: ctx.path,
	          errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, (0, errors_1.getErrorMap)(), errors_1.defaultErrorMap].filter(x => !!x),
	          issueData: {
	            code: ZodError_1.ZodIssueCode.invalid_return_type,
	            returnTypeError: error
	          }
	        });
	      }
	      const params = {
	        errorMap: ctx.common.contextualErrorMap
	      };
	      const fn = ctx.data;
	      if (this._def.returns instanceof ZodPromise) {
	        // Would love a way to avoid disabling this rule, but we need
	        // an alias (using an arrow function was what caused 2651).
	        // eslint-disable-next-line @typescript-eslint/no-this-alias
	        const me = this;
	        return (0, parseUtil_1.OK)(async function (...args) {
	          const error = new ZodError_1.ZodError([]);
	          const parsedArgs = await me._def.args.parseAsync(args, params).catch(e => {
	            error.addIssue(makeArgsIssue(args, e));
	            throw error;
	          });
	          const result = await Reflect.apply(fn, this, parsedArgs);
	          const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch(e => {
	            error.addIssue(makeReturnsIssue(result, e));
	            throw error;
	          });
	          return parsedReturns;
	        });
	      } else {
	        // Would love a way to avoid disabling this rule, but we need
	        // an alias (using an arrow function was what caused 2651).
	        // eslint-disable-next-line @typescript-eslint/no-this-alias
	        const me = this;
	        return (0, parseUtil_1.OK)(function (...args) {
	          const parsedArgs = me._def.args.safeParse(args, params);
	          if (!parsedArgs.success) {
	            throw new ZodError_1.ZodError([makeArgsIssue(args, parsedArgs.error)]);
	          }
	          const result = Reflect.apply(fn, this, parsedArgs.data);
	          const parsedReturns = me._def.returns.safeParse(result, params);
	          if (!parsedReturns.success) {
	            throw new ZodError_1.ZodError([makeReturnsIssue(result, parsedReturns.error)]);
	          }
	          return parsedReturns.data;
	        });
	      }
	    }
	    parameters() {
	      return this._def.args;
	    }
	    returnType() {
	      return this._def.returns;
	    }
	    args(...items) {
	      return new ZodFunction({
	        ...this._def,
	        args: ZodTuple.create(items).rest(ZodUnknown.create())
	      });
	    }
	    returns(returnType) {
	      return new ZodFunction({
	        ...this._def,
	        returns: returnType
	      });
	    }
	    implement(func) {
	      const validatedFunc = this.parse(func);
	      return validatedFunc;
	    }
	    strictImplement(func) {
	      const validatedFunc = this.parse(func);
	      return validatedFunc;
	    }
	    static create(args, returns, params) {
	      return new ZodFunction({
	        args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
	        returns: returns || ZodUnknown.create(),
	        typeName: ZodFirstPartyTypeKind.ZodFunction,
	        ...processCreateParams(params)
	      });
	    }
	  }
	  exports.ZodFunction = ZodFunction;
	  class ZodLazy extends ZodType {
	    get schema() {
	      return this._def.getter();
	    }
	    _parse(input) {
	      const {
	        ctx
	      } = this._processInputParams(input);
	      const lazySchema = this._def.getter();
	      return lazySchema._parse({
	        data: ctx.data,
	        path: ctx.path,
	        parent: ctx
	      });
	    }
	  }
	  exports.ZodLazy = ZodLazy;
	  ZodLazy.create = (getter, params) => {
	    return new ZodLazy({
	      getter: getter,
	      typeName: ZodFirstPartyTypeKind.ZodLazy,
	      ...processCreateParams(params)
	    });
	  };
	  class ZodLiteral extends ZodType {
	    _parse(input) {
	      if (input.data !== this._def.value) {
	        const ctx = this._getOrReturnCtx(input);
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          received: ctx.data,
	          code: ZodError_1.ZodIssueCode.invalid_literal,
	          expected: this._def.value
	        });
	        return parseUtil_1.INVALID;
	      }
	      return {
	        status: "valid",
	        value: input.data
	      };
	    }
	    get value() {
	      return this._def.value;
	    }
	  }
	  exports.ZodLiteral = ZodLiteral;
	  ZodLiteral.create = (value, params) => {
	    return new ZodLiteral({
	      value: value,
	      typeName: ZodFirstPartyTypeKind.ZodLiteral,
	      ...processCreateParams(params)
	    });
	  };
	  function createZodEnum(values, params) {
	    return new ZodEnum({
	      values,
	      typeName: ZodFirstPartyTypeKind.ZodEnum,
	      ...processCreateParams(params)
	    });
	  }
	  class ZodEnum extends ZodType {
	    constructor() {
	      super(...arguments);
	      _ZodEnum_cache.set(this, void 0);
	    }
	    _parse(input) {
	      if (typeof input.data !== "string") {
	        const ctx = this._getOrReturnCtx(input);
	        const expectedValues = this._def.values;
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          expected: util_1.util.joinValues(expectedValues),
	          received: ctx.parsedType,
	          code: ZodError_1.ZodIssueCode.invalid_type
	        });
	        return parseUtil_1.INVALID;
	      }
	      if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f")) {
	        __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), "f");
	      }
	      if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f").has(input.data)) {
	        const ctx = this._getOrReturnCtx(input);
	        const expectedValues = this._def.values;
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          received: ctx.data,
	          code: ZodError_1.ZodIssueCode.invalid_enum_value,
	          options: expectedValues
	        });
	        return parseUtil_1.INVALID;
	      }
	      return (0, parseUtil_1.OK)(input.data);
	    }
	    get options() {
	      return this._def.values;
	    }
	    get enum() {
	      const enumValues = {};
	      for (const val of this._def.values) {
	        enumValues[val] = val;
	      }
	      return enumValues;
	    }
	    get Values() {
	      const enumValues = {};
	      for (const val of this._def.values) {
	        enumValues[val] = val;
	      }
	      return enumValues;
	    }
	    get Enum() {
	      const enumValues = {};
	      for (const val of this._def.values) {
	        enumValues[val] = val;
	      }
	      return enumValues;
	    }
	    extract(values, newDef = this._def) {
	      return ZodEnum.create(values, {
	        ...this._def,
	        ...newDef
	      });
	    }
	    exclude(values, newDef = this._def) {
	      return ZodEnum.create(this.options.filter(opt => !values.includes(opt)), {
	        ...this._def,
	        ...newDef
	      });
	    }
	  }
	  exports.ZodEnum = ZodEnum;
	  _ZodEnum_cache = new WeakMap();
	  ZodEnum.create = createZodEnum;
	  class ZodNativeEnum extends ZodType {
	    constructor() {
	      super(...arguments);
	      _ZodNativeEnum_cache.set(this, void 0);
	    }
	    _parse(input) {
	      const nativeEnumValues = util_1.util.getValidEnumValues(this._def.values);
	      const ctx = this._getOrReturnCtx(input);
	      if (ctx.parsedType !== util_1.ZodParsedType.string && ctx.parsedType !== util_1.ZodParsedType.number) {
	        const expectedValues = util_1.util.objectValues(nativeEnumValues);
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          expected: util_1.util.joinValues(expectedValues),
	          received: ctx.parsedType,
	          code: ZodError_1.ZodIssueCode.invalid_type
	        });
	        return parseUtil_1.INVALID;
	      }
	      if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f")) {
	        __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util_1.util.getValidEnumValues(this._def.values)), "f");
	      }
	      if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f").has(input.data)) {
	        const expectedValues = util_1.util.objectValues(nativeEnumValues);
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          received: ctx.data,
	          code: ZodError_1.ZodIssueCode.invalid_enum_value,
	          options: expectedValues
	        });
	        return parseUtil_1.INVALID;
	      }
	      return (0, parseUtil_1.OK)(input.data);
	    }
	    get enum() {
	      return this._def.values;
	    }
	  }
	  exports.ZodNativeEnum = ZodNativeEnum;
	  _ZodNativeEnum_cache = new WeakMap();
	  ZodNativeEnum.create = (values, params) => {
	    return new ZodNativeEnum({
	      values: values,
	      typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
	      ...processCreateParams(params)
	    });
	  };
	  class ZodPromise extends ZodType {
	    unwrap() {
	      return this._def.type;
	    }
	    _parse(input) {
	      const {
	        ctx
	      } = this._processInputParams(input);
	      if (ctx.parsedType !== util_1.ZodParsedType.promise && ctx.common.async === false) {
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          code: ZodError_1.ZodIssueCode.invalid_type,
	          expected: util_1.ZodParsedType.promise,
	          received: ctx.parsedType
	        });
	        return parseUtil_1.INVALID;
	      }
	      const promisified = ctx.parsedType === util_1.ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
	      return (0, parseUtil_1.OK)(promisified.then(data => {
	        return this._def.type.parseAsync(data, {
	          path: ctx.path,
	          errorMap: ctx.common.contextualErrorMap
	        });
	      }));
	    }
	  }
	  exports.ZodPromise = ZodPromise;
	  ZodPromise.create = (schema, params) => {
	    return new ZodPromise({
	      type: schema,
	      typeName: ZodFirstPartyTypeKind.ZodPromise,
	      ...processCreateParams(params)
	    });
	  };
	  class ZodEffects extends ZodType {
	    innerType() {
	      return this._def.schema;
	    }
	    sourceType() {
	      return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
	    }
	    _parse(input) {
	      const {
	        status,
	        ctx
	      } = this._processInputParams(input);
	      const effect = this._def.effect || null;
	      const checkCtx = {
	        addIssue: arg => {
	          (0, parseUtil_1.addIssueToContext)(ctx, arg);
	          if (arg.fatal) {
	            status.abort();
	          } else {
	            status.dirty();
	          }
	        },
	        get path() {
	          return ctx.path;
	        }
	      };
	      checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
	      if (effect.type === "preprocess") {
	        const processed = effect.transform(ctx.data, checkCtx);
	        if (ctx.common.async) {
	          return Promise.resolve(processed).then(async processed => {
	            if (status.value === "aborted") return parseUtil_1.INVALID;
	            const result = await this._def.schema._parseAsync({
	              data: processed,
	              path: ctx.path,
	              parent: ctx
	            });
	            if (result.status === "aborted") return parseUtil_1.INVALID;
	            if (result.status === "dirty") return (0, parseUtil_1.DIRTY)(result.value);
	            if (status.value === "dirty") return (0, parseUtil_1.DIRTY)(result.value);
	            return result;
	          });
	        } else {
	          if (status.value === "aborted") return parseUtil_1.INVALID;
	          const result = this._def.schema._parseSync({
	            data: processed,
	            path: ctx.path,
	            parent: ctx
	          });
	          if (result.status === "aborted") return parseUtil_1.INVALID;
	          if (result.status === "dirty") return (0, parseUtil_1.DIRTY)(result.value);
	          if (status.value === "dirty") return (0, parseUtil_1.DIRTY)(result.value);
	          return result;
	        }
	      }
	      if (effect.type === "refinement") {
	        const executeRefinement = acc => {
	          const result = effect.refinement(acc, checkCtx);
	          if (ctx.common.async) {
	            return Promise.resolve(result);
	          }
	          if (result instanceof Promise) {
	            throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
	          }
	          return acc;
	        };
	        if (ctx.common.async === false) {
	          const inner = this._def.schema._parseSync({
	            data: ctx.data,
	            path: ctx.path,
	            parent: ctx
	          });
	          if (inner.status === "aborted") return parseUtil_1.INVALID;
	          if (inner.status === "dirty") status.dirty();
	          // return value is ignored
	          executeRefinement(inner.value);
	          return {
	            status: status.value,
	            value: inner.value
	          };
	        } else {
	          return this._def.schema._parseAsync({
	            data: ctx.data,
	            path: ctx.path,
	            parent: ctx
	          }).then(inner => {
	            if (inner.status === "aborted") return parseUtil_1.INVALID;
	            if (inner.status === "dirty") status.dirty();
	            return executeRefinement(inner.value).then(() => {
	              return {
	                status: status.value,
	                value: inner.value
	              };
	            });
	          });
	        }
	      }
	      if (effect.type === "transform") {
	        if (ctx.common.async === false) {
	          const base = this._def.schema._parseSync({
	            data: ctx.data,
	            path: ctx.path,
	            parent: ctx
	          });
	          if (!(0, parseUtil_1.isValid)(base)) return base;
	          const result = effect.transform(base.value, checkCtx);
	          if (result instanceof Promise) {
	            throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
	          }
	          return {
	            status: status.value,
	            value: result
	          };
	        } else {
	          return this._def.schema._parseAsync({
	            data: ctx.data,
	            path: ctx.path,
	            parent: ctx
	          }).then(base => {
	            if (!(0, parseUtil_1.isValid)(base)) return base;
	            return Promise.resolve(effect.transform(base.value, checkCtx)).then(result => ({
	              status: status.value,
	              value: result
	            }));
	          });
	        }
	      }
	      util_1.util.assertNever(effect);
	    }
	  }
	  exports.ZodEffects = ZodEffects;
	  exports.ZodTransformer = ZodEffects;
	  ZodEffects.create = (schema, effect, params) => {
	    return new ZodEffects({
	      schema,
	      typeName: ZodFirstPartyTypeKind.ZodEffects,
	      effect,
	      ...processCreateParams(params)
	    });
	  };
	  ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
	    return new ZodEffects({
	      schema,
	      effect: {
	        type: "preprocess",
	        transform: preprocess
	      },
	      typeName: ZodFirstPartyTypeKind.ZodEffects,
	      ...processCreateParams(params)
	    });
	  };
	  class ZodOptional extends ZodType {
	    _parse(input) {
	      const parsedType = this._getType(input);
	      if (parsedType === util_1.ZodParsedType.undefined) {
	        return (0, parseUtil_1.OK)(undefined);
	      }
	      return this._def.innerType._parse(input);
	    }
	    unwrap() {
	      return this._def.innerType;
	    }
	  }
	  exports.ZodOptional = ZodOptional;
	  ZodOptional.create = (type, params) => {
	    return new ZodOptional({
	      innerType: type,
	      typeName: ZodFirstPartyTypeKind.ZodOptional,
	      ...processCreateParams(params)
	    });
	  };
	  class ZodNullable extends ZodType {
	    _parse(input) {
	      const parsedType = this._getType(input);
	      if (parsedType === util_1.ZodParsedType.null) {
	        return (0, parseUtil_1.OK)(null);
	      }
	      return this._def.innerType._parse(input);
	    }
	    unwrap() {
	      return this._def.innerType;
	    }
	  }
	  exports.ZodNullable = ZodNullable;
	  ZodNullable.create = (type, params) => {
	    return new ZodNullable({
	      innerType: type,
	      typeName: ZodFirstPartyTypeKind.ZodNullable,
	      ...processCreateParams(params)
	    });
	  };
	  class ZodDefault extends ZodType {
	    _parse(input) {
	      const {
	        ctx
	      } = this._processInputParams(input);
	      let data = ctx.data;
	      if (ctx.parsedType === util_1.ZodParsedType.undefined) {
	        data = this._def.defaultValue();
	      }
	      return this._def.innerType._parse({
	        data,
	        path: ctx.path,
	        parent: ctx
	      });
	    }
	    removeDefault() {
	      return this._def.innerType;
	    }
	  }
	  exports.ZodDefault = ZodDefault;
	  ZodDefault.create = (type, params) => {
	    return new ZodDefault({
	      innerType: type,
	      typeName: ZodFirstPartyTypeKind.ZodDefault,
	      defaultValue: typeof params.default === "function" ? params.default : () => params.default,
	      ...processCreateParams(params)
	    });
	  };
	  class ZodCatch extends ZodType {
	    _parse(input) {
	      const {
	        ctx
	      } = this._processInputParams(input);
	      // newCtx is used to not collect issues from inner types in ctx
	      const newCtx = {
	        ...ctx,
	        common: {
	          ...ctx.common,
	          issues: []
	        }
	      };
	      const result = this._def.innerType._parse({
	        data: newCtx.data,
	        path: newCtx.path,
	        parent: {
	          ...newCtx
	        }
	      });
	      if ((0, parseUtil_1.isAsync)(result)) {
	        return result.then(result => {
	          return {
	            status: "valid",
	            value: result.status === "valid" ? result.value : this._def.catchValue({
	              get error() {
	                return new ZodError_1.ZodError(newCtx.common.issues);
	              },
	              input: newCtx.data
	            })
	          };
	        });
	      } else {
	        return {
	          status: "valid",
	          value: result.status === "valid" ? result.value : this._def.catchValue({
	            get error() {
	              return new ZodError_1.ZodError(newCtx.common.issues);
	            },
	            input: newCtx.data
	          })
	        };
	      }
	    }
	    removeCatch() {
	      return this._def.innerType;
	    }
	  }
	  exports.ZodCatch = ZodCatch;
	  ZodCatch.create = (type, params) => {
	    return new ZodCatch({
	      innerType: type,
	      typeName: ZodFirstPartyTypeKind.ZodCatch,
	      catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
	      ...processCreateParams(params)
	    });
	  };
	  class ZodNaN extends ZodType {
	    _parse(input) {
	      const parsedType = this._getType(input);
	      if (parsedType !== util_1.ZodParsedType.nan) {
	        const ctx = this._getOrReturnCtx(input);
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	          code: ZodError_1.ZodIssueCode.invalid_type,
	          expected: util_1.ZodParsedType.nan,
	          received: ctx.parsedType
	        });
	        return parseUtil_1.INVALID;
	      }
	      return {
	        status: "valid",
	        value: input.data
	      };
	    }
	  }
	  exports.ZodNaN = ZodNaN;
	  ZodNaN.create = params => {
	    return new ZodNaN({
	      typeName: ZodFirstPartyTypeKind.ZodNaN,
	      ...processCreateParams(params)
	    });
	  };
	  exports.BRAND = Symbol("zod_brand");
	  class ZodBranded extends ZodType {
	    _parse(input) {
	      const {
	        ctx
	      } = this._processInputParams(input);
	      const data = ctx.data;
	      return this._def.type._parse({
	        data,
	        path: ctx.path,
	        parent: ctx
	      });
	    }
	    unwrap() {
	      return this._def.type;
	    }
	  }
	  exports.ZodBranded = ZodBranded;
	  class ZodPipeline extends ZodType {
	    _parse(input) {
	      const {
	        status,
	        ctx
	      } = this._processInputParams(input);
	      if (ctx.common.async) {
	        const handleAsync = async () => {
	          const inResult = await this._def.in._parseAsync({
	            data: ctx.data,
	            path: ctx.path,
	            parent: ctx
	          });
	          if (inResult.status === "aborted") return parseUtil_1.INVALID;
	          if (inResult.status === "dirty") {
	            status.dirty();
	            return (0, parseUtil_1.DIRTY)(inResult.value);
	          } else {
	            return this._def.out._parseAsync({
	              data: inResult.value,
	              path: ctx.path,
	              parent: ctx
	            });
	          }
	        };
	        return handleAsync();
	      } else {
	        const inResult = this._def.in._parseSync({
	          data: ctx.data,
	          path: ctx.path,
	          parent: ctx
	        });
	        if (inResult.status === "aborted") return parseUtil_1.INVALID;
	        if (inResult.status === "dirty") {
	          status.dirty();
	          return {
	            status: "dirty",
	            value: inResult.value
	          };
	        } else {
	          return this._def.out._parseSync({
	            data: inResult.value,
	            path: ctx.path,
	            parent: ctx
	          });
	        }
	      }
	    }
	    static create(a, b) {
	      return new ZodPipeline({
	        in: a,
	        out: b,
	        typeName: ZodFirstPartyTypeKind.ZodPipeline
	      });
	    }
	  }
	  exports.ZodPipeline = ZodPipeline;
	  class ZodReadonly extends ZodType {
	    _parse(input) {
	      const result = this._def.innerType._parse(input);
	      const freeze = data => {
	        if ((0, parseUtil_1.isValid)(data)) {
	          data.value = Object.freeze(data.value);
	        }
	        return data;
	      };
	      return (0, parseUtil_1.isAsync)(result) ? result.then(data => freeze(data)) : freeze(result);
	    }
	    unwrap() {
	      return this._def.innerType;
	    }
	  }
	  exports.ZodReadonly = ZodReadonly;
	  ZodReadonly.create = (type, params) => {
	    return new ZodReadonly({
	      innerType: type,
	      typeName: ZodFirstPartyTypeKind.ZodReadonly,
	      ...processCreateParams(params)
	    });
	  };
	  function custom(check, params = {},
	  /**
	   * @deprecated
	   *
	   * Pass `fatal` into the params object instead:
	   *
	   * ```ts
	   * z.string().custom((val) => val.length > 5, { fatal: false })
	   * ```
	   *
	   */
	  fatal) {
	    if (check) return ZodAny.create().superRefine((data, ctx) => {
	      var _a, _b;
	      if (!check(data)) {
	        const p = typeof params === "function" ? params(data) : typeof params === "string" ? {
	          message: params
	        } : params;
	        const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
	        const p2 = typeof p === "string" ? {
	          message: p
	        } : p;
	        ctx.addIssue({
	          code: "custom",
	          ...p2,
	          fatal: _fatal
	        });
	      }
	    });
	    return ZodAny.create();
	  }
	  exports.custom = custom;
	  exports.late = {
	    object: ZodObject.lazycreate
	  };
	  var ZodFirstPartyTypeKind;
	  (function (ZodFirstPartyTypeKind) {
	    ZodFirstPartyTypeKind["ZodString"] = "ZodString";
	    ZodFirstPartyTypeKind["ZodNumber"] = "ZodNumber";
	    ZodFirstPartyTypeKind["ZodNaN"] = "ZodNaN";
	    ZodFirstPartyTypeKind["ZodBigInt"] = "ZodBigInt";
	    ZodFirstPartyTypeKind["ZodBoolean"] = "ZodBoolean";
	    ZodFirstPartyTypeKind["ZodDate"] = "ZodDate";
	    ZodFirstPartyTypeKind["ZodSymbol"] = "ZodSymbol";
	    ZodFirstPartyTypeKind["ZodUndefined"] = "ZodUndefined";
	    ZodFirstPartyTypeKind["ZodNull"] = "ZodNull";
	    ZodFirstPartyTypeKind["ZodAny"] = "ZodAny";
	    ZodFirstPartyTypeKind["ZodUnknown"] = "ZodUnknown";
	    ZodFirstPartyTypeKind["ZodNever"] = "ZodNever";
	    ZodFirstPartyTypeKind["ZodVoid"] = "ZodVoid";
	    ZodFirstPartyTypeKind["ZodArray"] = "ZodArray";
	    ZodFirstPartyTypeKind["ZodObject"] = "ZodObject";
	    ZodFirstPartyTypeKind["ZodUnion"] = "ZodUnion";
	    ZodFirstPartyTypeKind["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
	    ZodFirstPartyTypeKind["ZodIntersection"] = "ZodIntersection";
	    ZodFirstPartyTypeKind["ZodTuple"] = "ZodTuple";
	    ZodFirstPartyTypeKind["ZodRecord"] = "ZodRecord";
	    ZodFirstPartyTypeKind["ZodMap"] = "ZodMap";
	    ZodFirstPartyTypeKind["ZodSet"] = "ZodSet";
	    ZodFirstPartyTypeKind["ZodFunction"] = "ZodFunction";
	    ZodFirstPartyTypeKind["ZodLazy"] = "ZodLazy";
	    ZodFirstPartyTypeKind["ZodLiteral"] = "ZodLiteral";
	    ZodFirstPartyTypeKind["ZodEnum"] = "ZodEnum";
	    ZodFirstPartyTypeKind["ZodEffects"] = "ZodEffects";
	    ZodFirstPartyTypeKind["ZodNativeEnum"] = "ZodNativeEnum";
	    ZodFirstPartyTypeKind["ZodOptional"] = "ZodOptional";
	    ZodFirstPartyTypeKind["ZodNullable"] = "ZodNullable";
	    ZodFirstPartyTypeKind["ZodDefault"] = "ZodDefault";
	    ZodFirstPartyTypeKind["ZodCatch"] = "ZodCatch";
	    ZodFirstPartyTypeKind["ZodPromise"] = "ZodPromise";
	    ZodFirstPartyTypeKind["ZodBranded"] = "ZodBranded";
	    ZodFirstPartyTypeKind["ZodPipeline"] = "ZodPipeline";
	    ZodFirstPartyTypeKind["ZodReadonly"] = "ZodReadonly";
	  })(ZodFirstPartyTypeKind = exports.ZodFirstPartyTypeKind || (exports.ZodFirstPartyTypeKind = {}));
	  const instanceOfType = (
	  // const instanceOfType = <T extends new (...args: any[]) => any>(
	  cls, params = {
	    message: `Input not instance of ${cls.name}`
	  }) => custom(data => data instanceof cls, params);
	  exports.instanceof = instanceOfType;
	  const stringType = ZodString.create;
	  exports.string = stringType;
	  const numberType = ZodNumber.create;
	  exports.number = numberType;
	  const nanType = ZodNaN.create;
	  exports.nan = nanType;
	  const bigIntType = ZodBigInt.create;
	  exports.bigint = bigIntType;
	  const booleanType = ZodBoolean.create;
	  exports.boolean = booleanType;
	  const dateType = ZodDate.create;
	  exports.date = dateType;
	  const symbolType = ZodSymbol.create;
	  exports.symbol = symbolType;
	  const undefinedType = ZodUndefined.create;
	  exports.undefined = undefinedType;
	  const nullType = ZodNull.create;
	  exports.null = nullType;
	  const anyType = ZodAny.create;
	  exports.any = anyType;
	  const unknownType = ZodUnknown.create;
	  exports.unknown = unknownType;
	  const neverType = ZodNever.create;
	  exports.never = neverType;
	  const voidType = ZodVoid.create;
	  exports.void = voidType;
	  const arrayType = ZodArray.create;
	  exports.array = arrayType;
	  const objectType = ZodObject.create;
	  exports.object = objectType;
	  const strictObjectType = ZodObject.strictCreate;
	  exports.strictObject = strictObjectType;
	  const unionType = ZodUnion.create;
	  exports.union = unionType;
	  const discriminatedUnionType = ZodDiscriminatedUnion.create;
	  exports.discriminatedUnion = discriminatedUnionType;
	  const intersectionType = ZodIntersection.create;
	  exports.intersection = intersectionType;
	  const tupleType = ZodTuple.create;
	  exports.tuple = tupleType;
	  const recordType = ZodRecord.create;
	  exports.record = recordType;
	  const mapType = ZodMap.create;
	  exports.map = mapType;
	  const setType = ZodSet.create;
	  exports.set = setType;
	  const functionType = ZodFunction.create;
	  exports.function = functionType;
	  const lazyType = ZodLazy.create;
	  exports.lazy = lazyType;
	  const literalType = ZodLiteral.create;
	  exports.literal = literalType;
	  const enumType = ZodEnum.create;
	  exports.enum = enumType;
	  const nativeEnumType = ZodNativeEnum.create;
	  exports.nativeEnum = nativeEnumType;
	  const promiseType = ZodPromise.create;
	  exports.promise = promiseType;
	  const effectsType = ZodEffects.create;
	  exports.effect = effectsType;
	  exports.transformer = effectsType;
	  const optionalType = ZodOptional.create;
	  exports.optional = optionalType;
	  const nullableType = ZodNullable.create;
	  exports.nullable = nullableType;
	  const preprocessType = ZodEffects.createWithPreprocess;
	  exports.preprocess = preprocessType;
	  const pipelineType = ZodPipeline.create;
	  exports.pipeline = pipelineType;
	  const ostring = () => stringType().optional();
	  exports.ostring = ostring;
	  const onumber = () => numberType().optional();
	  exports.onumber = onumber;
	  const oboolean = () => booleanType().optional();
	  exports.oboolean = oboolean;
	  exports.coerce = {
	    string: arg => ZodString.create({
	      ...arg,
	      coerce: true
	    }),
	    number: arg => ZodNumber.create({
	      ...arg,
	      coerce: true
	    }),
	    boolean: arg => ZodBoolean.create({
	      ...arg,
	      coerce: true
	    }),
	    bigint: arg => ZodBigInt.create({
	      ...arg,
	      coerce: true
	    }),
	    date: arg => ZodDate.create({
	      ...arg,
	      coerce: true
	    })
	  };
	  exports.NEVER = parseUtil_1.INVALID;
	})(types$4);

	(function (exports) {

	  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, {
	      enumerable: true,
	      get: function () {
	        return m[k];
	      }
	    });
	  } : function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	  });
	  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function (m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	  };
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  __exportStar(errors, exports);
	  __exportStar(parseUtil, exports);
	  __exportStar(typeAliases, exports);
	  __exportStar(util$7, exports);
	  __exportStar(types$4, exports);
	  __exportStar(ZodError$1, exports);
	})(external$1);

	(function (exports) {

	  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, {
	      enumerable: true,
	      get: function () {
	        return m[k];
	      }
	    });
	  } : function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	  });
	  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
	    Object.defineProperty(o, "default", {
	      enumerable: true,
	      value: v
	    });
	  } : function (o, v) {
	    o["default"] = v;
	  });
	  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	  };
	  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function (m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	  };
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.z = void 0;
	  const z = __importStar(external$1);
	  exports.z = z;
	  __exportStar(external$1, exports);
	  exports.default = z;
	})(lib$1);

	var util$6 = {};

	var complex = {};

	var primitives = {};

	var dist$2 = {};

	var check = {};

	Object.defineProperty(check, "__esModule", {
	  value: true
	});
	check.isObject = check.assure = check.is = void 0;
	const is = (obj, def) => {
	  return def.safeParse(obj).success;
	};
	check.is = is;
	const assure = (def, obj) => {
	  return def.parse(obj);
	};
	check.assure = assure;
	const isObject$1 = obj => {
	  return typeof obj === 'object' && obj !== null;
	};
	check.isObject = isObject$1;

	var util$5 = {};

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.parseIntWithFallback = exports.dedupeStrs = exports.range = exports.chunkArray = exports.errHasMsg = exports.isErrnoException = exports.asyncFilter = exports.s32decode = exports.s32encode = exports.streamToBuffer = exports.flattenUint8Arrays = exports.bailableWait = exports.wait = exports.jitter = exports.noUndefinedVals = void 0;
	  const noUndefinedVals = obj => {
	    Object.keys(obj).forEach(k => {
	      if (obj[k] === undefined) {
	        delete obj[k];
	      }
	    });
	    return obj;
	  };
	  exports.noUndefinedVals = noUndefinedVals;
	  const jitter = maxMs => {
	    return Math.round((Math.random() - 0.5) * maxMs * 2);
	  };
	  exports.jitter = jitter;
	  const wait = ms => {
	    return new Promise(res => setTimeout(res, ms));
	  };
	  exports.wait = wait;
	  const bailableWait = ms => {
	    let bail;
	    const waitPromise = new Promise(res => {
	      const timeout = setTimeout(res, ms);
	      bail = () => {
	        clearTimeout(timeout);
	        res();
	      };
	    });
	    return {
	      bail,
	      wait: () => waitPromise
	    };
	  };
	  exports.bailableWait = bailableWait;
	  const flattenUint8Arrays = arrs => {
	    const length = arrs.reduce((acc, cur) => {
	      return acc + cur.length;
	    }, 0);
	    const flattened = new Uint8Array(length);
	    let offset = 0;
	    arrs.forEach(arr => {
	      flattened.set(arr, offset);
	      offset += arr.length;
	    });
	    return flattened;
	  };
	  exports.flattenUint8Arrays = flattenUint8Arrays;
	  const streamToBuffer = async stream => {
	    const arrays = [];
	    for await (const chunk of stream) {
	      arrays.push(chunk);
	    }
	    return (0, exports.flattenUint8Arrays)(arrays);
	  };
	  exports.streamToBuffer = streamToBuffer;
	  const S32_CHAR = '234567abcdefghijklmnopqrstuvwxyz';
	  const s32encode = i => {
	    let s = '';
	    while (i) {
	      const c = i % 32;
	      i = Math.floor(i / 32);
	      s = S32_CHAR.charAt(c) + s;
	    }
	    return s;
	  };
	  exports.s32encode = s32encode;
	  const s32decode = s => {
	    let i = 0;
	    for (const c of s) {
	      i = i * 32 + S32_CHAR.indexOf(c);
	    }
	    return i;
	  };
	  exports.s32decode = s32decode;
	  const asyncFilter = async (arr, fn) => {
	    const results = await Promise.all(arr.map(t => fn(t)));
	    return arr.filter((_, i) => results[i]);
	  };
	  exports.asyncFilter = asyncFilter;
	  const isErrnoException = err => {
	    return !!err && err['code'];
	  };
	  exports.isErrnoException = isErrnoException;
	  const errHasMsg = (err, msg) => {
	    return !!err && typeof err === 'object' && err['message'] === msg;
	  };
	  exports.errHasMsg = errHasMsg;
	  const chunkArray = (arr, chunkSize) => {
	    return arr.reduce((acc, cur, i) => {
	      const chunkI = Math.floor(i / chunkSize);
	      if (!acc[chunkI]) {
	        acc[chunkI] = [];
	      }
	      acc[chunkI].push(cur);
	      return acc;
	    }, []);
	  };
	  exports.chunkArray = chunkArray;
	  const range = num => {
	    const nums = [];
	    for (let i = 0; i < num; i++) {
	      nums.push(i);
	    }
	    return nums;
	  };
	  exports.range = range;
	  const dedupeStrs = strs => {
	    return [...new Set(strs)];
	  };
	  exports.dedupeStrs = dedupeStrs;
	  const parseIntWithFallback = (value, fallback) => {
	    const parsed = parseInt(value || '', 10);
	    return isNaN(parsed) ? fallback : parsed;
	  };
	  exports.parseIntWithFallback = parseIntWithFallback;
	})(util$5);

	var arrays = {};

	Object.defineProperty(arrays, "__esModule", {
	  value: true
	});
	arrays.mapDefined = arrays.keyBy = void 0;
	const keyBy = (arr, key) => {
	  return arr.reduce((acc, cur) => {
	    acc[cur[key]] = cur;
	    return acc;
	  }, {});
	};
	arrays.keyBy = keyBy;
	const mapDefined = (arr, fn) => {
	  const output = [];
	  for (const item of arr) {
	    const val = fn(item);
	    if (val !== undefined) {
	      output.push(val);
	    }
	  }
	  return output;
	};
	arrays.mapDefined = mapDefined;

	var async = {};

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.handleAllSettledErrors = exports.AsyncBufferFullError = exports.AsyncBuffer = exports.allComplete = exports.createDeferrables = exports.createDeferrable = exports.readFromGenerator = void 0;
	  const util_1 = util$5;
	  // reads values from a generator into a list
	  // breaks when isDone signals `true` AND `waitFor` completes OR when a max length is reached
	  // NOTE: does not signal generator to close. it *will* continue to produce values
	  const readFromGenerator = async (gen, isDone, waitFor = Promise.resolve(), maxLength = Number.MAX_SAFE_INTEGER) => {
	    const evts = [];
	    let bail;
	    let hasBroke = false;
	    const awaitDone = async () => {
	      if (await isDone(evts.at(-1))) {
	        return true;
	      }
	      const bailable = (0, util_1.bailableWait)(20);
	      await bailable.wait();
	      bail = bailable.bail;
	      if (hasBroke) return false;
	      return await awaitDone();
	    };
	    const breakOn = new Promise(resolve => {
	      waitFor.then(() => {
	        awaitDone().then(() => resolve());
	      });
	    });
	    try {
	      while (evts.length < maxLength) {
	        const maybeEvt = await Promise.race([gen.next(), breakOn]);
	        if (!maybeEvt) break;
	        const evt = maybeEvt;
	        if (evt.done) break;
	        evts.push(evt.value);
	      }
	    } finally {
	      hasBroke = true;
	      bail && bail();
	    }
	    return evts;
	  };
	  exports.readFromGenerator = readFromGenerator;
	  const createDeferrable = () => {
	    let resolve;
	    const promise = new Promise(res => {
	      resolve = () => res();
	    });
	    return {
	      resolve,
	      complete: promise
	    };
	  };
	  exports.createDeferrable = createDeferrable;
	  const createDeferrables = count => {
	    const list = [];
	    for (let i = 0; i < count; i++) {
	      list.push((0, exports.createDeferrable)());
	    }
	    return list;
	  };
	  exports.createDeferrables = createDeferrables;
	  const allComplete = async deferrables => {
	    await Promise.all(deferrables.map(d => d.complete));
	  };
	  exports.allComplete = allComplete;
	  class AsyncBuffer {
	    constructor(maxSize) {
	      Object.defineProperty(this, "maxSize", {
	        enumerable: true,
	        configurable: true,
	        writable: true,
	        value: maxSize
	      });
	      Object.defineProperty(this, "buffer", {
	        enumerable: true,
	        configurable: true,
	        writable: true,
	        value: []
	      });
	      Object.defineProperty(this, "promise", {
	        enumerable: true,
	        configurable: true,
	        writable: true,
	        value: void 0
	      });
	      Object.defineProperty(this, "resolve", {
	        enumerable: true,
	        configurable: true,
	        writable: true,
	        value: void 0
	      });
	      Object.defineProperty(this, "closed", {
	        enumerable: true,
	        configurable: true,
	        writable: true,
	        value: false
	      });
	      Object.defineProperty(this, "toThrow", {
	        enumerable: true,
	        configurable: true,
	        writable: true,
	        value: void 0
	      });
	      // Initializing to satisfy types/build, immediately reset by resetPromise()
	      this.promise = Promise.resolve();
	      this.resolve = () => null;
	      this.resetPromise();
	    }
	    get curr() {
	      return this.buffer;
	    }
	    get size() {
	      return this.buffer.length;
	    }
	    get isClosed() {
	      return this.closed;
	    }
	    resetPromise() {
	      this.promise = new Promise(r => this.resolve = r);
	    }
	    push(item) {
	      this.buffer.push(item);
	      this.resolve();
	    }
	    pushMany(items) {
	      items.forEach(i => this.buffer.push(i));
	      this.resolve();
	    }
	    async *events() {
	      while (true) {
	        if (this.closed && this.buffer.length === 0) {
	          if (this.toThrow) {
	            throw this.toThrow;
	          } else {
	            return;
	          }
	        }
	        await this.promise;
	        if (this.toThrow) {
	          throw this.toThrow;
	        }
	        if (this.maxSize && this.size > this.maxSize) {
	          throw new AsyncBufferFullError(this.maxSize);
	        }
	        const [first, ...rest] = this.buffer;
	        if (first) {
	          this.buffer = rest;
	          yield first;
	        } else {
	          this.resetPromise();
	        }
	      }
	    }
	    throw(err) {
	      this.toThrow = err;
	      this.closed = true;
	      this.resolve();
	    }
	    close() {
	      this.closed = true;
	      this.resolve();
	    }
	  }
	  exports.AsyncBuffer = AsyncBuffer;
	  class AsyncBufferFullError extends Error {
	    constructor(maxSize) {
	      super(`ReachedMaxBufferSize: ${maxSize}`);
	    }
	  }
	  exports.AsyncBufferFullError = AsyncBufferFullError;
	  const handleAllSettledErrors = results => {
	    const errors = results.filter(isRejected).map(res => res.reason);
	    if (errors.length === 0) {
	      return;
	    }
	    if (errors.length === 1) {
	      throw errors[0];
	    }
	    throw new AggregateError(errors, 'Multiple errors: ' + errors.map(err => err?.message).join('\n'));
	  };
	  exports.handleAllSettledErrors = handleAllSettledErrors;
	  const isRejected = result => {
	    return result.status === 'rejected';
	  };
	})(async);

	var tid = {};

	Object.defineProperty(tid, "__esModule", {
	  value: true
	});
	tid.TID = void 0;
	const util_1$M = util$5;
	const TID_LEN = 13;
	let lastTimestamp = 0;
	let timestampCount = 0;
	let clockid = null;
	function dedash(str) {
	  return str.replaceAll('-', '');
	}
	class TID {
	  constructor(str) {
	    Object.defineProperty(this, "str", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    const noDashes = dedash(str);
	    if (noDashes.length !== TID_LEN) {
	      throw new Error(`Poorly formatted TID: ${noDashes.length} length`);
	    }
	    this.str = noDashes;
	  }
	  static next(prev) {
	    // javascript does not have microsecond precision
	    // instead, we append a counter to the timestamp to indicate if multiple timestamps were created within the same millisecond
	    // take max of current time & last timestamp to prevent tids moving backwards if system clock drifts backwards
	    const time = Math.max(Date.now(), lastTimestamp);
	    if (time === lastTimestamp) {
	      timestampCount++;
	    }
	    lastTimestamp = time;
	    const timestamp = time * 1000 + timestampCount;
	    // the bottom 32 clock ids can be randomized & are not guaranteed to be collision resistant
	    // we use the same clockid for all tids coming from this machine
	    if (clockid === null) {
	      clockid = Math.floor(Math.random() * 32);
	    }
	    const tid = TID.fromTime(timestamp, clockid);
	    if (!prev || tid.newerThan(prev)) {
	      return tid;
	    }
	    return TID.fromTime(prev.timestamp() + 1, clockid);
	  }
	  static nextStr(prev) {
	    return TID.next(prev ? new TID(prev) : undefined).toString();
	  }
	  static fromTime(timestamp, clockid) {
	    // base32 encode with encoding variant sort (s32)
	    const str = `${(0, util_1$M.s32encode)(timestamp)}${(0, util_1$M.s32encode)(clockid).padStart(2, '2')}`;
	    return new TID(str);
	  }
	  static fromStr(str) {
	    return new TID(str);
	  }
	  static oldestFirst(a, b) {
	    return a.compareTo(b);
	  }
	  static newestFirst(a, b) {
	    return b.compareTo(a);
	  }
	  static is(str) {
	    return dedash(str).length === TID_LEN;
	  }
	  timestamp() {
	    return (0, util_1$M.s32decode)(this.str.slice(0, 11));
	  }
	  clockid() {
	    return (0, util_1$M.s32decode)(this.str.slice(11, 13));
	  }
	  formatted() {
	    const str = this.toString();
	    return `${str.slice(0, 4)}-${str.slice(4, 7)}-${str.slice(7, 11)}-${str.slice(11, 13)}`;
	  }
	  toString() {
	    return this.str;
	  }
	  // newer > older
	  compareTo(other) {
	    if (this.str > other.str) return 1;
	    if (this.str < other.str) return -1;
	    return 0;
	  }
	  equals(other) {
	    return this.str === other.str;
	  }
	  newerThan(other) {
	    return this.compareTo(other) > 0;
	  }
	  olderThan(other) {
	    return this.compareTo(other) < 0;
	  }
	}
	tid.TID = TID;
	tid.default = TID;

	var ipld = {};

	var cid$2 = {};

	var varint$5 = {};

	var encode_1 = encode$5;
	var MSB = 128,
	  REST = 127,
	  MSBALL = ~REST,
	  INT = Math.pow(2, 31);
	function encode$5(num, out, offset) {
	  out = out || [];
	  offset = offset || 0;
	  var oldOffset = offset;
	  while (num >= INT) {
	    out[offset++] = num & 255 | MSB;
	    num /= 128;
	  }
	  while (num & MSBALL) {
	    out[offset++] = num & 255 | MSB;
	    num >>>= 7;
	  }
	  out[offset] = num | 0;
	  encode$5.bytes = offset - oldOffset + 1;
	  return out;
	}
	var decode$6 = read;
	var MSB$1 = 128,
	  REST$1 = 127;
	function read(buf, offset) {
	  var res = 0,
	    offset = offset || 0,
	    shift = 0,
	    counter = offset,
	    b,
	    l = buf.length;
	  do {
	    if (counter >= l) {
	      read.bytes = 0;
	      throw new RangeError('Could not decode varint');
	    }
	    b = buf[counter++];
	    res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);
	    shift += 7;
	  } while (b >= MSB$1);
	  read.bytes = counter - offset;
	  return res;
	}
	var N1 = Math.pow(2, 7);
	var N2 = Math.pow(2, 14);
	var N3 = Math.pow(2, 21);
	var N4 = Math.pow(2, 28);
	var N5 = Math.pow(2, 35);
	var N6 = Math.pow(2, 42);
	var N7 = Math.pow(2, 49);
	var N8 = Math.pow(2, 56);
	var N9 = Math.pow(2, 63);
	var length = function (value) {
	  return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
	};
	var varint$4 = {
	  encode: encode_1,
	  decode: decode$6,
	  encodingLength: length
	};
	var _brrp_varint = varint$4;
	var varint$1$2 = _brrp_varint;
	var varint_1 = varint$1$2;

	Object.defineProperty(varint$5, '__esModule', {
	  value: true
	});
	var varint$1$1 = varint_1;
	const decode$5 = (data, offset = 0) => {
	  const code = varint$1$1.decode(data, offset);
	  return [code, varint$1$1.decode.bytes];
	};
	const encodeTo = (int, target, offset = 0) => {
	  varint$1$1.encode(int, target, offset);
	  return target;
	};
	const encodingLength = int => {
	  return varint$1$1.encodingLength(int);
	};
	varint$5.decode = decode$5;
	varint$5.encodeTo = encodeTo;
	varint$5.encodingLength = encodingLength;

	var digest$5 = {};

	var bytes$9 = {};

	Object.defineProperty(bytes$9, '__esModule', {
	  value: true
	});
	const empty = new Uint8Array(0);
	const toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');
	const fromHex = hex => {
	  const hexes = hex.match(/../g);
	  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;
	};
	const equals$4 = (aa, bb) => {
	  if (aa === bb) return true;
	  if (aa.byteLength !== bb.byteLength) {
	    return false;
	  }
	  for (let ii = 0; ii < aa.byteLength; ii++) {
	    if (aa[ii] !== bb[ii]) {
	      return false;
	    }
	  }
	  return true;
	};
	const coerce = o => {
	  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o;
	  if (o instanceof ArrayBuffer) return new Uint8Array(o);
	  if (ArrayBuffer.isView(o)) {
	    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
	  }
	  throw new Error('Unknown type, must be binary type');
	};
	const isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);
	const fromString$3 = str => new TextEncoder().encode(str);
	const toString$4 = b => new TextDecoder().decode(b);
	bytes$9.coerce = coerce;
	bytes$9.empty = empty;
	bytes$9.equals = equals$4;
	bytes$9.fromHex = fromHex;
	bytes$9.fromString = fromString$3;
	bytes$9.isBinary = isBinary;
	bytes$9.toHex = toHex;
	bytes$9.toString = toString$4;

	Object.defineProperty(digest$5, '__esModule', {
	  value: true
	});
	var bytes$8 = bytes$9;
	var varint$3 = varint$5;
	const create = (code, digest) => {
	  const size = digest.byteLength;
	  const sizeOffset = varint$3.encodingLength(code);
	  const digestOffset = sizeOffset + varint$3.encodingLength(size);
	  const bytes = new Uint8Array(digestOffset + size);
	  varint$3.encodeTo(code, bytes, 0);
	  varint$3.encodeTo(size, bytes, sizeOffset);
	  bytes.set(digest, digestOffset);
	  return new Digest(code, size, digest, bytes);
	};
	const decode$4 = multihash => {
	  const bytes$1 = bytes$8.coerce(multihash);
	  const [code, sizeOffset] = varint$3.decode(bytes$1);
	  const [size, digestOffset] = varint$3.decode(bytes$1.subarray(sizeOffset));
	  const digest = bytes$1.subarray(sizeOffset + digestOffset);
	  if (digest.byteLength !== size) {
	    throw new Error('Incorrect length');
	  }
	  return new Digest(code, size, digest, bytes$1);
	};
	const equals$3 = (a, b) => {
	  if (a === b) {
	    return true;
	  } else {
	    return a.code === b.code && a.size === b.size && bytes$8.equals(a.bytes, b.bytes);
	  }
	};
	class Digest {
	  constructor(code, size, digest, bytes) {
	    this.code = code;
	    this.size = size;
	    this.digest = digest;
	    this.bytes = bytes;
	  }
	}
	digest$5.Digest = Digest;
	digest$5.create = create;
	digest$5.decode = decode$4;
	digest$5.equals = equals$3;

	var base58$2 = {};

	var base$b = {};

	function base$a(ALPHABET, name) {
	  if (ALPHABET.length >= 255) {
	    throw new TypeError('Alphabet too long');
	  }
	  var BASE_MAP = new Uint8Array(256);
	  for (var j = 0; j < BASE_MAP.length; j++) {
	    BASE_MAP[j] = 255;
	  }
	  for (var i = 0; i < ALPHABET.length; i++) {
	    var x = ALPHABET.charAt(i);
	    var xc = x.charCodeAt(0);
	    if (BASE_MAP[xc] !== 255) {
	      throw new TypeError(x + ' is ambiguous');
	    }
	    BASE_MAP[xc] = i;
	  }
	  var BASE = ALPHABET.length;
	  var LEADER = ALPHABET.charAt(0);
	  var FACTOR = Math.log(BASE) / Math.log(256);
	  var iFACTOR = Math.log(256) / Math.log(BASE);
	  function encode(source) {
	    if (source instanceof Uint8Array) ;else if (ArrayBuffer.isView(source)) {
	      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
	    } else if (Array.isArray(source)) {
	      source = Uint8Array.from(source);
	    }
	    if (!(source instanceof Uint8Array)) {
	      throw new TypeError('Expected Uint8Array');
	    }
	    if (source.length === 0) {
	      return '';
	    }
	    var zeroes = 0;
	    var length = 0;
	    var pbegin = 0;
	    var pend = source.length;
	    while (pbegin !== pend && source[pbegin] === 0) {
	      pbegin++;
	      zeroes++;
	    }
	    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
	    var b58 = new Uint8Array(size);
	    while (pbegin !== pend) {
	      var carry = source[pbegin];
	      var i = 0;
	      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {
	        carry += 256 * b58[it1] >>> 0;
	        b58[it1] = carry % BASE >>> 0;
	        carry = carry / BASE >>> 0;
	      }
	      if (carry !== 0) {
	        throw new Error('Non-zero carry');
	      }
	      length = i;
	      pbegin++;
	    }
	    var it2 = size - length;
	    while (it2 !== size && b58[it2] === 0) {
	      it2++;
	    }
	    var str = LEADER.repeat(zeroes);
	    for (; it2 < size; ++it2) {
	      str += ALPHABET.charAt(b58[it2]);
	    }
	    return str;
	  }
	  function decodeUnsafe(source) {
	    if (typeof source !== 'string') {
	      throw new TypeError('Expected String');
	    }
	    if (source.length === 0) {
	      return new Uint8Array();
	    }
	    var psz = 0;
	    if (source[psz] === ' ') {
	      return;
	    }
	    var zeroes = 0;
	    var length = 0;
	    while (source[psz] === LEADER) {
	      zeroes++;
	      psz++;
	    }
	    var size = (source.length - psz) * FACTOR + 1 >>> 0;
	    var b256 = new Uint8Array(size);
	    while (source[psz]) {
	      var carry = BASE_MAP[source.charCodeAt(psz)];
	      if (carry === 255) {
	        return;
	      }
	      var i = 0;
	      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {
	        carry += BASE * b256[it3] >>> 0;
	        b256[it3] = carry % 256 >>> 0;
	        carry = carry / 256 >>> 0;
	      }
	      if (carry !== 0) {
	        throw new Error('Non-zero carry');
	      }
	      length = i;
	      psz++;
	    }
	    if (source[psz] === ' ') {
	      return;
	    }
	    var it4 = size - length;
	    while (it4 !== size && b256[it4] === 0) {
	      it4++;
	    }
	    var vch = new Uint8Array(zeroes + (size - it4));
	    var j = zeroes;
	    while (it4 !== size) {
	      vch[j++] = b256[it4++];
	    }
	    return vch;
	  }
	  function decode(string) {
	    var buffer = decodeUnsafe(string);
	    if (buffer) {
	      return buffer;
	    }
	    throw new Error(`Non-${name} character`);
	  }
	  return {
	    encode: encode,
	    decodeUnsafe: decodeUnsafe,
	    decode: decode
	  };
	}
	var src$2 = base$a;
	var _brrp__multiformats_scope_baseX = src$2;
	var baseX$2 = _brrp__multiformats_scope_baseX;

	Object.defineProperty(base$b, '__esModule', {
	  value: true
	});
	var baseX$1 = baseX$2;
	var bytes$7 = bytes$9;
	class Encoder {
	  constructor(name, prefix, baseEncode) {
	    this.name = name;
	    this.prefix = prefix;
	    this.baseEncode = baseEncode;
	  }
	  encode(bytes) {
	    if (bytes instanceof Uint8Array) {
	      return `${this.prefix}${this.baseEncode(bytes)}`;
	    } else {
	      throw Error('Unknown type, must be binary type');
	    }
	  }
	}
	class Decoder {
	  constructor(name, prefix, baseDecode) {
	    this.name = name;
	    this.prefix = prefix;
	    if (prefix.codePointAt(0) === undefined) {
	      throw new Error('Invalid prefix character');
	    }
	    this.prefixCodePoint = prefix.codePointAt(0);
	    this.baseDecode = baseDecode;
	  }
	  decode(text) {
	    if (typeof text === 'string') {
	      if (text.codePointAt(0) !== this.prefixCodePoint) {
	        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
	      }
	      return this.baseDecode(text.slice(this.prefix.length));
	    } else {
	      throw Error('Can only multibase decode strings');
	    }
	  }
	  or(decoder) {
	    return or(this, decoder);
	  }
	}
	class ComposedDecoder {
	  constructor(decoders) {
	    this.decoders = decoders;
	  }
	  or(decoder) {
	    return or(this, decoder);
	  }
	  decode(input) {
	    const prefix = input[0];
	    const decoder = this.decoders[prefix];
	    if (decoder) {
	      return decoder.decode(input);
	    } else {
	      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
	    }
	  }
	}
	const or = (left, right) => new ComposedDecoder({
	  ...(left.decoders || {
	    [left.prefix]: left
	  }),
	  ...(right.decoders || {
	    [right.prefix]: right
	  })
	});
	class Codec {
	  constructor(name, prefix, baseEncode, baseDecode) {
	    this.name = name;
	    this.prefix = prefix;
	    this.baseEncode = baseEncode;
	    this.baseDecode = baseDecode;
	    this.encoder = new Encoder(name, prefix, baseEncode);
	    this.decoder = new Decoder(name, prefix, baseDecode);
	  }
	  encode(input) {
	    return this.encoder.encode(input);
	  }
	  decode(input) {
	    return this.decoder.decode(input);
	  }
	}
	const from$1 = ({
	  name,
	  prefix,
	  encode,
	  decode
	}) => new Codec(name, prefix, encode, decode);
	const baseX = ({
	  prefix,
	  name,
	  alphabet
	}) => {
	  const {
	    encode,
	    decode
	  } = baseX$1(alphabet, name);
	  return from$1({
	    prefix,
	    name,
	    encode,
	    decode: text => bytes$7.coerce(decode(text))
	  });
	};
	const decode$3 = (string, alphabet, bitsPerChar, name) => {
	  const codes = {};
	  for (let i = 0; i < alphabet.length; ++i) {
	    codes[alphabet[i]] = i;
	  }
	  let end = string.length;
	  while (string[end - 1] === '=') {
	    --end;
	  }
	  const out = new Uint8Array(end * bitsPerChar / 8 | 0);
	  let bits = 0;
	  let buffer = 0;
	  let written = 0;
	  for (let i = 0; i < end; ++i) {
	    const value = codes[string[i]];
	    if (value === undefined) {
	      throw new SyntaxError(`Non-${name} character`);
	    }
	    buffer = buffer << bitsPerChar | value;
	    bits += bitsPerChar;
	    if (bits >= 8) {
	      bits -= 8;
	      out[written++] = 255 & buffer >> bits;
	    }
	  }
	  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {
	    throw new SyntaxError('Unexpected end of data');
	  }
	  return out;
	};
	const encode$4 = (data, alphabet, bitsPerChar) => {
	  const pad = alphabet[alphabet.length - 1] === '=';
	  const mask = (1 << bitsPerChar) - 1;
	  let out = '';
	  let bits = 0;
	  let buffer = 0;
	  for (let i = 0; i < data.length; ++i) {
	    buffer = buffer << 8 | data[i];
	    bits += 8;
	    while (bits > bitsPerChar) {
	      bits -= bitsPerChar;
	      out += alphabet[mask & buffer >> bits];
	    }
	  }
	  if (bits) {
	    out += alphabet[mask & buffer << bitsPerChar - bits];
	  }
	  if (pad) {
	    while (out.length * bitsPerChar & 7) {
	      out += '=';
	    }
	  }
	  return out;
	};
	const rfc4648 = ({
	  name,
	  prefix,
	  bitsPerChar,
	  alphabet
	}) => {
	  return from$1({
	    prefix,
	    name,
	    encode(input) {
	      return encode$4(input, alphabet, bitsPerChar);
	    },
	    decode(input) {
	      return decode$3(input, alphabet, bitsPerChar, name);
	    }
	  });
	};
	base$b.Codec = Codec;
	base$b.baseX = baseX;
	base$b.from = from$1;
	base$b.or = or;
	base$b.rfc4648 = rfc4648;

	Object.defineProperty(base58$2, '__esModule', {
	  value: true
	});
	var base$9 = base$b;
	const base58btc = base$9.baseX({
	  name: 'base58btc',
	  prefix: 'z',
	  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
	});
	const base58flickr = base$9.baseX({
	  name: 'base58flickr',
	  prefix: 'Z',
	  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'
	});
	base58$2.base58btc = base58btc;
	base58$2.base58flickr = base58flickr;

	var base32$3 = {};

	Object.defineProperty(base32$3, '__esModule', {
	  value: true
	});
	var base$8 = base$b;
	const base32$2 = base$8.rfc4648({
	  prefix: 'b',
	  name: 'base32',
	  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',
	  bitsPerChar: 5
	});
	const base32upper = base$8.rfc4648({
	  prefix: 'B',
	  name: 'base32upper',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',
	  bitsPerChar: 5
	});
	const base32pad = base$8.rfc4648({
	  prefix: 'c',
	  name: 'base32pad',
	  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',
	  bitsPerChar: 5
	});
	const base32padupper = base$8.rfc4648({
	  prefix: 'C',
	  name: 'base32padupper',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',
	  bitsPerChar: 5
	});
	const base32hex = base$8.rfc4648({
	  prefix: 'v',
	  name: 'base32hex',
	  alphabet: '0123456789abcdefghijklmnopqrstuv',
	  bitsPerChar: 5
	});
	const base32hexupper = base$8.rfc4648({
	  prefix: 'V',
	  name: 'base32hexupper',
	  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',
	  bitsPerChar: 5
	});
	const base32hexpad = base$8.rfc4648({
	  prefix: 't',
	  name: 'base32hexpad',
	  alphabet: '0123456789abcdefghijklmnopqrstuv=',
	  bitsPerChar: 5
	});
	const base32hexpadupper = base$8.rfc4648({
	  prefix: 'T',
	  name: 'base32hexpadupper',
	  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',
	  bitsPerChar: 5
	});
	const base32z = base$8.rfc4648({
	  prefix: 'h',
	  name: 'base32z',
	  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',
	  bitsPerChar: 5
	});
	base32$3.base32 = base32$2;
	base32$3.base32hex = base32hex;
	base32$3.base32hexpad = base32hexpad;
	base32$3.base32hexpadupper = base32hexpadupper;
	base32$3.base32hexupper = base32hexupper;
	base32$3.base32pad = base32pad;
	base32$3.base32padupper = base32padupper;
	base32$3.base32upper = base32upper;
	base32$3.base32z = base32z;

	Object.defineProperty(cid$2, '__esModule', {
	  value: true
	});
	var varint$2 = varint$5;
	var digest$4 = digest$5;
	var base58$1 = base58$2;
	var base32$1 = base32$3;
	var bytes$6 = bytes$9;
	class CID {
	  constructor(version, code, multihash, bytes) {
	    this.code = code;
	    this.version = version;
	    this.multihash = multihash;
	    this.bytes = bytes;
	    this.byteOffset = bytes.byteOffset;
	    this.byteLength = bytes.byteLength;
	    this.asCID = this;
	    this._baseCache = new Map();
	    Object.defineProperties(this, {
	      byteOffset: hidden,
	      byteLength: hidden,
	      code: readonly,
	      version: readonly,
	      multihash: readonly,
	      bytes: readonly,
	      _baseCache: hidden,
	      asCID: hidden
	    });
	  }
	  toV0() {
	    switch (this.version) {
	      case 0:
	        {
	          return this;
	        }
	      default:
	        {
	          const {
	            code,
	            multihash
	          } = this;
	          if (code !== DAG_PB_CODE) {
	            throw new Error('Cannot convert a non dag-pb CID to CIDv0');
	          }
	          if (multihash.code !== SHA_256_CODE) {
	            throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');
	          }
	          return CID.createV0(multihash);
	        }
	    }
	  }
	  toV1() {
	    switch (this.version) {
	      case 0:
	        {
	          const {
	            code,
	            digest: digest$1
	          } = this.multihash;
	          const multihash = digest$4.create(code, digest$1);
	          return CID.createV1(this.code, multihash);
	        }
	      case 1:
	        {
	          return this;
	        }
	      default:
	        {
	          throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
	        }
	    }
	  }
	  equals(other) {
	    return other && this.code === other.code && this.version === other.version && digest$4.equals(this.multihash, other.multihash);
	  }
	  toString(base) {
	    const {
	      bytes,
	      version,
	      _baseCache
	    } = this;
	    switch (version) {
	      case 0:
	        return toStringV0(bytes, _baseCache, base || base58$1.base58btc.encoder);
	      default:
	        return toStringV1(bytes, _baseCache, base || base32$1.base32.encoder);
	    }
	  }
	  toJSON() {
	    return {
	      code: this.code,
	      version: this.version,
	      hash: this.multihash.bytes
	    };
	  }
	  get [Symbol.toStringTag]() {
	    return 'CID';
	  }
	  [Symbol.for('nodejs.util.inspect.custom')]() {
	    return 'CID(' + this.toString() + ')';
	  }
	  static isCID(value) {
	    deprecate(/^0\.0/, IS_CID_DEPRECATION);
	    return !!(value && (value[cidSymbol] || value.asCID === value));
	  }
	  get toBaseEncodedString() {
	    throw new Error('Deprecated, use .toString()');
	  }
	  get codec() {
	    throw new Error('"codec" property is deprecated, use integer "code" property instead');
	  }
	  get buffer() {
	    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');
	  }
	  get multibaseName() {
	    throw new Error('"multibaseName" property is deprecated');
	  }
	  get prefix() {
	    throw new Error('"prefix" property is deprecated');
	  }
	  static asCID(value) {
	    if (value instanceof CID) {
	      return value;
	    } else if (value != null && value.asCID === value) {
	      const {
	        version,
	        code,
	        multihash,
	        bytes
	      } = value;
	      return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));
	    } else if (value != null && value[cidSymbol] === true) {
	      const {
	        version,
	        multihash,
	        code
	      } = value;
	      const digest$1 = digest$4.decode(multihash);
	      return CID.create(version, code, digest$1);
	    } else {
	      return null;
	    }
	  }
	  static create(version, code, digest) {
	    if (typeof code !== 'number') {
	      throw new Error('String codecs are no longer supported');
	    }
	    switch (version) {
	      case 0:
	        {
	          if (code !== DAG_PB_CODE) {
	            throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);
	          } else {
	            return new CID(version, code, digest, digest.bytes);
	          }
	        }
	      case 1:
	        {
	          const bytes = encodeCID(version, code, digest.bytes);
	          return new CID(version, code, digest, bytes);
	        }
	      default:
	        {
	          throw new Error('Invalid version');
	        }
	    }
	  }
	  static createV0(digest) {
	    return CID.create(0, DAG_PB_CODE, digest);
	  }
	  static createV1(code, digest) {
	    return CID.create(1, code, digest);
	  }
	  static decode(bytes) {
	    const [cid, remainder] = CID.decodeFirst(bytes);
	    if (remainder.length) {
	      throw new Error('Incorrect length');
	    }
	    return cid;
	  }
	  static decodeFirst(bytes$1) {
	    const specs = CID.inspectBytes(bytes$1);
	    const prefixSize = specs.size - specs.multihashSize;
	    const multihashBytes = bytes$6.coerce(bytes$1.subarray(prefixSize, prefixSize + specs.multihashSize));
	    if (multihashBytes.byteLength !== specs.multihashSize) {
	      throw new Error('Incorrect length');
	    }
	    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
	    const digest$1 = new digest$4.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
	    const cid = specs.version === 0 ? CID.createV0(digest$1) : CID.createV1(specs.codec, digest$1);
	    return [cid, bytes$1.subarray(specs.size)];
	  }
	  static inspectBytes(initialBytes) {
	    let offset = 0;
	    const next = () => {
	      const [i, length] = varint$2.decode(initialBytes.subarray(offset));
	      offset += length;
	      return i;
	    };
	    let version = next();
	    let codec = DAG_PB_CODE;
	    if (version === 18) {
	      version = 0;
	      offset = 0;
	    } else if (version === 1) {
	      codec = next();
	    }
	    if (version !== 0 && version !== 1) {
	      throw new RangeError(`Invalid CID version ${version}`);
	    }
	    const prefixSize = offset;
	    const multihashCode = next();
	    const digestSize = next();
	    const size = offset + digestSize;
	    const multihashSize = size - prefixSize;
	    return {
	      version,
	      codec,
	      multihashCode,
	      digestSize,
	      multihashSize,
	      size
	    };
	  }
	  static parse(source, base) {
	    const [prefix, bytes] = parseCIDtoBytes(source, base);
	    const cid = CID.decode(bytes);
	    cid._baseCache.set(prefix, source);
	    return cid;
	  }
	}
	const parseCIDtoBytes = (source, base) => {
	  switch (source[0]) {
	    case 'Q':
	      {
	        const decoder = base || base58$1.base58btc;
	        return [base58$1.base58btc.prefix, decoder.decode(`${base58$1.base58btc.prefix}${source}`)];
	      }
	    case base58$1.base58btc.prefix:
	      {
	        const decoder = base || base58$1.base58btc;
	        return [base58$1.base58btc.prefix, decoder.decode(source)];
	      }
	    case base32$1.base32.prefix:
	      {
	        const decoder = base || base32$1.base32;
	        return [base32$1.base32.prefix, decoder.decode(source)];
	      }
	    default:
	      {
	        if (base == null) {
	          throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');
	        }
	        return [source[0], base.decode(source)];
	      }
	  }
	};
	const toStringV0 = (bytes, cache, base) => {
	  const {
	    prefix
	  } = base;
	  if (prefix !== base58$1.base58btc.prefix) {
	    throw Error(`Cannot string encode V0 in ${base.name} encoding`);
	  }
	  const cid = cache.get(prefix);
	  if (cid == null) {
	    const cid = base.encode(bytes).slice(1);
	    cache.set(prefix, cid);
	    return cid;
	  } else {
	    return cid;
	  }
	};
	const toStringV1 = (bytes, cache, base) => {
	  const {
	    prefix
	  } = base;
	  const cid = cache.get(prefix);
	  if (cid == null) {
	    const cid = base.encode(bytes);
	    cache.set(prefix, cid);
	    return cid;
	  } else {
	    return cid;
	  }
	};
	const DAG_PB_CODE = 112;
	const SHA_256_CODE = 18;
	const encodeCID = (version, code, multihash) => {
	  const codeOffset = varint$2.encodingLength(version);
	  const hashOffset = codeOffset + varint$2.encodingLength(code);
	  const bytes = new Uint8Array(hashOffset + multihash.byteLength);
	  varint$2.encodeTo(version, bytes, 0);
	  varint$2.encodeTo(code, bytes, codeOffset);
	  bytes.set(multihash, hashOffset);
	  return bytes;
	};
	const cidSymbol = Symbol.for('@ipld/js-cid/CID');
	const readonly = {
	  writable: false,
	  configurable: false,
	  enumerable: true
	};
	const hidden = {
	  writable: false,
	  enumerable: false,
	  configurable: false
	};
	const version = '0.0.0-dev';
	const deprecate = (range, message) => {
	  if (range.test(version)) {
	    console.warn(message);
	  } else {
	    throw new Error(message);
	  }
	};
	const IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;
	cid$2.CID = CID;

	var src$1 = {};

	var compare$2 = {};

	Object.defineProperty(compare$2, '__esModule', {
	  value: true
	});
	function compare$1(a, b) {
	  for (let i = 0; i < a.byteLength; i++) {
	    if (a[i] < b[i]) {
	      return -1;
	    }
	    if (a[i] > b[i]) {
	      return 1;
	    }
	  }
	  if (a.byteLength > b.byteLength) {
	    return 1;
	  }
	  if (a.byteLength < b.byteLength) {
	    return -1;
	  }
	  return 0;
	}
	compare$2.compare = compare$1;

	var concat$2 = {};

	Object.defineProperty(concat$2, '__esModule', {
	  value: true
	});
	function concat$1(arrays, length) {
	  if (!length) {
	    length = arrays.reduce((acc, curr) => acc + curr.length, 0);
	  }
	  const output = new Uint8Array(length);
	  let offset = 0;
	  for (const arr of arrays) {
	    output.set(arr, offset);
	    offset += arr.length;
	  }
	  return output;
	}
	concat$2.concat = concat$1;

	var equals$2 = {};

	Object.defineProperty(equals$2, '__esModule', {
	  value: true
	});
	function equals$1(a, b) {
	  if (a === b) {
	    return true;
	  }
	  if (a.byteLength !== b.byteLength) {
	    return false;
	  }
	  for (let i = 0; i < a.byteLength; i++) {
	    if (a[i] !== b[i]) {
	      return false;
	    }
	  }
	  return true;
	}
	equals$2.equals = equals$1;

	var fromString$2 = {};

	var basics$1 = {};

	var identity$5 = {};

	Object.defineProperty(identity$5, '__esModule', {
	  value: true
	});
	var base$7 = base$b;
	var bytes$5 = bytes$9;
	const identity$4 = base$7.from({
	  prefix: '\0',
	  name: 'identity',
	  encode: buf => bytes$5.toString(buf),
	  decode: str => bytes$5.fromString(str)
	});
	identity$5.identity = identity$4;

	var base2$2 = {};

	Object.defineProperty(base2$2, '__esModule', {
	  value: true
	});
	var base$6 = base$b;
	const base2$1 = base$6.rfc4648({
	  prefix: '0',
	  name: 'base2',
	  alphabet: '01',
	  bitsPerChar: 1
	});
	base2$2.base2 = base2$1;

	var base8$2 = {};

	Object.defineProperty(base8$2, '__esModule', {
	  value: true
	});
	var base$5 = base$b;
	const base8$1 = base$5.rfc4648({
	  prefix: '7',
	  name: 'base8',
	  alphabet: '01234567',
	  bitsPerChar: 3
	});
	base8$2.base8 = base8$1;

	var base10$2 = {};

	Object.defineProperty(base10$2, '__esModule', {
	  value: true
	});
	var base$4 = base$b;
	const base10$1 = base$4.baseX({
	  prefix: '9',
	  name: 'base10',
	  alphabet: '0123456789'
	});
	base10$2.base10 = base10$1;

	var base16$2 = {};

	Object.defineProperty(base16$2, '__esModule', {
	  value: true
	});
	var base$3 = base$b;
	const base16$1 = base$3.rfc4648({
	  prefix: 'f',
	  name: 'base16',
	  alphabet: '0123456789abcdef',
	  bitsPerChar: 4
	});
	const base16upper = base$3.rfc4648({
	  prefix: 'F',
	  name: 'base16upper',
	  alphabet: '0123456789ABCDEF',
	  bitsPerChar: 4
	});
	base16$2.base16 = base16$1;
	base16$2.base16upper = base16upper;

	var base36$2 = {};

	Object.defineProperty(base36$2, '__esModule', {
	  value: true
	});
	var base$2 = base$b;
	const base36$1 = base$2.baseX({
	  prefix: 'k',
	  name: 'base36',
	  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'
	});
	const base36upper = base$2.baseX({
	  prefix: 'K',
	  name: 'base36upper',
	  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
	});
	base36$2.base36 = base36$1;
	base36$2.base36upper = base36upper;

	var base64$2 = {};

	Object.defineProperty(base64$2, '__esModule', {
	  value: true
	});
	var base$1 = base$b;
	const base64$1 = base$1.rfc4648({
	  prefix: 'm',
	  name: 'base64',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
	  bitsPerChar: 6
	});
	const base64pad = base$1.rfc4648({
	  prefix: 'M',
	  name: 'base64pad',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
	  bitsPerChar: 6
	});
	const base64url = base$1.rfc4648({
	  prefix: 'u',
	  name: 'base64url',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',
	  bitsPerChar: 6
	});
	const base64urlpad = base$1.rfc4648({
	  prefix: 'U',
	  name: 'base64urlpad',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',
	  bitsPerChar: 6
	});
	base64$2.base64 = base64$1;
	base64$2.base64pad = base64pad;
	base64$2.base64url = base64url;
	base64$2.base64urlpad = base64urlpad;

	var base256emoji$2 = {};

	Object.defineProperty(base256emoji$2, '__esModule', {
	  value: true
	});
	var base = base$b;
	const alphabet = Array.from('\uD83D\uDE80\uD83E\uDE90\u2604\uD83D\uDEF0\uD83C\uDF0C\uD83C\uDF11\uD83C\uDF12\uD83C\uDF13\uD83C\uDF14\uD83C\uDF15\uD83C\uDF16\uD83C\uDF17\uD83C\uDF18\uD83C\uDF0D\uD83C\uDF0F\uD83C\uDF0E\uD83D\uDC09\u2600\uD83D\uDCBB\uD83D\uDDA5\uD83D\uDCBE\uD83D\uDCBF\uD83D\uDE02\u2764\uD83D\uDE0D\uD83E\uDD23\uD83D\uDE0A\uD83D\uDE4F\uD83D\uDC95\uD83D\uDE2D\uD83D\uDE18\uD83D\uDC4D\uD83D\uDE05\uD83D\uDC4F\uD83D\uDE01\uD83D\uDD25\uD83E\uDD70\uD83D\uDC94\uD83D\uDC96\uD83D\uDC99\uD83D\uDE22\uD83E\uDD14\uD83D\uDE06\uD83D\uDE44\uD83D\uDCAA\uD83D\uDE09\u263A\uD83D\uDC4C\uD83E\uDD17\uD83D\uDC9C\uD83D\uDE14\uD83D\uDE0E\uD83D\uDE07\uD83C\uDF39\uD83E\uDD26\uD83C\uDF89\uD83D\uDC9E\u270C\u2728\uD83E\uDD37\uD83D\uDE31\uD83D\uDE0C\uD83C\uDF38\uD83D\uDE4C\uD83D\uDE0B\uD83D\uDC97\uD83D\uDC9A\uD83D\uDE0F\uD83D\uDC9B\uD83D\uDE42\uD83D\uDC93\uD83E\uDD29\uD83D\uDE04\uD83D\uDE00\uD83D\uDDA4\uD83D\uDE03\uD83D\uDCAF\uD83D\uDE48\uD83D\uDC47\uD83C\uDFB6\uD83D\uDE12\uD83E\uDD2D\u2763\uD83D\uDE1C\uD83D\uDC8B\uD83D\uDC40\uD83D\uDE2A\uD83D\uDE11\uD83D\uDCA5\uD83D\uDE4B\uD83D\uDE1E\uD83D\uDE29\uD83D\uDE21\uD83E\uDD2A\uD83D\uDC4A\uD83E\uDD73\uD83D\uDE25\uD83E\uDD24\uD83D\uDC49\uD83D\uDC83\uD83D\uDE33\u270B\uD83D\uDE1A\uD83D\uDE1D\uD83D\uDE34\uD83C\uDF1F\uD83D\uDE2C\uD83D\uDE43\uD83C\uDF40\uD83C\uDF37\uD83D\uDE3B\uD83D\uDE13\u2B50\u2705\uD83E\uDD7A\uD83C\uDF08\uD83D\uDE08\uD83E\uDD18\uD83D\uDCA6\u2714\uD83D\uDE23\uD83C\uDFC3\uD83D\uDC90\u2639\uD83C\uDF8A\uD83D\uDC98\uD83D\uDE20\u261D\uD83D\uDE15\uD83C\uDF3A\uD83C\uDF82\uD83C\uDF3B\uD83D\uDE10\uD83D\uDD95\uD83D\uDC9D\uD83D\uDE4A\uD83D\uDE39\uD83D\uDDE3\uD83D\uDCAB\uD83D\uDC80\uD83D\uDC51\uD83C\uDFB5\uD83E\uDD1E\uD83D\uDE1B\uD83D\uDD34\uD83D\uDE24\uD83C\uDF3C\uD83D\uDE2B\u26BD\uD83E\uDD19\u2615\uD83C\uDFC6\uD83E\uDD2B\uD83D\uDC48\uD83D\uDE2E\uD83D\uDE46\uD83C\uDF7B\uD83C\uDF43\uD83D\uDC36\uD83D\uDC81\uD83D\uDE32\uD83C\uDF3F\uD83E\uDDE1\uD83C\uDF81\u26A1\uD83C\uDF1E\uD83C\uDF88\u274C\u270A\uD83D\uDC4B\uD83D\uDE30\uD83E\uDD28\uD83D\uDE36\uD83E\uDD1D\uD83D\uDEB6\uD83D\uDCB0\uD83C\uDF53\uD83D\uDCA2\uD83E\uDD1F\uD83D\uDE41\uD83D\uDEA8\uD83D\uDCA8\uD83E\uDD2C\u2708\uD83C\uDF80\uD83C\uDF7A\uD83E\uDD13\uD83D\uDE19\uD83D\uDC9F\uD83C\uDF31\uD83D\uDE16\uD83D\uDC76\uD83E\uDD74\u25B6\u27A1\u2753\uD83D\uDC8E\uD83D\uDCB8\u2B07\uD83D\uDE28\uD83C\uDF1A\uD83E\uDD8B\uD83D\uDE37\uD83D\uDD7A\u26A0\uD83D\uDE45\uD83D\uDE1F\uD83D\uDE35\uD83D\uDC4E\uD83E\uDD32\uD83E\uDD20\uD83E\uDD27\uD83D\uDCCC\uD83D\uDD35\uD83D\uDC85\uD83E\uDDD0\uD83D\uDC3E\uD83C\uDF52\uD83D\uDE17\uD83E\uDD11\uD83C\uDF0A\uD83E\uDD2F\uD83D\uDC37\u260E\uD83D\uDCA7\uD83D\uDE2F\uD83D\uDC86\uD83D\uDC46\uD83C\uDFA4\uD83D\uDE47\uD83C\uDF51\u2744\uD83C\uDF34\uD83D\uDCA3\uD83D\uDC38\uD83D\uDC8C\uD83D\uDCCD\uD83E\uDD40\uD83E\uDD22\uD83D\uDC45\uD83D\uDCA1\uD83D\uDCA9\uD83D\uDC50\uD83D\uDCF8\uD83D\uDC7B\uD83E\uDD10\uD83E\uDD2E\uD83C\uDFBC\uD83E\uDD75\uD83D\uDEA9\uD83C\uDF4E\uD83C\uDF4A\uD83D\uDC7C\uD83D\uDC8D\uD83D\uDCE3\uD83E\uDD42');
	const alphabetBytesToChars = alphabet.reduce((p, c, i) => {
	  p[i] = c;
	  return p;
	}, []);
	const alphabetCharsToBytes = alphabet.reduce((p, c, i) => {
	  p[c.codePointAt(0)] = i;
	  return p;
	}, []);
	function encode$3(data) {
	  return data.reduce((p, c) => {
	    p += alphabetBytesToChars[c];
	    return p;
	  }, '');
	}
	function decode$2(str) {
	  const byts = [];
	  for (const char of str) {
	    const byt = alphabetCharsToBytes[char.codePointAt(0)];
	    if (byt === undefined) {
	      throw new Error(`Non-base256emoji character: ${char}`);
	    }
	    byts.push(byt);
	  }
	  return new Uint8Array(byts);
	}
	const base256emoji$1 = base.from({
	  prefix: '\uD83D\uDE80',
	  name: 'base256emoji',
	  encode: encode$3,
	  decode: decode$2
	});
	base256emoji$2.base256emoji = base256emoji$1;

	var sha2$1 = {};

	var hasher$3 = {};

	Object.defineProperty(hasher$3, '__esModule', {
	  value: true
	});
	var digest$3 = digest$5;
	const from = ({
	  name,
	  code,
	  encode
	}) => new Hasher(name, code, encode);
	class Hasher {
	  constructor(name, code, encode) {
	    this.name = name;
	    this.code = code;
	    this.encode = encode;
	  }
	  digest(input) {
	    if (input instanceof Uint8Array) {
	      const result = this.encode(input);
	      return result instanceof Uint8Array ? digest$3.create(this.code, result) : result.then(digest$1 => digest$3.create(this.code, digest$1));
	    } else {
	      throw Error('Unknown type, must be binary type');
	    }
	  }
	}
	hasher$3.Hasher = Hasher;
	hasher$3.from = from;

	Object.defineProperty(sha2$1, '__esModule', {
	  value: true
	});
	var crypto = require$$0$1;
	var hasher$2 = hasher$3;
	var bytes$4 = bytes$9;
	function _interopDefaultLegacy(e) {
	  return e && typeof e === 'object' && 'default' in e ? e : {
	    'default': e
	  };
	}
	var crypto__default = /*#__PURE__*/_interopDefaultLegacy(crypto);
	const sha256 = hasher$2.from({
	  name: 'sha2-256',
	  code: 18,
	  encode: input => bytes$4.coerce(crypto__default["default"].createHash('sha256').update(input).digest())
	});
	const sha512 = hasher$2.from({
	  name: 'sha2-512',
	  code: 19,
	  encode: input => bytes$4.coerce(crypto__default["default"].createHash('sha512').update(input).digest())
	});
	sha2$1.sha256 = sha256;
	sha2$1.sha512 = sha512;

	var identity$3 = {};

	Object.defineProperty(identity$3, '__esModule', {
	  value: true
	});
	var bytes$3 = bytes$9;
	var digest$1$1 = digest$5;
	const code$2 = 0;
	const name$2 = 'identity';
	const encode$2 = bytes$3.coerce;
	const digest$2 = input => digest$1$1.create(code$2, encode$2(input));
	const identity$2 = {
	  code: code$2,
	  name: name$2,
	  encode: encode$2,
	  digest: digest$2
	};
	identity$3.identity = identity$2;

	var raw$1 = {};

	Object.defineProperty(raw$1, '__esModule', {
	  value: true
	});
	var bytes$2 = bytes$9;
	const name$1 = 'raw';
	const code$1 = 85;
	const encode$1 = node => bytes$2.coerce(node);
	const decode$1 = data => bytes$2.coerce(data);
	raw$1.code = code$1;
	raw$1.decode = decode$1;
	raw$1.encode = encode$1;
	raw$1.name = name$1;

	var json$1 = {};

	Object.defineProperty(json$1, '__esModule', {
	  value: true
	});
	const textEncoder = new TextEncoder();
	const textDecoder = new TextDecoder();
	const name = 'json';
	const code = 512;
	const encode = node => textEncoder.encode(JSON.stringify(node));
	const decode = data => JSON.parse(textDecoder.decode(data));
	json$1.code = code;
	json$1.decode = decode;
	json$1.encode = encode;
	json$1.name = name;

	var src = {};

	Object.defineProperty(src, '__esModule', {
	  value: true
	});
	var cid$1 = cid$2;
	var varint$1 = varint$5;
	var bytes$1 = bytes$9;
	var hasher$1 = hasher$3;
	var digest$1 = digest$5;
	src.CID = cid$1.CID;
	src.varint = varint$1;
	src.bytes = bytes$1;
	src.hasher = hasher$1;
	src.digest = digest$1;

	Object.defineProperty(basics$1, '__esModule', {
	  value: true
	});
	var identity = identity$5;
	var base2 = base2$2;
	var base8 = base8$2;
	var base10 = base10$2;
	var base16 = base16$2;
	var base32 = base32$3;
	var base36 = base36$2;
	var base58 = base58$2;
	var base64 = base64$2;
	var base256emoji = base256emoji$2;
	var sha2 = sha2$1;
	var identity$1 = identity$3;
	var raw = raw$1;
	var json = json$1;
	var cid = cid$2;
	var hasher = hasher$3;
	var digest = digest$5;
	var varint = varint$5;
	var bytes = bytes$9;
	const bases$3 = {
	  ...identity,
	  ...base2,
	  ...base8,
	  ...base10,
	  ...base16,
	  ...base32,
	  ...base36,
	  ...base58,
	  ...base64,
	  ...base256emoji
	};
	const hashes = {
	  ...sha2,
	  ...identity$1
	};
	const codecs = {
	  raw,
	  json
	};
	basics$1.CID = cid.CID;
	basics$1.hasher = hasher;
	basics$1.digest = digest;
	basics$1.varint = varint;
	basics$1.bytes = bytes;
	basics$1.bases = bases$3;
	basics$1.codecs = codecs;
	basics$1.hashes = hashes;

	var basics = basics$1;
	function createCodec(name, prefix, encode, decode) {
	  return {
	    name,
	    prefix,
	    encoder: {
	      name,
	      prefix,
	      encode
	    },
	    decoder: {
	      decode
	    }
	  };
	}
	const string = createCodec('utf8', 'u', buf => {
	  const decoder = new TextDecoder('utf8');
	  return 'u' + decoder.decode(buf);
	}, str => {
	  const encoder = new TextEncoder();
	  return encoder.encode(str.substring(1));
	});
	const ascii = createCodec('ascii', 'a', buf => {
	  let string = 'a';
	  for (let i = 0; i < buf.length; i++) {
	    string += String.fromCharCode(buf[i]);
	  }
	  return string;
	}, str => {
	  str = str.substring(1);
	  const buf = new Uint8Array(str.length);
	  for (let i = 0; i < str.length; i++) {
	    buf[i] = str.charCodeAt(i);
	  }
	  return buf;
	});
	const BASES = {
	  utf8: string,
	  'utf-8': string,
	  hex: basics.bases.base16,
	  latin1: ascii,
	  ascii: ascii,
	  binary: ascii,
	  ...basics.bases
	};
	var bases$2 = BASES;

	Object.defineProperty(fromString$2, '__esModule', {
	  value: true
	});
	var bases$1 = bases$2;
	function fromString$1(string, encoding = 'utf8') {
	  const base = bases$1[encoding];
	  if (!base) {
	    throw new Error(`Unsupported encoding "${encoding}"`);
	  }
	  return base.decoder.decode(`${base.prefix}${string}`);
	}
	fromString$2.fromString = fromString$1;

	var toString$3 = {};

	Object.defineProperty(toString$3, '__esModule', {
	  value: true
	});
	var bases = bases$2;
	function toString$2(array, encoding = 'utf8') {
	  const base = bases[encoding];
	  if (!base) {
	    throw new Error(`Unsupported encoding "${encoding}"`);
	  }
	  return base.encoder.encode(array).substring(1);
	}
	toString$3.toString = toString$2;

	var xor$2 = {};

	Object.defineProperty(xor$2, '__esModule', {
	  value: true
	});
	function xor$1(a, b) {
	  if (a.length !== b.length) {
	    throw new Error('Inputs should have the same length');
	  }
	  const result = new Uint8Array(a.length);
	  for (let i = 0; i < a.length; i++) {
	    result[i] = a[i] ^ b[i];
	  }
	  return result;
	}
	xor$2.xor = xor$1;

	Object.defineProperty(src$1, '__esModule', {
	  value: true
	});
	var compare = compare$2;
	var concat = concat$2;
	var equals = equals$2;
	var fromString = fromString$2;
	var toString$1 = toString$3;
	var xor = xor$2;
	src$1.compare = compare.compare;
	src$1.concat = concat.concat;
	src$1.equals = equals.equals;
	src$1.fromString = fromString.fromString;
	src$1.toString = toString$1.toString;
	src$1.xor = xor.xor;

	(function (exports) {

	  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = {
	        enumerable: true,
	        get: function () {
	          return m[k];
	        }
	      };
	    }
	    Object.defineProperty(o, k2, desc);
	  } : function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	  });
	  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
	    Object.defineProperty(o, "default", {
	      enumerable: true,
	      value: v
	    });
	  } : function (o, v) {
	    o["default"] = v;
	  });
	  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	  };
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.ipldEquals = exports.ipldToJson = exports.jsonToIpld = void 0;
	  const cid_1 = cid$2;
	  const ui8 = __importStar(src$1);
	  // @NOTE avoiding use of check.is() here only because it makes
	  // these implementations slow, and they often live in hot paths.
	  const jsonToIpld = val => {
	    // walk arrays
	    if (Array.isArray(val)) {
	      return val.map(item => (0, exports.jsonToIpld)(item));
	    }
	    // objects
	    if (val && typeof val === 'object') {
	      // check for dag json values
	      if (typeof val['$link'] === 'string' && Object.keys(val).length === 1) {
	        return cid_1.CID.parse(val['$link']);
	      }
	      if (typeof val['$bytes'] === 'string' && Object.keys(val).length === 1) {
	        return ui8.fromString(val['$bytes'], 'base64');
	      }
	      // walk plain objects
	      const toReturn = {};
	      for (const key of Object.keys(val)) {
	        toReturn[key] = (0, exports.jsonToIpld)(val[key]);
	      }
	      return toReturn;
	    }
	    // pass through
	    return val;
	  };
	  exports.jsonToIpld = jsonToIpld;
	  const ipldToJson = val => {
	    // walk arrays
	    if (Array.isArray(val)) {
	      return val.map(item => (0, exports.ipldToJson)(item));
	    }
	    // objects
	    if (val && typeof val === 'object') {
	      // convert bytes
	      if (val instanceof Uint8Array) {
	        return {
	          $bytes: ui8.toString(val, 'base64')
	        };
	      }
	      // convert cids
	      if (cid_1.CID.asCID(val)) {
	        return {
	          $link: val.toString()
	        };
	      }
	      // walk plain objects
	      const toReturn = {};
	      for (const key of Object.keys(val)) {
	        toReturn[key] = (0, exports.ipldToJson)(val[key]);
	      }
	      return toReturn;
	    }
	    // pass through
	    return val;
	  };
	  exports.ipldToJson = ipldToJson;
	  const ipldEquals = (a, b) => {
	    // walk arrays
	    if (Array.isArray(a) && Array.isArray(b)) {
	      if (a.length !== b.length) return false;
	      for (let i = 0; i < a.length; i++) {
	        if (!(0, exports.ipldEquals)(a[i], b[i])) return false;
	      }
	      return true;
	    }
	    // objects
	    if (a && b && typeof a === 'object' && typeof b === 'object') {
	      // check bytes
	      if (a instanceof Uint8Array && b instanceof Uint8Array) {
	        return ui8.equals(a, b);
	      }
	      // check cids
	      if (cid_1.CID.asCID(a) && cid_1.CID.asCID(b)) {
	        return cid_1.CID.asCID(a)?.equals(cid_1.CID.asCID(b));
	      }
	      // walk plain objects
	      if (Object.keys(a).length !== Object.keys(b).length) return false;
	      for (const key of Object.keys(a)) {
	        if (!(0, exports.ipldEquals)(a[key], b[key])) return false;
	      }
	      return true;
	    }
	    return a === b;
	  };
	  exports.ipldEquals = ipldEquals;
	})(ipld);

	var retry$1 = {};

	Object.defineProperty(retry$1, "__esModule", {
	  value: true
	});
	retry$1.backoffMs = retry$1.retry = void 0;
	const util_1$L = util$5;
	async function retry(fn, opts = {}) {
	  const {
	    maxRetries = 3,
	    retryable = () => true,
	    getWaitMs = backoffMs
	  } = opts;
	  let retries = 0;
	  let doneError;
	  while (!doneError) {
	    try {
	      return await fn();
	    } catch (err) {
	      const waitMs = getWaitMs(retries);
	      const willRetry = retries < maxRetries && waitMs !== null && retryable(err);
	      if (willRetry) {
	        retries += 1;
	        if (waitMs !== 0) {
	          await (0, util_1$L.wait)(waitMs);
	        }
	      } else {
	        doneError = err;
	      }
	    }
	  }
	  throw doneError;
	}
	retry$1.retry = retry;
	// Waits exponential backoff with max and jitter: ~100, ~200, ~400, ~800, ~1000, ~1000, ...
	function backoffMs(n, multiplier = 100, max = 1000) {
	  const exponentialMs = Math.pow(2, n) * multiplier;
	  const ms = Math.min(exponentialMs, max);
	  return jitter(ms);
	}
	retry$1.backoffMs = backoffMs;
	// Adds randomness +/-15% of value
	function jitter(value) {
	  const delta = value * 0.15;
	  return value + randomRange(-delta, delta);
	}
	function randomRange(from, to) {
	  const rand = Math.random() * (to - from);
	  return rand + from;
	}

	var types$3 = {};

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.def = exports.schema = void 0;
	  const cid_1 = cid$2;
	  const zod_1 = lib$1;
	  const cidSchema = zod_1.z.any().refine(obj => cid_1.CID.asCID(obj) !== null, {
	    message: 'Not a CID'
	  }).transform(obj => cid_1.CID.asCID(obj));
	  exports.schema = {
	    cid: cidSchema,
	    bytes: zod_1.z.instanceof(Uint8Array),
	    string: zod_1.z.string(),
	    array: zod_1.z.array(zod_1.z.unknown()),
	    map: zod_1.z.record(zod_1.z.string(), zod_1.z.unknown()),
	    unknown: zod_1.z.unknown()
	  };
	  exports.def = {
	    cid: {
	      name: 'cid',
	      schema: exports.schema.cid
	    },
	    bytes: {
	      name: 'bytes',
	      schema: exports.schema.bytes
	    },
	    string: {
	      name: 'string',
	      schema: exports.schema.string
	    },
	    map: {
	      name: 'map',
	      schema: exports.schema.map
	    },
	    unknown: {
	      name: 'unknown',
	      schema: exports.schema.unknown
	    }
	  };
	})(types$3);

	var times = {};

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.addHoursToDate = exports.lessThanAgoMs = exports.DAY = exports.HOUR = exports.MINUTE = exports.SECOND = void 0;
	  exports.SECOND = 1000;
	  exports.MINUTE = exports.SECOND * 60;
	  exports.HOUR = exports.MINUTE * 60;
	  exports.DAY = exports.HOUR * 24;
	  const lessThanAgoMs = (time, range) => {
	    return Date.now() < time.getTime() + range;
	  };
	  exports.lessThanAgoMs = lessThanAgoMs;
	  const addHoursToDate = (hours, startingDate) => {
	    // When date is passed, clone before calling `setHours()` so that we are not mutating the original date
	    const currentDate = startingDate ? new Date(startingDate) : new Date();
	    currentDate.setHours(currentDate.getHours() + hours);
	    return currentDate;
	  };
	  exports.addHoursToDate = addHoursToDate;
	})(times);

	var strings = {};

	var lib = {};

	var Graphemer$1 = {};

	var boundaries = {};

	(function (exports) {

	  /**
	   * The Grapheme_Cluster_Break property value
	   * @see https://www.unicode.org/reports/tr29/#Default_Grapheme_Cluster_Table
	   */
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.EXTENDED_PICTOGRAPHIC = exports.CLUSTER_BREAK = void 0;
	  (function (CLUSTER_BREAK) {
	    CLUSTER_BREAK[CLUSTER_BREAK["CR"] = 0] = "CR";
	    CLUSTER_BREAK[CLUSTER_BREAK["LF"] = 1] = "LF";
	    CLUSTER_BREAK[CLUSTER_BREAK["CONTROL"] = 2] = "CONTROL";
	    CLUSTER_BREAK[CLUSTER_BREAK["EXTEND"] = 3] = "EXTEND";
	    CLUSTER_BREAK[CLUSTER_BREAK["REGIONAL_INDICATOR"] = 4] = "REGIONAL_INDICATOR";
	    CLUSTER_BREAK[CLUSTER_BREAK["SPACINGMARK"] = 5] = "SPACINGMARK";
	    CLUSTER_BREAK[CLUSTER_BREAK["L"] = 6] = "L";
	    CLUSTER_BREAK[CLUSTER_BREAK["V"] = 7] = "V";
	    CLUSTER_BREAK[CLUSTER_BREAK["T"] = 8] = "T";
	    CLUSTER_BREAK[CLUSTER_BREAK["LV"] = 9] = "LV";
	    CLUSTER_BREAK[CLUSTER_BREAK["LVT"] = 10] = "LVT";
	    CLUSTER_BREAK[CLUSTER_BREAK["OTHER"] = 11] = "OTHER";
	    CLUSTER_BREAK[CLUSTER_BREAK["PREPEND"] = 12] = "PREPEND";
	    CLUSTER_BREAK[CLUSTER_BREAK["E_BASE"] = 13] = "E_BASE";
	    CLUSTER_BREAK[CLUSTER_BREAK["E_MODIFIER"] = 14] = "E_MODIFIER";
	    CLUSTER_BREAK[CLUSTER_BREAK["ZWJ"] = 15] = "ZWJ";
	    CLUSTER_BREAK[CLUSTER_BREAK["GLUE_AFTER_ZWJ"] = 16] = "GLUE_AFTER_ZWJ";
	    CLUSTER_BREAK[CLUSTER_BREAK["E_BASE_GAZ"] = 17] = "E_BASE_GAZ";
	  })(exports.CLUSTER_BREAK || (exports.CLUSTER_BREAK = {}));
	  /**
	   * The Emoji character property is an extension of UCD but shares the same namespace and structure
	   * @see http://www.unicode.org/reports/tr51/tr51-14.html#Emoji_Properties_and_Data_Files
	   *
	   * Here we model Extended_Pictograhpic only to implement UAX #29 GB11
	   * \p{Extended_Pictographic} Extend* ZWJ	×	\p{Extended_Pictographic}
	   *
	   * The Emoji character property should not be mixed with Grapheme_Cluster_Break since they are not exclusive
	   */
	  exports.EXTENDED_PICTOGRAPHIC = 101;
	})(boundaries);

	var GraphemerHelper$1 = {};

	Object.defineProperty(GraphemerHelper$1, "__esModule", {
	  value: true
	});
	const boundaries_1$1 = boundaries;
	// BreakTypes
	// @type {BreakType}
	const NotBreak = 0;
	const BreakStart = 1;
	const Break = 2;
	const BreakLastRegional = 3;
	const BreakPenultimateRegional = 4;
	class GraphemerHelper {
	  /**
	   * Check if the the character at the position {pos} of the string is surrogate
	   * @param str {string}
	   * @param pos {number}
	   * @returns {boolean}
	   */
	  static isSurrogate(str, pos) {
	    return 0xd800 <= str.charCodeAt(pos) && str.charCodeAt(pos) <= 0xdbff && 0xdc00 <= str.charCodeAt(pos + 1) && str.charCodeAt(pos + 1) <= 0xdfff;
	  }
	  /**
	   * The String.prototype.codePointAt polyfill
	   * Private function, gets a Unicode code point from a JavaScript UTF-16 string
	   * handling surrogate pairs appropriately
	   * @param str {string}
	   * @param idx {number}
	   * @returns {number}
	   */
	  static codePointAt(str, idx) {
	    if (idx === undefined) {
	      idx = 0;
	    }
	    const code = str.charCodeAt(idx);
	    // if a high surrogate
	    if (0xd800 <= code && code <= 0xdbff && idx < str.length - 1) {
	      const hi = code;
	      const low = str.charCodeAt(idx + 1);
	      if (0xdc00 <= low && low <= 0xdfff) {
	        return (hi - 0xd800) * 0x400 + (low - 0xdc00) + 0x10000;
	      }
	      return hi;
	    }
	    // if a low surrogate
	    if (0xdc00 <= code && code <= 0xdfff && idx >= 1) {
	      const hi = str.charCodeAt(idx - 1);
	      const low = code;
	      if (0xd800 <= hi && hi <= 0xdbff) {
	        return (hi - 0xd800) * 0x400 + (low - 0xdc00) + 0x10000;
	      }
	      return low;
	    }
	    // just return the char if an unmatched surrogate half or a
	    // single-char codepoint
	    return code;
	  }
	  //
	  /**
	   * Private function, returns whether a break is allowed between the two given grapheme breaking classes
	   * Implemented the UAX #29 3.1.1 Grapheme Cluster Boundary Rules on extended grapheme clusters
	   * @param start {number}
	   * @param mid {Array<number>}
	   * @param end {number}
	   * @param startEmoji {number}
	   * @param midEmoji {Array<number>}
	   * @param endEmoji {number}
	   * @returns {number}
	   */
	  static shouldBreak(start, mid, end, startEmoji, midEmoji, endEmoji) {
	    const all = [start].concat(mid).concat([end]);
	    const allEmoji = [startEmoji].concat(midEmoji).concat([endEmoji]);
	    const previous = all[all.length - 2];
	    const next = end;
	    const nextEmoji = endEmoji;
	    // Lookahead terminator for:
	    // GB12. ^ (RI RI)* RI ? RI
	    // GB13. [^RI] (RI RI)* RI ? RI
	    const rIIndex = all.lastIndexOf(boundaries_1$1.CLUSTER_BREAK.REGIONAL_INDICATOR);
	    if (rIIndex > 0 && all.slice(1, rIIndex).every(function (c) {
	      return c === boundaries_1$1.CLUSTER_BREAK.REGIONAL_INDICATOR;
	    }) && [boundaries_1$1.CLUSTER_BREAK.PREPEND, boundaries_1$1.CLUSTER_BREAK.REGIONAL_INDICATOR].indexOf(previous) === -1) {
	      if (all.filter(function (c) {
	        return c === boundaries_1$1.CLUSTER_BREAK.REGIONAL_INDICATOR;
	      }).length % 2 === 1) {
	        return BreakLastRegional;
	      } else {
	        return BreakPenultimateRegional;
	      }
	    }
	    // GB3. CR × LF
	    if (previous === boundaries_1$1.CLUSTER_BREAK.CR && next === boundaries_1$1.CLUSTER_BREAK.LF) {
	      return NotBreak;
	    }
	    // GB4. (Control|CR|LF) ÷
	    else if (previous === boundaries_1$1.CLUSTER_BREAK.CONTROL || previous === boundaries_1$1.CLUSTER_BREAK.CR || previous === boundaries_1$1.CLUSTER_BREAK.LF) {
	      return BreakStart;
	    }
	    // GB5. ÷ (Control|CR|LF)
	    else if (next === boundaries_1$1.CLUSTER_BREAK.CONTROL || next === boundaries_1$1.CLUSTER_BREAK.CR || next === boundaries_1$1.CLUSTER_BREAK.LF) {
	      return BreakStart;
	    }
	    // GB6. L × (L|V|LV|LVT)
	    else if (previous === boundaries_1$1.CLUSTER_BREAK.L && (next === boundaries_1$1.CLUSTER_BREAK.L || next === boundaries_1$1.CLUSTER_BREAK.V || next === boundaries_1$1.CLUSTER_BREAK.LV || next === boundaries_1$1.CLUSTER_BREAK.LVT)) {
	      return NotBreak;
	    }
	    // GB7. (LV|V) × (V|T)
	    else if ((previous === boundaries_1$1.CLUSTER_BREAK.LV || previous === boundaries_1$1.CLUSTER_BREAK.V) && (next === boundaries_1$1.CLUSTER_BREAK.V || next === boundaries_1$1.CLUSTER_BREAK.T)) {
	      return NotBreak;
	    }
	    // GB8. (LVT|T) × (T)
	    else if ((previous === boundaries_1$1.CLUSTER_BREAK.LVT || previous === boundaries_1$1.CLUSTER_BREAK.T) && next === boundaries_1$1.CLUSTER_BREAK.T) {
	      return NotBreak;
	    }
	    // GB9. × (Extend|ZWJ)
	    else if (next === boundaries_1$1.CLUSTER_BREAK.EXTEND || next === boundaries_1$1.CLUSTER_BREAK.ZWJ) {
	      return NotBreak;
	    }
	    // GB9a. × SpacingMark
	    else if (next === boundaries_1$1.CLUSTER_BREAK.SPACINGMARK) {
	      return NotBreak;
	    }
	    // GB9b. Prepend ×
	    else if (previous === boundaries_1$1.CLUSTER_BREAK.PREPEND) {
	      return NotBreak;
	    }
	    // GB11. \p{Extended_Pictographic} Extend* ZWJ × \p{Extended_Pictographic}
	    const previousNonExtendIndex = allEmoji.slice(0, -1).lastIndexOf(boundaries_1$1.EXTENDED_PICTOGRAPHIC);
	    if (previousNonExtendIndex !== -1 && allEmoji[previousNonExtendIndex] === boundaries_1$1.EXTENDED_PICTOGRAPHIC && all.slice(previousNonExtendIndex + 1, -2).every(function (c) {
	      return c === boundaries_1$1.CLUSTER_BREAK.EXTEND;
	    }) && previous === boundaries_1$1.CLUSTER_BREAK.ZWJ && nextEmoji === boundaries_1$1.EXTENDED_PICTOGRAPHIC) {
	      return NotBreak;
	    }
	    // GB12. ^ (RI RI)* RI × RI
	    // GB13. [^RI] (RI RI)* RI × RI
	    if (mid.indexOf(boundaries_1$1.CLUSTER_BREAK.REGIONAL_INDICATOR) !== -1) {
	      return Break;
	    }
	    if (previous === boundaries_1$1.CLUSTER_BREAK.REGIONAL_INDICATOR && next === boundaries_1$1.CLUSTER_BREAK.REGIONAL_INDICATOR) {
	      return NotBreak;
	    }
	    // GB999. Any ? Any
	    return BreakStart;
	  }
	}
	GraphemerHelper$1.default = GraphemerHelper;

	var GraphemerIterator$1 = {};

	Object.defineProperty(GraphemerIterator$1, "__esModule", {
	  value: true
	});
	/**
	 * GraphemerIterator
	 *
	 * Takes a string and a "BreakHandler" method during initialisation
	 * and creates an iterable object that returns individual graphemes.
	 *
	 * @param str {string}
	 * @return GraphemerIterator
	 */
	class GraphemerIterator {
	  constructor(str, nextBreak) {
	    this._index = 0;
	    this._str = str;
	    this._nextBreak = nextBreak;
	  }
	  [Symbol.iterator]() {
	    return this;
	  }
	  next() {
	    let brk;
	    if ((brk = this._nextBreak(this._str, this._index)) < this._str.length) {
	      const value = this._str.slice(this._index, brk);
	      this._index = brk;
	      return {
	        value: value,
	        done: false
	      };
	    }
	    if (this._index < this._str.length) {
	      const value = this._str.slice(this._index);
	      this._index = this._str.length;
	      return {
	        value: value,
	        done: false
	      };
	    }
	    return {
	      value: undefined,
	      done: true
	    };
	  }
	}
	GraphemerIterator$1.default = GraphemerIterator;

	var __importDefault$3=commonjsGlobal&&commonjsGlobal.__importDefault||function(mod){return mod&&mod.__esModule?mod:{"default":mod};};Object.defineProperty(Graphemer$1,"__esModule",{value:true});const boundaries_1=boundaries;const GraphemerHelper_1=__importDefault$3(GraphemerHelper$1);const GraphemerIterator_1=__importDefault$3(GraphemerIterator$1);class Graphemer{/**
	     * Returns the next grapheme break in the string after the given index
	     * @param string {string}
	     * @param index {number}
	     * @returns {number}
	     */static nextBreak(string,index){if(index===undefined){index=0;}if(index<0){return 0;}if(index>=string.length-1){return string.length;}const prevCP=GraphemerHelper_1.default.codePointAt(string,index);const prev=Graphemer.getGraphemeBreakProperty(prevCP);const prevEmoji=Graphemer.getEmojiProperty(prevCP);const mid=[];const midEmoji=[];for(let i=index+1;i<string.length;i++){// check for already processed low surrogates
	if(GraphemerHelper_1.default.isSurrogate(string,i-1)){continue;}const nextCP=GraphemerHelper_1.default.codePointAt(string,i);const next=Graphemer.getGraphemeBreakProperty(nextCP);const nextEmoji=Graphemer.getEmojiProperty(nextCP);if(GraphemerHelper_1.default.shouldBreak(prev,mid,next,prevEmoji,midEmoji,nextEmoji)){return i;}mid.push(next);midEmoji.push(nextEmoji);}return string.length;}/**
	     * Breaks the given string into an array of grapheme clusters
	     * @param str {string}
	     * @returns {string[]}
	     */splitGraphemes(str){const res=[];let index=0;let brk;while((brk=Graphemer.nextBreak(str,index))<str.length){res.push(str.slice(index,brk));index=brk;}if(index<str.length){res.push(str.slice(index));}return res;}/**
	     * Returns an iterator of grapheme clusters in the given string
	     * @param str {string}
	     * @returns {GraphemerIterator}
	     */iterateGraphemes(str){return new GraphemerIterator_1.default(str,Graphemer.nextBreak);}/**
	     * Returns the number of grapheme clusters in the given string
	     * @param str {string}
	     * @returns {number}
	     */countGraphemes(str){let count=0;let index=0;let brk;while((brk=Graphemer.nextBreak(str,index))<str.length){index=brk;count++;}if(index<str.length){count++;}return count;}/**
	     * Given a Unicode code point, determines this symbol's grapheme break property
	     * @param code {number} Unicode code point
	     * @returns {number}
	     */static getGraphemeBreakProperty(code){// Grapheme break property taken from:
	// https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakProperty.txt
	// and generated by
	// node ./scripts/generate-grapheme-break.js
	if(code<0xbf09){if(code<0xac54){if(code<0x102d){if(code<0xb02){if(code<0x93b){if(code<0x6df){if(code<0x5bf){if(code<0x7f){if(code<0xb){if(code<0xa){// Cc  [10] <control-0000>..<control-0009>
	if(0x0<=code&&code<=0x9){return boundaries_1.CLUSTER_BREAK.CONTROL;}}else {// Cc       <control-000A>
	if(0xa===code){return boundaries_1.CLUSTER_BREAK.LF;}}}else {if(code<0xd){// Cc   [2] <control-000B>..<control-000C>
	if(0xb<=code&&code<=0xc){return boundaries_1.CLUSTER_BREAK.CONTROL;}}else {if(code<0xe){// Cc       <control-000D>
	if(0xd===code){return boundaries_1.CLUSTER_BREAK.CR;}}else {// Cc  [18] <control-000E>..<control-001F>
	if(0xe<=code&&code<=0x1f){return boundaries_1.CLUSTER_BREAK.CONTROL;}}}}}else {if(code<0x300){if(code<0xad){// Cc  [33] <control-007F>..<control-009F>
	if(0x7f<=code&&code<=0x9f){return boundaries_1.CLUSTER_BREAK.CONTROL;}}else {// Cf       SOFT HYPHEN
	if(0xad===code){return boundaries_1.CLUSTER_BREAK.CONTROL;}}}else {if(code<0x483){// Mn [112] COMBINING GRAVE ACCENT..COMBINING LATIN SMALL LETTER X
	if(0x300<=code&&code<=0x36f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x591){// Mn   [5] COMBINING CYRILLIC TITLO..COMBINING CYRILLIC POKRYTIE
	// Me   [2] COMBINING CYRILLIC HUNDRED THOUSANDS SIGN..COMBINING CYRILLIC MILLIONS SIGN
	if(0x483<=code&&code<=0x489){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn  [45] HEBREW ACCENT ETNAHTA..HEBREW POINT METEG
	if(0x591<=code&&code<=0x5bd){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0x610){if(code<0x5c4){if(code<0x5c1){// Mn       HEBREW POINT RAFE
	if(0x5bf===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] HEBREW POINT SHIN DOT..HEBREW POINT SIN DOT
	if(0x5c1<=code&&code<=0x5c2){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x5c7){// Mn   [2] HEBREW MARK UPPER DOT..HEBREW MARK LOWER DOT
	if(0x5c4<=code&&code<=0x5c5){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x600){// Mn       HEBREW POINT QAMATS QATAN
	if(0x5c7===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Cf   [6] ARABIC NUMBER SIGN..ARABIC NUMBER MARK ABOVE
	if(0x600<=code&&code<=0x605){return boundaries_1.CLUSTER_BREAK.PREPEND;}}}}}else {if(code<0x670){if(code<0x61c){// Mn  [11] ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM..ARABIC SMALL KASRA
	if(0x610<=code&&code<=0x61a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x64b){// Cf       ARABIC LETTER MARK
	if(0x61c===code){return boundaries_1.CLUSTER_BREAK.CONTROL;}}else {// Mn  [21] ARABIC FATHATAN..ARABIC WAVY HAMZA BELOW
	if(0x64b<=code&&code<=0x65f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x6d6){// Mn       ARABIC LETTER SUPERSCRIPT ALEF
	if(0x670===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x6dd){// Mn   [7] ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA..ARABIC SMALL HIGH SEEN
	if(0x6d6<=code&&code<=0x6dc){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Cf       ARABIC END OF AYAH
	if(0x6dd===code){return boundaries_1.CLUSTER_BREAK.PREPEND;}}}}}}}else {if(code<0x81b){if(code<0x730){if(code<0x6ea){if(code<0x6e7){// Mn   [6] ARABIC SMALL HIGH ROUNDED ZERO..ARABIC SMALL HIGH MADDA
	if(0x6df<=code&&code<=0x6e4){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] ARABIC SMALL HIGH YEH..ARABIC SMALL HIGH NOON
	if(0x6e7<=code&&code<=0x6e8){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x70f){// Mn   [4] ARABIC EMPTY CENTRE LOW STOP..ARABIC SMALL LOW MEEM
	if(0x6ea<=code&&code<=0x6ed){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Cf       SYRIAC ABBREVIATION MARK
	if(0x70f===code){return boundaries_1.CLUSTER_BREAK.PREPEND;}// Mn       SYRIAC LETTER SUPERSCRIPT ALAPH
	if(0x711===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x7eb){if(code<0x7a6){// Mn  [27] SYRIAC PTHAHA ABOVE..SYRIAC BARREKH
	if(0x730<=code&&code<=0x74a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn  [11] THAANA ABAFILI..THAANA SUKUN
	if(0x7a6<=code&&code<=0x7b0){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x7fd){// Mn   [9] NKO COMBINING SHORT HIGH TONE..NKO COMBINING DOUBLE DOT ABOVE
	if(0x7eb<=code&&code<=0x7f3){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x816){// Mn       NKO DANTAYALAN
	if(0x7fd===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [4] SAMARITAN MARK IN..SAMARITAN MARK DAGESH
	if(0x816<=code&&code<=0x819){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0x898){if(code<0x829){if(code<0x825){// Mn   [9] SAMARITAN MARK EPENTHETIC YUT..SAMARITAN VOWEL SIGN A
	if(0x81b<=code&&code<=0x823){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [3] SAMARITAN VOWEL SIGN SHORT A..SAMARITAN VOWEL SIGN U
	if(0x825<=code&&code<=0x827){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x859){// Mn   [5] SAMARITAN VOWEL SIGN LONG I..SAMARITAN MARK NEQUDAA
	if(0x829<=code&&code<=0x82d){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x890){// Mn   [3] MANDAIC AFFRICATION MARK..MANDAIC GEMINATION MARK
	if(0x859<=code&&code<=0x85b){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Cf   [2] ARABIC POUND MARK ABOVE..ARABIC PIASTRE MARK ABOVE
	if(0x890<=code&&code<=0x891){return boundaries_1.CLUSTER_BREAK.PREPEND;}}}}}else {if(code<0x8e3){if(code<0x8ca){// Mn   [8] ARABIC SMALL HIGH WORD AL-JUZ..ARABIC HALF MADDA OVER MADDA
	if(0x898<=code&&code<=0x89f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x8e2){// Mn  [24] ARABIC SMALL HIGH FARSI YEH..ARABIC SMALL HIGH SIGN SAFHA
	if(0x8ca<=code&&code<=0x8e1){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Cf       ARABIC DISPUTED END OF AYAH
	if(0x8e2===code){return boundaries_1.CLUSTER_BREAK.PREPEND;}}}}else {if(code<0x903){// Mn  [32] ARABIC TURNED DAMMA BELOW..DEVANAGARI SIGN ANUSVARA
	if(0x8e3<=code&&code<=0x902){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       DEVANAGARI SIGN VISARGA
	if(0x903===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       DEVANAGARI VOWEL SIGN OE
	if(0x93a===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}else {if(code<0xa01){if(code<0x982){if(code<0x94d){if(code<0x93e){// Mc       DEVANAGARI VOWEL SIGN OOE
	if(0x93b===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       DEVANAGARI SIGN NUKTA
	if(0x93c===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x941){// Mc   [3] DEVANAGARI VOWEL SIGN AA..DEVANAGARI VOWEL SIGN II
	if(0x93e<=code&&code<=0x940){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x949){// Mn   [8] DEVANAGARI VOWEL SIGN U..DEVANAGARI VOWEL SIGN AI
	if(0x941<=code&&code<=0x948){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [4] DEVANAGARI VOWEL SIGN CANDRA O..DEVANAGARI VOWEL SIGN AU
	if(0x949<=code&&code<=0x94c){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0x951){if(code<0x94e){// Mn       DEVANAGARI SIGN VIRAMA
	if(0x94d===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] DEVANAGARI VOWEL SIGN PRISHTHAMATRA E..DEVANAGARI VOWEL SIGN AW
	if(0x94e<=code&&code<=0x94f){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x962){// Mn   [7] DEVANAGARI STRESS SIGN UDATTA..DEVANAGARI VOWEL SIGN UUE
	if(0x951<=code&&code<=0x957){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x981){// Mn   [2] DEVANAGARI VOWEL SIGN VOCALIC L..DEVANAGARI VOWEL SIGN VOCALIC LL
	if(0x962<=code&&code<=0x963){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       BENGALI SIGN CANDRABINDU
	if(0x981===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0x9c7){if(code<0x9be){if(code<0x9bc){// Mc   [2] BENGALI SIGN ANUSVARA..BENGALI SIGN VISARGA
	if(0x982<=code&&code<=0x983){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       BENGALI SIGN NUKTA
	if(0x9bc===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x9bf){// Mc       BENGALI VOWEL SIGN AA
	if(0x9be===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x9c1){// Mc   [2] BENGALI VOWEL SIGN I..BENGALI VOWEL SIGN II
	if(0x9bf<=code&&code<=0x9c0){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [4] BENGALI VOWEL SIGN U..BENGALI VOWEL SIGN VOCALIC RR
	if(0x9c1<=code&&code<=0x9c4){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x9d7){if(code<0x9cb){// Mc   [2] BENGALI VOWEL SIGN E..BENGALI VOWEL SIGN AI
	if(0x9c7<=code&&code<=0x9c8){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x9cd){// Mc   [2] BENGALI VOWEL SIGN O..BENGALI VOWEL SIGN AU
	if(0x9cb<=code&&code<=0x9cc){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       BENGALI SIGN VIRAMA
	if(0x9cd===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x9e2){// Mc       BENGALI AU LENGTH MARK
	if(0x9d7===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x9fe){// Mn   [2] BENGALI VOWEL SIGN VOCALIC L..BENGALI VOWEL SIGN VOCALIC LL
	if(0x9e2<=code&&code<=0x9e3){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       BENGALI SANDHI MARK
	if(0x9fe===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}else {if(code<0xa83){if(code<0xa47){if(code<0xa3c){if(code<0xa03){// Mn   [2] GURMUKHI SIGN ADAK BINDI..GURMUKHI SIGN BINDI
	if(0xa01<=code&&code<=0xa02){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       GURMUKHI SIGN VISARGA
	if(0xa03===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0xa3e){// Mn       GURMUKHI SIGN NUKTA
	if(0xa3c===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xa41){// Mc   [3] GURMUKHI VOWEL SIGN AA..GURMUKHI VOWEL SIGN II
	if(0xa3e<=code&&code<=0xa40){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] GURMUKHI VOWEL SIGN U..GURMUKHI VOWEL SIGN UU
	if(0xa41<=code&&code<=0xa42){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0xa70){if(code<0xa4b){// Mn   [2] GURMUKHI VOWEL SIGN EE..GURMUKHI VOWEL SIGN AI
	if(0xa47<=code&&code<=0xa48){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xa51){// Mn   [3] GURMUKHI VOWEL SIGN OO..GURMUKHI SIGN VIRAMA
	if(0xa4b<=code&&code<=0xa4d){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       GURMUKHI SIGN UDAAT
	if(0xa51===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0xa75){// Mn   [2] GURMUKHI TIPPI..GURMUKHI ADDAK
	if(0xa70<=code&&code<=0xa71){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xa81){// Mn       GURMUKHI SIGN YAKASH
	if(0xa75===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] GUJARATI SIGN CANDRABINDU..GUJARATI SIGN ANUSVARA
	if(0xa81<=code&&code<=0xa82){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0xac9){if(code<0xabe){// Mc       GUJARATI SIGN VISARGA
	if(0xa83===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       GUJARATI SIGN NUKTA
	if(0xabc===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xac1){// Mc   [3] GUJARATI VOWEL SIGN AA..GUJARATI VOWEL SIGN II
	if(0xabe<=code&&code<=0xac0){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0xac7){// Mn   [5] GUJARATI VOWEL SIGN U..GUJARATI VOWEL SIGN CANDRA E
	if(0xac1<=code&&code<=0xac5){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] GUJARATI VOWEL SIGN E..GUJARATI VOWEL SIGN AI
	if(0xac7<=code&&code<=0xac8){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0xae2){if(code<0xacb){// Mc       GUJARATI VOWEL SIGN CANDRA O
	if(0xac9===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0xacd){// Mc   [2] GUJARATI VOWEL SIGN O..GUJARATI VOWEL SIGN AU
	if(0xacb<=code&&code<=0xacc){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       GUJARATI SIGN VIRAMA
	if(0xacd===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0xafa){// Mn   [2] GUJARATI VOWEL SIGN VOCALIC L..GUJARATI VOWEL SIGN VOCALIC LL
	if(0xae2<=code&&code<=0xae3){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xb01){// Mn   [6] GUJARATI SIGN SUKUN..GUJARATI SIGN TWO-CIRCLE NUKTA ABOVE
	if(0xafa<=code&&code<=0xaff){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       ORIYA SIGN CANDRABINDU
	if(0xb01===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}}}else {if(code<0xcf3){if(code<0xc04){if(code<0xb82){if(code<0xb47){if(code<0xb3e){if(code<0xb3c){// Mc   [2] ORIYA SIGN ANUSVARA..ORIYA SIGN VISARGA
	if(0xb02<=code&&code<=0xb03){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       ORIYA SIGN NUKTA
	if(0xb3c===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0xb40){// Mc       ORIYA VOWEL SIGN AA
	// Mn       ORIYA VOWEL SIGN I
	if(0xb3e<=code&&code<=0xb3f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xb41){// Mc       ORIYA VOWEL SIGN II
	if(0xb40===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [4] ORIYA VOWEL SIGN U..ORIYA VOWEL SIGN VOCALIC RR
	if(0xb41<=code&&code<=0xb44){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0xb4d){if(code<0xb4b){// Mc   [2] ORIYA VOWEL SIGN E..ORIYA VOWEL SIGN AI
	if(0xb47<=code&&code<=0xb48){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mc   [2] ORIYA VOWEL SIGN O..ORIYA VOWEL SIGN AU
	if(0xb4b<=code&&code<=0xb4c){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0xb55){// Mn       ORIYA SIGN VIRAMA
	if(0xb4d===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xb62){// Mn   [2] ORIYA SIGN OVERLINE..ORIYA AI LENGTH MARK
	// Mc       ORIYA AU LENGTH MARK
	if(0xb55<=code&&code<=0xb57){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] ORIYA VOWEL SIGN VOCALIC L..ORIYA VOWEL SIGN VOCALIC LL
	if(0xb62<=code&&code<=0xb63){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0xbc6){if(code<0xbbf){// Mn       TAMIL SIGN ANUSVARA
	if(0xb82===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mc       TAMIL VOWEL SIGN AA
	if(0xbbe===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xbc0){// Mc       TAMIL VOWEL SIGN I
	if(0xbbf===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0xbc1){// Mn       TAMIL VOWEL SIGN II
	if(0xbc0===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] TAMIL VOWEL SIGN U..TAMIL VOWEL SIGN UU
	if(0xbc1<=code&&code<=0xbc2){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0xbd7){if(code<0xbca){// Mc   [3] TAMIL VOWEL SIGN E..TAMIL VOWEL SIGN AI
	if(0xbc6<=code&&code<=0xbc8){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0xbcd){// Mc   [3] TAMIL VOWEL SIGN O..TAMIL VOWEL SIGN AU
	if(0xbca<=code&&code<=0xbcc){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       TAMIL SIGN VIRAMA
	if(0xbcd===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0xc00){// Mc       TAMIL AU LENGTH MARK
	if(0xbd7===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xc01){// Mn       TELUGU SIGN COMBINING CANDRABINDU ABOVE
	if(0xc00===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [3] TELUGU SIGN CANDRABINDU..TELUGU SIGN VISARGA
	if(0xc01<=code&&code<=0xc03){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}}}else {if(code<0xcbe){if(code<0xc4a){if(code<0xc3e){// Mn       TELUGU SIGN COMBINING ANUSVARA ABOVE
	if(0xc04===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mn       TELUGU SIGN NUKTA
	if(0xc3c===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xc41){// Mn   [3] TELUGU VOWEL SIGN AA..TELUGU VOWEL SIGN II
	if(0xc3e<=code&&code<=0xc40){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xc46){// Mc   [4] TELUGU VOWEL SIGN U..TELUGU VOWEL SIGN VOCALIC RR
	if(0xc41<=code&&code<=0xc44){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [3] TELUGU VOWEL SIGN E..TELUGU VOWEL SIGN AI
	if(0xc46<=code&&code<=0xc48){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0xc81){if(code<0xc55){// Mn   [4] TELUGU VOWEL SIGN O..TELUGU SIGN VIRAMA
	if(0xc4a<=code&&code<=0xc4d){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xc62){// Mn   [2] TELUGU LENGTH MARK..TELUGU AI LENGTH MARK
	if(0xc55<=code&&code<=0xc56){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] TELUGU VOWEL SIGN VOCALIC L..TELUGU VOWEL SIGN VOCALIC LL
	if(0xc62<=code&&code<=0xc63){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0xc82){// Mn       KANNADA SIGN CANDRABINDU
	if(0xc81===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xcbc){// Mc   [2] KANNADA SIGN ANUSVARA..KANNADA SIGN VISARGA
	if(0xc82<=code&&code<=0xc83){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       KANNADA SIGN NUKTA
	if(0xcbc===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0xcc6){if(code<0xcc0){// Mc       KANNADA VOWEL SIGN AA
	if(0xcbe===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       KANNADA VOWEL SIGN I
	if(0xcbf===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xcc2){// Mc   [2] KANNADA VOWEL SIGN II..KANNADA VOWEL SIGN U
	if(0xcc0<=code&&code<=0xcc1){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0xcc3){// Mc       KANNADA VOWEL SIGN UU
	if(0xcc2===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] KANNADA VOWEL SIGN VOCALIC R..KANNADA VOWEL SIGN VOCALIC RR
	if(0xcc3<=code&&code<=0xcc4){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0xccc){if(code<0xcc7){// Mn       KANNADA VOWEL SIGN E
	if(0xcc6===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xcca){// Mc   [2] KANNADA VOWEL SIGN EE..KANNADA VOWEL SIGN AI
	if(0xcc7<=code&&code<=0xcc8){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mc   [2] KANNADA VOWEL SIGN O..KANNADA VOWEL SIGN OO
	if(0xcca<=code&&code<=0xccb){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0xcd5){// Mn   [2] KANNADA VOWEL SIGN AU..KANNADA SIGN VIRAMA
	if(0xccc<=code&&code<=0xccd){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xce2){// Mc   [2] KANNADA LENGTH MARK..KANNADA AI LENGTH MARK
	if(0xcd5<=code&&code<=0xcd6){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] KANNADA VOWEL SIGN VOCALIC L..KANNADA VOWEL SIGN VOCALIC LL
	if(0xce2<=code&&code<=0xce3){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}}else {if(code<0xddf){if(code<0xd4e){if(code<0xd3f){if(code<0xd02){if(code<0xd00){// Mc       KANNADA SIGN COMBINING ANUSVARA ABOVE RIGHT
	if(0xcf3===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] MALAYALAM SIGN COMBINING ANUSVARA ABOVE..MALAYALAM SIGN CANDRABINDU
	if(0xd00<=code&&code<=0xd01){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0xd3b){// Mc   [2] MALAYALAM SIGN ANUSVARA..MALAYALAM SIGN VISARGA
	if(0xd02<=code&&code<=0xd03){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0xd3e){// Mn   [2] MALAYALAM SIGN VERTICAL BAR VIRAMA..MALAYALAM SIGN CIRCULAR VIRAMA
	if(0xd3b<=code&&code<=0xd3c){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       MALAYALAM VOWEL SIGN AA
	if(0xd3e===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0xd46){if(code<0xd41){// Mc   [2] MALAYALAM VOWEL SIGN I..MALAYALAM VOWEL SIGN II
	if(0xd3f<=code&&code<=0xd40){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [4] MALAYALAM VOWEL SIGN U..MALAYALAM VOWEL SIGN VOCALIC RR
	if(0xd41<=code&&code<=0xd44){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0xd4a){// Mc   [3] MALAYALAM VOWEL SIGN E..MALAYALAM VOWEL SIGN AI
	if(0xd46<=code&&code<=0xd48){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0xd4d){// Mc   [3] MALAYALAM VOWEL SIGN O..MALAYALAM VOWEL SIGN AU
	if(0xd4a<=code&&code<=0xd4c){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       MALAYALAM SIGN VIRAMA
	if(0xd4d===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0xdca){if(code<0xd62){// Lo       MALAYALAM LETTER DOT REPH
	if(0xd4e===code){return boundaries_1.CLUSTER_BREAK.PREPEND;}// Mc       MALAYALAM AU LENGTH MARK
	if(0xd57===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xd81){// Mn   [2] MALAYALAM VOWEL SIGN VOCALIC L..MALAYALAM VOWEL SIGN VOCALIC LL
	if(0xd62<=code&&code<=0xd63){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xd82){// Mn       SINHALA SIGN CANDRABINDU
	if(0xd81===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] SINHALA SIGN ANUSVARAYA..SINHALA SIGN VISARGAYA
	if(0xd82<=code&&code<=0xd83){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0xdd2){if(code<0xdcf){// Mn       SINHALA SIGN AL-LAKUNA
	if(0xdca===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xdd0){// Mc       SINHALA VOWEL SIGN AELA-PILLA
	if(0xdcf===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] SINHALA VOWEL SIGN KETTI AEDA-PILLA..SINHALA VOWEL SIGN DIGA AEDA-PILLA
	if(0xdd0<=code&&code<=0xdd1){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0xdd6){// Mn   [3] SINHALA VOWEL SIGN KETTI IS-PILLA..SINHALA VOWEL SIGN KETTI PAA-PILLA
	if(0xdd2<=code&&code<=0xdd4){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xdd8){// Mn       SINHALA VOWEL SIGN DIGA PAA-PILLA
	if(0xdd6===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [7] SINHALA VOWEL SIGN GAETTA-PILLA..SINHALA VOWEL SIGN KOMBUVA HAA GAYANUKITTA
	if(0xdd8<=code&&code<=0xdde){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}}}else {if(code<0xf35){if(code<0xe47){if(code<0xe31){if(code<0xdf2){// Mc       SINHALA VOWEL SIGN GAYANUKITTA
	if(0xddf===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] SINHALA VOWEL SIGN DIGA GAETTA-PILLA..SINHALA VOWEL SIGN DIGA GAYANUKITTA
	if(0xdf2<=code&&code<=0xdf3){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0xe33){// Mn       THAI CHARACTER MAI HAN-AKAT
	if(0xe31===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xe34){// Lo       THAI CHARACTER SARA AM
	if(0xe33===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [7] THAI CHARACTER SARA I..THAI CHARACTER PHINTHU
	if(0xe34<=code&&code<=0xe3a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0xeb4){if(code<0xeb1){// Mn   [8] THAI CHARACTER MAITAIKHU..THAI CHARACTER YAMAKKAN
	if(0xe47<=code&&code<=0xe4e){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       LAO VOWEL SIGN MAI KAN
	if(0xeb1===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Lo       LAO VOWEL SIGN AM
	if(0xeb3===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0xec8){// Mn   [9] LAO VOWEL SIGN I..LAO SEMIVOWEL SIGN LO
	if(0xeb4<=code&&code<=0xebc){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xf18){// Mn   [7] LAO TONE MAI EK..LAO YAMAKKAN
	if(0xec8<=code&&code<=0xece){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] TIBETAN ASTROLOGICAL SIGN -KHYUD PA..TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS
	if(0xf18<=code&&code<=0xf19){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0xf7f){if(code<0xf39){// Mn       TIBETAN MARK NGAS BZUNG NYI ZLA
	if(0xf35===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mn       TIBETAN MARK NGAS BZUNG SGOR RTAGS
	if(0xf37===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xf3e){// Mn       TIBETAN MARK TSA -PHRU
	if(0xf39===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xf71){// Mc   [2] TIBETAN SIGN YAR TSHES..TIBETAN SIGN MAR TSHES
	if(0xf3e<=code&&code<=0xf3f){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn  [14] TIBETAN VOWEL SIGN AA..TIBETAN SIGN RJES SU NGA RO
	if(0xf71<=code&&code<=0xf7e){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0xf8d){if(code<0xf80){// Mc       TIBETAN SIGN RNAM BCAD
	if(0xf7f===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0xf86){// Mn   [5] TIBETAN VOWEL SIGN REVERSED I..TIBETAN MARK HALANTA
	if(0xf80<=code&&code<=0xf84){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] TIBETAN SIGN LCI RTAGS..TIBETAN SIGN YANG RTAGS
	if(0xf86<=code&&code<=0xf87){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0xf99){// Mn  [11] TIBETAN SUBJOINED SIGN LCE TSA CAN..TIBETAN SUBJOINED LETTER JA
	if(0xf8d<=code&&code<=0xf97){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xfc6){// Mn  [36] TIBETAN SUBJOINED LETTER NYA..TIBETAN SUBJOINED LETTER FIXED-FORM RA
	if(0xf99<=code&&code<=0xfbc){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       TIBETAN SYMBOL PADMA GDAN
	if(0xfc6===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}}}}else {if(code<0x1c24){if(code<0x1930){if(code<0x1732){if(code<0x1082){if(code<0x103d){if(code<0x1032){if(code<0x1031){// Mn   [4] MYANMAR VOWEL SIGN I..MYANMAR VOWEL SIGN UU
	if(0x102d<=code&&code<=0x1030){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       MYANMAR VOWEL SIGN E
	if(0x1031===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x1039){// Mn   [6] MYANMAR VOWEL SIGN AI..MYANMAR SIGN DOT BELOW
	if(0x1032<=code&&code<=0x1037){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x103b){// Mn   [2] MYANMAR SIGN VIRAMA..MYANMAR SIGN ASAT
	if(0x1039<=code&&code<=0x103a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] MYANMAR CONSONANT SIGN MEDIAL YA..MYANMAR CONSONANT SIGN MEDIAL RA
	if(0x103b<=code&&code<=0x103c){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0x1058){if(code<0x1056){// Mn   [2] MYANMAR CONSONANT SIGN MEDIAL WA..MYANMAR CONSONANT SIGN MEDIAL HA
	if(0x103d<=code&&code<=0x103e){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] MYANMAR VOWEL SIGN VOCALIC R..MYANMAR VOWEL SIGN VOCALIC RR
	if(0x1056<=code&&code<=0x1057){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x105e){// Mn   [2] MYANMAR VOWEL SIGN VOCALIC L..MYANMAR VOWEL SIGN VOCALIC LL
	if(0x1058<=code&&code<=0x1059){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1071){// Mn   [3] MYANMAR CONSONANT SIGN MON MEDIAL NA..MYANMAR CONSONANT SIGN MON MEDIAL LA
	if(0x105e<=code&&code<=0x1060){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [4] MYANMAR VOWEL SIGN GEBA KAREN I..MYANMAR VOWEL SIGN KAYAH EE
	if(0x1071<=code&&code<=0x1074){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0x1100){if(code<0x1085){// Mn       MYANMAR CONSONANT SIGN SHAN MEDIAL WA
	if(0x1082===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mc       MYANMAR VOWEL SIGN SHAN E
	if(0x1084===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x108d){// Mn   [2] MYANMAR VOWEL SIGN SHAN E ABOVE..MYANMAR VOWEL SIGN SHAN FINAL Y
	if(0x1085<=code&&code<=0x1086){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE
	if(0x108d===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mn       MYANMAR VOWEL SIGN AITON AI
	if(0x109d===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x135d){if(code<0x1160){// Lo  [96] HANGUL CHOSEONG KIYEOK..HANGUL CHOSEONG FILLER
	if(0x1100<=code&&code<=0x115f){return boundaries_1.CLUSTER_BREAK.L;}}else {if(code<0x11a8){// Lo  [72] HANGUL JUNGSEONG FILLER..HANGUL JUNGSEONG O-YAE
	if(0x1160<=code&&code<=0x11a7){return boundaries_1.CLUSTER_BREAK.V;}}else {// Lo  [88] HANGUL JONGSEONG KIYEOK..HANGUL JONGSEONG SSANGNIEUN
	if(0x11a8<=code&&code<=0x11ff){return boundaries_1.CLUSTER_BREAK.T;}}}}else {if(code<0x1712){// Mn   [3] ETHIOPIC COMBINING GEMINATION AND VOWEL LENGTH MARK..ETHIOPIC COMBINING GEMINATION MARK
	if(0x135d<=code&&code<=0x135f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1715){// Mn   [3] TAGALOG VOWEL SIGN I..TAGALOG SIGN VIRAMA
	if(0x1712<=code&&code<=0x1714){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       TAGALOG SIGN PAMUDPOD
	if(0x1715===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}}}else {if(code<0x17c9){if(code<0x17b6){if(code<0x1752){if(code<0x1734){// Mn   [2] HANUNOO VOWEL SIGN I..HANUNOO VOWEL SIGN U
	if(0x1732<=code&&code<=0x1733){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       HANUNOO SIGN PAMUDPOD
	if(0x1734===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x1772){// Mn   [2] BUHID VOWEL SIGN I..BUHID VOWEL SIGN U
	if(0x1752<=code&&code<=0x1753){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x17b4){// Mn   [2] TAGBANWA VOWEL SIGN I..TAGBANWA VOWEL SIGN U
	if(0x1772<=code&&code<=0x1773){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] KHMER VOWEL INHERENT AQ..KHMER VOWEL INHERENT AA
	if(0x17b4<=code&&code<=0x17b5){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x17be){if(code<0x17b7){// Mc       KHMER VOWEL SIGN AA
	if(0x17b6===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [7] KHMER VOWEL SIGN I..KHMER VOWEL SIGN UA
	if(0x17b7<=code&&code<=0x17bd){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x17c6){// Mc   [8] KHMER VOWEL SIGN OE..KHMER VOWEL SIGN AU
	if(0x17be<=code&&code<=0x17c5){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x17c7){// Mn       KHMER SIGN NIKAHIT
	if(0x17c6===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] KHMER SIGN REAHMUK..KHMER SIGN YUUKALEAPINTU
	if(0x17c7<=code&&code<=0x17c8){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}}else {if(code<0x1885){if(code<0x180b){if(code<0x17dd){// Mn  [11] KHMER SIGN MUUSIKATOAN..KHMER SIGN BATHAMASAT
	if(0x17c9<=code&&code<=0x17d3){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       KHMER SIGN ATTHACAN
	if(0x17dd===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x180e){// Mn   [3] MONGOLIAN FREE VARIATION SELECTOR ONE..MONGOLIAN FREE VARIATION SELECTOR THREE
	if(0x180b<=code&&code<=0x180d){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Cf       MONGOLIAN VOWEL SEPARATOR
	if(0x180e===code){return boundaries_1.CLUSTER_BREAK.CONTROL;}// Mn       MONGOLIAN FREE VARIATION SELECTOR FOUR
	if(0x180f===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x1923){if(code<0x18a9){// Mn   [2] MONGOLIAN LETTER ALI GALI BALUDA..MONGOLIAN LETTER ALI GALI THREE BALUDA
	if(0x1885<=code&&code<=0x1886){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1920){// Mn       MONGOLIAN LETTER ALI GALI DAGALGA
	if(0x18a9===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [3] LIMBU VOWEL SIGN A..LIMBU VOWEL SIGN U
	if(0x1920<=code&&code<=0x1922){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x1927){// Mc   [4] LIMBU VOWEL SIGN EE..LIMBU VOWEL SIGN AU
	if(0x1923<=code&&code<=0x1926){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x1929){// Mn   [2] LIMBU VOWEL SIGN E..LIMBU VOWEL SIGN O
	if(0x1927<=code&&code<=0x1928){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [3] LIMBU SUBJOINED LETTER YA..LIMBU SUBJOINED LETTER WA
	if(0x1929<=code&&code<=0x192b){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}}}}else {if(code<0x1b3b){if(code<0x1a58){if(code<0x1a19){if(code<0x1933){if(code<0x1932){// Mc   [2] LIMBU SMALL LETTER KA..LIMBU SMALL LETTER NGA
	if(0x1930<=code&&code<=0x1931){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       LIMBU SMALL LETTER ANUSVARA
	if(0x1932===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x1939){// Mc   [6] LIMBU SMALL LETTER TA..LIMBU SMALL LETTER LA
	if(0x1933<=code&&code<=0x1938){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x1a17){// Mn   [3] LIMBU SIGN MUKPHRENG..LIMBU SIGN SA-I
	if(0x1939<=code&&code<=0x193b){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] BUGINESE VOWEL SIGN I..BUGINESE VOWEL SIGN U
	if(0x1a17<=code&&code<=0x1a18){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x1a55){if(code<0x1a1b){// Mc   [2] BUGINESE VOWEL SIGN E..BUGINESE VOWEL SIGN O
	if(0x1a19<=code&&code<=0x1a1a){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       BUGINESE VOWEL SIGN AE
	if(0x1a1b===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x1a56){// Mc       TAI THAM CONSONANT SIGN MEDIAL RA
	if(0x1a55===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       TAI THAM CONSONANT SIGN MEDIAL LA
	if(0x1a56===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mc       TAI THAM CONSONANT SIGN LA TANG LAI
	if(0x1a57===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0x1a73){if(code<0x1a62){if(code<0x1a60){// Mn   [7] TAI THAM SIGN MAI KANG LAI..TAI THAM CONSONANT SIGN SA
	if(0x1a58<=code&&code<=0x1a5e){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       TAI THAM SIGN SAKOT
	if(0x1a60===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x1a65){// Mn       TAI THAM VOWEL SIGN MAI SAT
	if(0x1a62===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1a6d){// Mn   [8] TAI THAM VOWEL SIGN I..TAI THAM VOWEL SIGN OA BELOW
	if(0x1a65<=code&&code<=0x1a6c){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [6] TAI THAM VOWEL SIGN OY..TAI THAM VOWEL SIGN THAM AI
	if(0x1a6d<=code&&code<=0x1a72){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0x1b00){if(code<0x1a7f){// Mn  [10] TAI THAM VOWEL SIGN OA ABOVE..TAI THAM SIGN KHUEN-LUE KARAN
	if(0x1a73<=code&&code<=0x1a7c){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1ab0){// Mn       TAI THAM COMBINING CRYPTOGRAMMIC DOT
	if(0x1a7f===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn  [14] COMBINING DOUBLED CIRCUMFLEX ACCENT..COMBINING PARENTHESES BELOW
	// Me       COMBINING PARENTHESES OVERLAY
	// Mn  [16] COMBINING LATIN SMALL LETTER W BELOW..COMBINING LATIN SMALL LETTER INSULAR T
	if(0x1ab0<=code&&code<=0x1ace){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x1b04){// Mn   [4] BALINESE SIGN ULU RICEM..BALINESE SIGN SURANG
	if(0x1b00<=code&&code<=0x1b03){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1b34){// Mc       BALINESE SIGN BISAH
	if(0x1b04===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       BALINESE SIGN REREKAN
	// Mc       BALINESE VOWEL SIGN TEDUNG
	// Mn   [5] BALINESE VOWEL SIGN ULU..BALINESE VOWEL SIGN RA REPA
	if(0x1b34<=code&&code<=0x1b3a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}else {if(code<0x1ba8){if(code<0x1b6b){if(code<0x1b3d){// Mc       BALINESE VOWEL SIGN RA REPA TEDUNG
	if(0x1b3b===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       BALINESE VOWEL SIGN LA LENGA
	if(0x1b3c===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1b42){// Mc   [5] BALINESE VOWEL SIGN LA LENGA TEDUNG..BALINESE VOWEL SIGN TALING REPA TEDUNG
	if(0x1b3d<=code&&code<=0x1b41){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x1b43){// Mn       BALINESE VOWEL SIGN PEPET
	if(0x1b42===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] BALINESE VOWEL SIGN PEPET TEDUNG..BALINESE ADEG ADEG
	if(0x1b43<=code&&code<=0x1b44){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0x1ba1){if(code<0x1b80){// Mn   [9] BALINESE MUSICAL SYMBOL COMBINING TEGEH..BALINESE MUSICAL SYMBOL COMBINING GONG
	if(0x1b6b<=code&&code<=0x1b73){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1b82){// Mn   [2] SUNDANESE SIGN PANYECEK..SUNDANESE SIGN PANGLAYAR
	if(0x1b80<=code&&code<=0x1b81){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       SUNDANESE SIGN PANGWISAD
	if(0x1b82===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0x1ba2){// Mc       SUNDANESE CONSONANT SIGN PAMINGKAL
	if(0x1ba1===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x1ba6){// Mn   [4] SUNDANESE CONSONANT SIGN PANYAKRA..SUNDANESE VOWEL SIGN PANYUKU
	if(0x1ba2<=code&&code<=0x1ba5){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] SUNDANESE VOWEL SIGN PANAELAENG..SUNDANESE VOWEL SIGN PANOLONG
	if(0x1ba6<=code&&code<=0x1ba7){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}}else {if(code<0x1be8){if(code<0x1bab){if(code<0x1baa){// Mn   [2] SUNDANESE VOWEL SIGN PAMEPET..SUNDANESE VOWEL SIGN PANEULEUNG
	if(0x1ba8<=code&&code<=0x1ba9){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       SUNDANESE SIGN PAMAAEH
	if(0x1baa===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x1be6){// Mn   [3] SUNDANESE SIGN VIRAMA..SUNDANESE CONSONANT SIGN PASANGAN WA
	if(0x1bab<=code&&code<=0x1bad){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       BATAK SIGN TOMPI
	if(0x1be6===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mc       BATAK VOWEL SIGN E
	if(0x1be7===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0x1bee){if(code<0x1bea){// Mn   [2] BATAK VOWEL SIGN PAKPAK E..BATAK VOWEL SIGN EE
	if(0x1be8<=code&&code<=0x1be9){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1bed){// Mc   [3] BATAK VOWEL SIGN I..BATAK VOWEL SIGN O
	if(0x1bea<=code&&code<=0x1bec){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       BATAK VOWEL SIGN KARO O
	if(0x1bed===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x1bef){// Mc       BATAK VOWEL SIGN U
	if(0x1bee===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x1bf2){// Mn   [3] BATAK VOWEL SIGN U FOR SIMALUNGUN SA..BATAK CONSONANT SIGN H
	if(0x1bef<=code&&code<=0x1bf1){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] BATAK PANGOLAT..BATAK PANONGONAN
	if(0x1bf2<=code&&code<=0x1bf3){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}}}}}else {if(code<0xa952){if(code<0x2d7f){if(code<0x1cf7){if(code<0x1cd4){if(code<0x1c34){if(code<0x1c2c){// Mc   [8] LEPCHA SUBJOINED LETTER YA..LEPCHA VOWEL SIGN UU
	if(0x1c24<=code&&code<=0x1c2b){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [8] LEPCHA VOWEL SIGN E..LEPCHA CONSONANT SIGN T
	if(0x1c2c<=code&&code<=0x1c33){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x1c36){// Mc   [2] LEPCHA CONSONANT SIGN NYIN-DO..LEPCHA CONSONANT SIGN KANG
	if(0x1c34<=code&&code<=0x1c35){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x1cd0){// Mn   [2] LEPCHA SIGN RAN..LEPCHA SIGN NUKTA
	if(0x1c36<=code&&code<=0x1c37){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [3] VEDIC TONE KARSHANA..VEDIC TONE PRENKHA
	if(0x1cd0<=code&&code<=0x1cd2){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x1ce2){if(code<0x1ce1){// Mn  [13] VEDIC SIGN YAJURVEDIC MIDLINE SVARITA..VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA
	if(0x1cd4<=code&&code<=0x1ce0){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       VEDIC TONE ATHARVAVEDIC INDEPENDENT SVARITA
	if(0x1ce1===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x1ced){// Mn   [7] VEDIC SIGN VISARGA SVARITA..VEDIC SIGN VISARGA ANUDATTA WITH TAIL
	if(0x1ce2<=code&&code<=0x1ce8){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       VEDIC SIGN TIRYAK
	if(0x1ced===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mn       VEDIC TONE CANDRA ABOVE
	if(0x1cf4===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x200d){if(code<0x1dc0){if(code<0x1cf8){// Mc       VEDIC SIGN ATIKRAMA
	if(0x1cf7===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] VEDIC TONE RING ABOVE..VEDIC TONE DOUBLE RING ABOVE
	if(0x1cf8<=code&&code<=0x1cf9){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x200b){// Mn  [64] COMBINING DOTTED GRAVE ACCENT..COMBINING RIGHT ARROWHEAD AND DOWN ARROWHEAD BELOW
	if(0x1dc0<=code&&code<=0x1dff){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Cf       ZERO WIDTH SPACE
	if(0x200b===code){return boundaries_1.CLUSTER_BREAK.CONTROL;}// Cf       ZERO WIDTH NON-JOINER
	if(0x200c===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x2060){if(code<0x200e){// Cf       ZERO WIDTH JOINER
	if(0x200d===code){return boundaries_1.CLUSTER_BREAK.ZWJ;}}else {if(code<0x2028){// Cf   [2] LEFT-TO-RIGHT MARK..RIGHT-TO-LEFT MARK
	if(0x200e<=code&&code<=0x200f){return boundaries_1.CLUSTER_BREAK.CONTROL;}}else {// Zl       LINE SEPARATOR
	// Zp       PARAGRAPH SEPARATOR
	// Cf   [5] LEFT-TO-RIGHT EMBEDDING..RIGHT-TO-LEFT OVERRIDE
	if(0x2028<=code&&code<=0x202e){return boundaries_1.CLUSTER_BREAK.CONTROL;}}}}else {if(code<0x20d0){// Cf   [5] WORD JOINER..INVISIBLE PLUS
	// Cn       <reserved-2065>
	// Cf  [10] LEFT-TO-RIGHT ISOLATE..NOMINAL DIGIT SHAPES
	if(0x2060<=code&&code<=0x206f){return boundaries_1.CLUSTER_BREAK.CONTROL;}}else {if(code<0x2cef){// Mn  [13] COMBINING LEFT HARPOON ABOVE..COMBINING FOUR DOTS ABOVE
	// Me   [4] COMBINING ENCLOSING CIRCLE..COMBINING ENCLOSING CIRCLE BACKSLASH
	// Mn       COMBINING LEFT RIGHT ARROW ABOVE
	// Me   [3] COMBINING ENCLOSING SCREEN..COMBINING ENCLOSING UPWARD POINTING TRIANGLE
	// Mn  [12] COMBINING REVERSE SOLIDUS OVERLAY..COMBINING ASTERISK ABOVE
	if(0x20d0<=code&&code<=0x20f0){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [3] COPTIC COMBINING NI ABOVE..COPTIC COMBINING SPIRITUS LENIS
	if(0x2cef<=code&&code<=0x2cf1){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}else {if(code<0xa823){if(code<0xa674){if(code<0x302a){if(code<0x2de0){// Mn       TIFINAGH CONSONANT JOINER
	if(0x2d7f===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn  [32] COMBINING CYRILLIC LETTER BE..COMBINING CYRILLIC LETTER IOTIFIED BIG YUS
	if(0x2de0<=code&&code<=0x2dff){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x3099){// Mn   [4] IDEOGRAPHIC LEVEL TONE MARK..IDEOGRAPHIC ENTERING TONE MARK
	// Mc   [2] HANGUL SINGLE DOT TONE MARK..HANGUL DOUBLE DOT TONE MARK
	if(0x302a<=code&&code<=0x302f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xa66f){// Mn   [2] COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK..COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK
	if(0x3099<=code&&code<=0x309a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       COMBINING CYRILLIC VZMET
	// Me   [3] COMBINING CYRILLIC TEN MILLIONS SIGN..COMBINING CYRILLIC THOUSAND MILLIONS SIGN
	if(0xa66f<=code&&code<=0xa672){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0xa802){if(code<0xa69e){// Mn  [10] COMBINING CYRILLIC LETTER UKRAINIAN IE..COMBINING CYRILLIC PAYEROK
	if(0xa674<=code&&code<=0xa67d){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xa6f0){// Mn   [2] COMBINING CYRILLIC LETTER EF..COMBINING CYRILLIC LETTER IOTIFIED E
	if(0xa69e<=code&&code<=0xa69f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] BAMUM COMBINING MARK KOQNDON..BAMUM COMBINING MARK TUKWENTIS
	if(0xa6f0<=code&&code<=0xa6f1){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0xa806){// Mn       SYLOTI NAGRI SIGN DVISVARA
	if(0xa802===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       SYLOTI NAGRI SIGN HASANTA
	if(0xa806===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mn       SYLOTI NAGRI SIGN ANUSVARA
	if(0xa80b===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0xa8b4){if(code<0xa827){if(code<0xa825){// Mc   [2] SYLOTI NAGRI VOWEL SIGN A..SYLOTI NAGRI VOWEL SIGN I
	if(0xa823<=code&&code<=0xa824){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] SYLOTI NAGRI VOWEL SIGN U..SYLOTI NAGRI VOWEL SIGN E
	if(0xa825<=code&&code<=0xa826){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0xa82c){// Mc       SYLOTI NAGRI VOWEL SIGN OO
	if(0xa827===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0xa880){// Mn       SYLOTI NAGRI SIGN ALTERNATE HASANTA
	if(0xa82c===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] SAURASHTRA SIGN ANUSVARA..SAURASHTRA SIGN VISARGA
	if(0xa880<=code&&code<=0xa881){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0xa8ff){if(code<0xa8c4){// Mc  [16] SAURASHTRA CONSONANT SIGN HAARU..SAURASHTRA VOWEL SIGN AU
	if(0xa8b4<=code&&code<=0xa8c3){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0xa8e0){// Mn   [2] SAURASHTRA SIGN VIRAMA..SAURASHTRA SIGN CANDRABINDU
	if(0xa8c4<=code&&code<=0xa8c5){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn  [18] COMBINING DEVANAGARI DIGIT ZERO..COMBINING DEVANAGARI SIGN AVAGRAHA
	if(0xa8e0<=code&&code<=0xa8f1){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0xa926){// Mn       DEVANAGARI VOWEL SIGN AY
	if(0xa8ff===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xa947){// Mn   [8] KAYAH LI VOWEL UE..KAYAH LI TONE CALYA PLOPHU
	if(0xa926<=code&&code<=0xa92d){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn  [11] REJANG VOWEL SIGN I..REJANG CONSONANT SIGN R
	if(0xa947<=code&&code<=0xa951){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}}else {if(code<0xaab2){if(code<0xa9e5){if(code<0xa9b4){if(code<0xa980){if(code<0xa960){// Mc   [2] REJANG CONSONANT SIGN H..REJANG VIRAMA
	if(0xa952<=code&&code<=0xa953){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Lo  [29] HANGUL CHOSEONG TIKEUT-MIEUM..HANGUL CHOSEONG SSANGYEORINHIEUH
	if(0xa960<=code&&code<=0xa97c){return boundaries_1.CLUSTER_BREAK.L;}}}else {if(code<0xa983){// Mn   [3] JAVANESE SIGN PANYANGGA..JAVANESE SIGN LAYAR
	if(0xa980<=code&&code<=0xa982){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       JAVANESE SIGN WIGNYAN
	if(0xa983===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       JAVANESE SIGN CECAK TELU
	if(0xa9b3===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0xa9ba){if(code<0xa9b6){// Mc   [2] JAVANESE VOWEL SIGN TARUNG..JAVANESE VOWEL SIGN TOLONG
	if(0xa9b4<=code&&code<=0xa9b5){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [4] JAVANESE VOWEL SIGN WULU..JAVANESE VOWEL SIGN SUKU MENDUT
	if(0xa9b6<=code&&code<=0xa9b9){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0xa9bc){// Mc   [2] JAVANESE VOWEL SIGN TALING..JAVANESE VOWEL SIGN DIRGA MURE
	if(0xa9ba<=code&&code<=0xa9bb){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0xa9be){// Mn   [2] JAVANESE VOWEL SIGN PEPET..JAVANESE CONSONANT SIGN KERET
	if(0xa9bc<=code&&code<=0xa9bd){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [3] JAVANESE CONSONANT SIGN PENGKAL..JAVANESE PANGKON
	if(0xa9be<=code&&code<=0xa9c0){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}}else {if(code<0xaa35){if(code<0xaa2f){if(code<0xaa29){// Mn       MYANMAR SIGN SHAN SAW
	if(0xa9e5===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [6] CHAM VOWEL SIGN AA..CHAM VOWEL SIGN OE
	if(0xaa29<=code&&code<=0xaa2e){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0xaa31){// Mc   [2] CHAM VOWEL SIGN O..CHAM VOWEL SIGN AI
	if(0xaa2f<=code&&code<=0xaa30){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0xaa33){// Mn   [2] CHAM VOWEL SIGN AU..CHAM VOWEL SIGN UE
	if(0xaa31<=code&&code<=0xaa32){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] CHAM CONSONANT SIGN YA..CHAM CONSONANT SIGN RA
	if(0xaa33<=code&&code<=0xaa34){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0xaa4d){if(code<0xaa43){// Mn   [2] CHAM CONSONANT SIGN LA..CHAM CONSONANT SIGN WA
	if(0xaa35<=code&&code<=0xaa36){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       CHAM CONSONANT SIGN FINAL NG
	if(0xaa43===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mn       CHAM CONSONANT SIGN FINAL M
	if(0xaa4c===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0xaa7c){// Mc       CHAM CONSONANT SIGN FINAL H
	if(0xaa4d===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       MYANMAR SIGN TAI LAING TONE-2
	if(0xaa7c===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mn       TAI VIET MAI KANG
	if(0xaab0===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0xabe6){if(code<0xaaec){if(code<0xaabe){if(code<0xaab7){// Mn   [3] TAI VIET VOWEL I..TAI VIET VOWEL U
	if(0xaab2<=code&&code<=0xaab4){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] TAI VIET MAI KHIT..TAI VIET VOWEL IA
	if(0xaab7<=code&&code<=0xaab8){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0xaac1){// Mn   [2] TAI VIET VOWEL AM..TAI VIET TONE MAI EK
	if(0xaabe<=code&&code<=0xaabf){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       TAI VIET TONE MAI THO
	if(0xaac1===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mc       MEETEI MAYEK VOWEL SIGN II
	if(0xaaeb===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0xaaf6){if(code<0xaaee){// Mn   [2] MEETEI MAYEK VOWEL SIGN UU..MEETEI MAYEK VOWEL SIGN AAI
	if(0xaaec<=code&&code<=0xaaed){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xaaf5){// Mc   [2] MEETEI MAYEK VOWEL SIGN AU..MEETEI MAYEK VOWEL SIGN AAU
	if(0xaaee<=code&&code<=0xaaef){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mc       MEETEI MAYEK VOWEL SIGN VISARGA
	if(0xaaf5===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0xabe3){// Mn       MEETEI MAYEK VIRAMA
	if(0xaaf6===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xabe5){// Mc   [2] MEETEI MAYEK VOWEL SIGN ONAP..MEETEI MAYEK VOWEL SIGN INAP
	if(0xabe3<=code&&code<=0xabe4){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       MEETEI MAYEK VOWEL SIGN ANAP
	if(0xabe5===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0xac00){if(code<0xabe9){if(code<0xabe8){// Mc   [2] MEETEI MAYEK VOWEL SIGN YENAP..MEETEI MAYEK VOWEL SIGN SOUNAP
	if(0xabe6<=code&&code<=0xabe7){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       MEETEI MAYEK VOWEL SIGN UNAP
	if(0xabe8===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0xabec){// Mc   [2] MEETEI MAYEK VOWEL SIGN CHEINAP..MEETEI MAYEK VOWEL SIGN NUNG
	if(0xabe9<=code&&code<=0xabea){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mc       MEETEI MAYEK LUM IYEK
	if(0xabec===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       MEETEI MAYEK APUN IYEK
	if(0xabed===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0xac1d){if(code<0xac01){// Lo       HANGUL SYLLABLE GA
	if(0xac00===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xac1c){// Lo  [27] HANGUL SYLLABLE GAG..HANGUL SYLLABLE GAH
	if(0xac01<=code&&code<=0xac1b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GAE
	if(0xac1c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xac38){// Lo  [27] HANGUL SYLLABLE GAEG..HANGUL SYLLABLE GAEH
	if(0xac1d<=code&&code<=0xac37){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xac39){// Lo       HANGUL SYLLABLE GYA
	if(0xac38===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GYAG..HANGUL SYLLABLE GYAH
	if(0xac39<=code&&code<=0xac53){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}}}}}else {if(code<0xb5a1){if(code<0xb0ed){if(code<0xaea0){if(code<0xad6d){if(code<0xace0){if(code<0xac8d){if(code<0xac70){if(code<0xac55){// Lo       HANGUL SYLLABLE GYAE
	if(0xac54===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GYAEG..HANGUL SYLLABLE GYAEH
	if(0xac55<=code&&code<=0xac6f){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xac71){// Lo       HANGUL SYLLABLE GEO
	if(0xac70===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xac8c){// Lo  [27] HANGUL SYLLABLE GEOG..HANGUL SYLLABLE GEOH
	if(0xac71<=code&&code<=0xac8b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GE
	if(0xac8c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xaca9){if(code<0xaca8){// Lo  [27] HANGUL SYLLABLE GEG..HANGUL SYLLABLE GEH
	if(0xac8d<=code&&code<=0xaca7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GYEO
	if(0xaca8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xacc4){// Lo  [27] HANGUL SYLLABLE GYEOG..HANGUL SYLLABLE GYEOH
	if(0xaca9<=code&&code<=0xacc3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xacc5){// Lo       HANGUL SYLLABLE GYE
	if(0xacc4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GYEG..HANGUL SYLLABLE GYEH
	if(0xacc5<=code&&code<=0xacdf){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xad19){if(code<0xacfc){if(code<0xace1){// Lo       HANGUL SYLLABLE GO
	if(0xace0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GOG..HANGUL SYLLABLE GOH
	if(0xace1<=code&&code<=0xacfb){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xacfd){// Lo       HANGUL SYLLABLE GWA
	if(0xacfc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xad18){// Lo  [27] HANGUL SYLLABLE GWAG..HANGUL SYLLABLE GWAH
	if(0xacfd<=code&&code<=0xad17){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GWAE
	if(0xad18===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xad50){if(code<0xad34){// Lo  [27] HANGUL SYLLABLE GWAEG..HANGUL SYLLABLE GWAEH
	if(0xad19<=code&&code<=0xad33){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xad35){// Lo       HANGUL SYLLABLE GOE
	if(0xad34===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GOEG..HANGUL SYLLABLE GOEH
	if(0xad35<=code&&code<=0xad4f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xad51){// Lo       HANGUL SYLLABLE GYO
	if(0xad50===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xad6c){// Lo  [27] HANGUL SYLLABLE GYOG..HANGUL SYLLABLE GYOH
	if(0xad51<=code&&code<=0xad6b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GU
	if(0xad6c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}else {if(code<0xadf9){if(code<0xadc0){if(code<0xad89){if(code<0xad88){// Lo  [27] HANGUL SYLLABLE GUG..HANGUL SYLLABLE GUH
	if(0xad6d<=code&&code<=0xad87){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GWEO
	if(0xad88===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xada4){// Lo  [27] HANGUL SYLLABLE GWEOG..HANGUL SYLLABLE GWEOH
	if(0xad89<=code&&code<=0xada3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xada5){// Lo       HANGUL SYLLABLE GWE
	if(0xada4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GWEG..HANGUL SYLLABLE GWEH
	if(0xada5<=code&&code<=0xadbf){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xaddc){if(code<0xadc1){// Lo       HANGUL SYLLABLE GWI
	if(0xadc0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GWIG..HANGUL SYLLABLE GWIH
	if(0xadc1<=code&&code<=0xaddb){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xaddd){// Lo       HANGUL SYLLABLE GYU
	if(0xaddc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xadf8){// Lo  [27] HANGUL SYLLABLE GYUG..HANGUL SYLLABLE GYUH
	if(0xaddd<=code&&code<=0xadf7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GEU
	if(0xadf8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xae4c){if(code<0xae15){if(code<0xae14){// Lo  [27] HANGUL SYLLABLE GEUG..HANGUL SYLLABLE GEUH
	if(0xadf9<=code&&code<=0xae13){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GYI
	if(0xae14===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xae30){// Lo  [27] HANGUL SYLLABLE GYIG..HANGUL SYLLABLE GYIH
	if(0xae15<=code&&code<=0xae2f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xae31){// Lo       HANGUL SYLLABLE GI
	if(0xae30===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GIG..HANGUL SYLLABLE GIH
	if(0xae31<=code&&code<=0xae4b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xae69){if(code<0xae4d){// Lo       HANGUL SYLLABLE GGA
	if(0xae4c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xae68){// Lo  [27] HANGUL SYLLABLE GGAG..HANGUL SYLLABLE GGAH
	if(0xae4d<=code&&code<=0xae67){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GGAE
	if(0xae68===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xae84){// Lo  [27] HANGUL SYLLABLE GGAEG..HANGUL SYLLABLE GGAEH
	if(0xae69<=code&&code<=0xae83){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xae85){// Lo       HANGUL SYLLABLE GGYA
	if(0xae84===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GGYAG..HANGUL SYLLABLE GGYAH
	if(0xae85<=code&&code<=0xae9f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}}else {if(code<0xafb9){if(code<0xaf2c){if(code<0xaed9){if(code<0xaebc){if(code<0xaea1){// Lo       HANGUL SYLLABLE GGYAE
	if(0xaea0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GGYAEG..HANGUL SYLLABLE GGYAEH
	if(0xaea1<=code&&code<=0xaebb){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xaebd){// Lo       HANGUL SYLLABLE GGEO
	if(0xaebc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xaed8){// Lo  [27] HANGUL SYLLABLE GGEOG..HANGUL SYLLABLE GGEOH
	if(0xaebd<=code&&code<=0xaed7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GGE
	if(0xaed8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xaef5){if(code<0xaef4){// Lo  [27] HANGUL SYLLABLE GGEG..HANGUL SYLLABLE GGEH
	if(0xaed9<=code&&code<=0xaef3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GGYEO
	if(0xaef4===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xaf10){// Lo  [27] HANGUL SYLLABLE GGYEOG..HANGUL SYLLABLE GGYEOH
	if(0xaef5<=code&&code<=0xaf0f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xaf11){// Lo       HANGUL SYLLABLE GGYE
	if(0xaf10===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GGYEG..HANGUL SYLLABLE GGYEH
	if(0xaf11<=code&&code<=0xaf2b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xaf65){if(code<0xaf48){if(code<0xaf2d){// Lo       HANGUL SYLLABLE GGO
	if(0xaf2c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GGOG..HANGUL SYLLABLE GGOH
	if(0xaf2d<=code&&code<=0xaf47){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xaf49){// Lo       HANGUL SYLLABLE GGWA
	if(0xaf48===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xaf64){// Lo  [27] HANGUL SYLLABLE GGWAG..HANGUL SYLLABLE GGWAH
	if(0xaf49<=code&&code<=0xaf63){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GGWAE
	if(0xaf64===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xaf9c){if(code<0xaf80){// Lo  [27] HANGUL SYLLABLE GGWAEG..HANGUL SYLLABLE GGWAEH
	if(0xaf65<=code&&code<=0xaf7f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xaf81){// Lo       HANGUL SYLLABLE GGOE
	if(0xaf80===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GGOEG..HANGUL SYLLABLE GGOEH
	if(0xaf81<=code&&code<=0xaf9b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xaf9d){// Lo       HANGUL SYLLABLE GGYO
	if(0xaf9c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xafb8){// Lo  [27] HANGUL SYLLABLE GGYOG..HANGUL SYLLABLE GGYOH
	if(0xaf9d<=code&&code<=0xafb7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GGU
	if(0xafb8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}else {if(code<0xb060){if(code<0xb00c){if(code<0xafd5){if(code<0xafd4){// Lo  [27] HANGUL SYLLABLE GGUG..HANGUL SYLLABLE GGUH
	if(0xafb9<=code&&code<=0xafd3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GGWEO
	if(0xafd4===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xaff0){// Lo  [27] HANGUL SYLLABLE GGWEOG..HANGUL SYLLABLE GGWEOH
	if(0xafd5<=code&&code<=0xafef){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xaff1){// Lo       HANGUL SYLLABLE GGWE
	if(0xaff0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GGWEG..HANGUL SYLLABLE GGWEH
	if(0xaff1<=code&&code<=0xb00b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xb029){if(code<0xb00d){// Lo       HANGUL SYLLABLE GGWI
	if(0xb00c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb028){// Lo  [27] HANGUL SYLLABLE GGWIG..HANGUL SYLLABLE GGWIH
	if(0xb00d<=code&&code<=0xb027){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GGYU
	if(0xb028===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xb044){// Lo  [27] HANGUL SYLLABLE GGYUG..HANGUL SYLLABLE GGYUH
	if(0xb029<=code&&code<=0xb043){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb045){// Lo       HANGUL SYLLABLE GGEU
	if(0xb044===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GGEUG..HANGUL SYLLABLE GGEUH
	if(0xb045<=code&&code<=0xb05f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xb099){if(code<0xb07c){if(code<0xb061){// Lo       HANGUL SYLLABLE GGYI
	if(0xb060===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GGYIG..HANGUL SYLLABLE GGYIH
	if(0xb061<=code&&code<=0xb07b){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xb07d){// Lo       HANGUL SYLLABLE GGI
	if(0xb07c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb098){// Lo  [27] HANGUL SYLLABLE GGIG..HANGUL SYLLABLE GGIH
	if(0xb07d<=code&&code<=0xb097){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE NA
	if(0xb098===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xb0d0){if(code<0xb0b4){// Lo  [27] HANGUL SYLLABLE NAG..HANGUL SYLLABLE NAH
	if(0xb099<=code&&code<=0xb0b3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb0b5){// Lo       HANGUL SYLLABLE NAE
	if(0xb0b4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE NAEG..HANGUL SYLLABLE NAEH
	if(0xb0b5<=code&&code<=0xb0cf){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xb0d1){// Lo       HANGUL SYLLABLE NYA
	if(0xb0d0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb0ec){// Lo  [27] HANGUL SYLLABLE NYAG..HANGUL SYLLABLE NYAH
	if(0xb0d1<=code&&code<=0xb0eb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE NYAE
	if(0xb0ec===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}}}else {if(code<0xb354){if(code<0xb220){if(code<0xb179){if(code<0xb140){if(code<0xb109){if(code<0xb108){// Lo  [27] HANGUL SYLLABLE NYAEG..HANGUL SYLLABLE NYAEH
	if(0xb0ed<=code&&code<=0xb107){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE NEO
	if(0xb108===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xb124){// Lo  [27] HANGUL SYLLABLE NEOG..HANGUL SYLLABLE NEOH
	if(0xb109<=code&&code<=0xb123){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb125){// Lo       HANGUL SYLLABLE NE
	if(0xb124===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE NEG..HANGUL SYLLABLE NEH
	if(0xb125<=code&&code<=0xb13f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xb15c){if(code<0xb141){// Lo       HANGUL SYLLABLE NYEO
	if(0xb140===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE NYEOG..HANGUL SYLLABLE NYEOH
	if(0xb141<=code&&code<=0xb15b){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xb15d){// Lo       HANGUL SYLLABLE NYE
	if(0xb15c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb178){// Lo  [27] HANGUL SYLLABLE NYEG..HANGUL SYLLABLE NYEH
	if(0xb15d<=code&&code<=0xb177){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE NO
	if(0xb178===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xb1cc){if(code<0xb195){if(code<0xb194){// Lo  [27] HANGUL SYLLABLE NOG..HANGUL SYLLABLE NOH
	if(0xb179<=code&&code<=0xb193){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE NWA
	if(0xb194===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xb1b0){// Lo  [27] HANGUL SYLLABLE NWAG..HANGUL SYLLABLE NWAH
	if(0xb195<=code&&code<=0xb1af){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb1b1){// Lo       HANGUL SYLLABLE NWAE
	if(0xb1b0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE NWAEG..HANGUL SYLLABLE NWAEH
	if(0xb1b1<=code&&code<=0xb1cb){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xb1e9){if(code<0xb1cd){// Lo       HANGUL SYLLABLE NOE
	if(0xb1cc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb1e8){// Lo  [27] HANGUL SYLLABLE NOEG..HANGUL SYLLABLE NOEH
	if(0xb1cd<=code&&code<=0xb1e7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE NYO
	if(0xb1e8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xb204){// Lo  [27] HANGUL SYLLABLE NYOG..HANGUL SYLLABLE NYOH
	if(0xb1e9<=code&&code<=0xb203){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb205){// Lo       HANGUL SYLLABLE NU
	if(0xb204===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE NUG..HANGUL SYLLABLE NUH
	if(0xb205<=code&&code<=0xb21f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}else {if(code<0xb2ad){if(code<0xb259){if(code<0xb23c){if(code<0xb221){// Lo       HANGUL SYLLABLE NWEO
	if(0xb220===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE NWEOG..HANGUL SYLLABLE NWEOH
	if(0xb221<=code&&code<=0xb23b){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xb23d){// Lo       HANGUL SYLLABLE NWE
	if(0xb23c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb258){// Lo  [27] HANGUL SYLLABLE NWEG..HANGUL SYLLABLE NWEH
	if(0xb23d<=code&&code<=0xb257){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE NWI
	if(0xb258===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xb290){if(code<0xb274){// Lo  [27] HANGUL SYLLABLE NWIG..HANGUL SYLLABLE NWIH
	if(0xb259<=code&&code<=0xb273){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb275){// Lo       HANGUL SYLLABLE NYU
	if(0xb274===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE NYUG..HANGUL SYLLABLE NYUH
	if(0xb275<=code&&code<=0xb28f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xb291){// Lo       HANGUL SYLLABLE NEU
	if(0xb290===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb2ac){// Lo  [27] HANGUL SYLLABLE NEUG..HANGUL SYLLABLE NEUH
	if(0xb291<=code&&code<=0xb2ab){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE NYI
	if(0xb2ac===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xb300){if(code<0xb2c9){if(code<0xb2c8){// Lo  [27] HANGUL SYLLABLE NYIG..HANGUL SYLLABLE NYIH
	if(0xb2ad<=code&&code<=0xb2c7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE NI
	if(0xb2c8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xb2e4){// Lo  [27] HANGUL SYLLABLE NIG..HANGUL SYLLABLE NIH
	if(0xb2c9<=code&&code<=0xb2e3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb2e5){// Lo       HANGUL SYLLABLE DA
	if(0xb2e4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DAG..HANGUL SYLLABLE DAH
	if(0xb2e5<=code&&code<=0xb2ff){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xb31d){if(code<0xb301){// Lo       HANGUL SYLLABLE DAE
	if(0xb300===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb31c){// Lo  [27] HANGUL SYLLABLE DAEG..HANGUL SYLLABLE DAEH
	if(0xb301<=code&&code<=0xb31b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DYA
	if(0xb31c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xb338){// Lo  [27] HANGUL SYLLABLE DYAG..HANGUL SYLLABLE DYAH
	if(0xb31d<=code&&code<=0xb337){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb339){// Lo       HANGUL SYLLABLE DYAE
	if(0xb338===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DYAEG..HANGUL SYLLABLE DYAEH
	if(0xb339<=code&&code<=0xb353){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}}else {if(code<0xb46d){if(code<0xb3e0){if(code<0xb38d){if(code<0xb370){if(code<0xb355){// Lo       HANGUL SYLLABLE DEO
	if(0xb354===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DEOG..HANGUL SYLLABLE DEOH
	if(0xb355<=code&&code<=0xb36f){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xb371){// Lo       HANGUL SYLLABLE DE
	if(0xb370===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb38c){// Lo  [27] HANGUL SYLLABLE DEG..HANGUL SYLLABLE DEH
	if(0xb371<=code&&code<=0xb38b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DYEO
	if(0xb38c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xb3a9){if(code<0xb3a8){// Lo  [27] HANGUL SYLLABLE DYEOG..HANGUL SYLLABLE DYEOH
	if(0xb38d<=code&&code<=0xb3a7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DYE
	if(0xb3a8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xb3c4){// Lo  [27] HANGUL SYLLABLE DYEG..HANGUL SYLLABLE DYEH
	if(0xb3a9<=code&&code<=0xb3c3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb3c5){// Lo       HANGUL SYLLABLE DO
	if(0xb3c4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DOG..HANGUL SYLLABLE DOH
	if(0xb3c5<=code&&code<=0xb3df){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xb419){if(code<0xb3fc){if(code<0xb3e1){// Lo       HANGUL SYLLABLE DWA
	if(0xb3e0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DWAG..HANGUL SYLLABLE DWAH
	if(0xb3e1<=code&&code<=0xb3fb){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xb3fd){// Lo       HANGUL SYLLABLE DWAE
	if(0xb3fc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb418){// Lo  [27] HANGUL SYLLABLE DWAEG..HANGUL SYLLABLE DWAEH
	if(0xb3fd<=code&&code<=0xb417){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DOE
	if(0xb418===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xb450){if(code<0xb434){// Lo  [27] HANGUL SYLLABLE DOEG..HANGUL SYLLABLE DOEH
	if(0xb419<=code&&code<=0xb433){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb435){// Lo       HANGUL SYLLABLE DYO
	if(0xb434===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DYOG..HANGUL SYLLABLE DYOH
	if(0xb435<=code&&code<=0xb44f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xb451){// Lo       HANGUL SYLLABLE DU
	if(0xb450===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb46c){// Lo  [27] HANGUL SYLLABLE DUG..HANGUL SYLLABLE DUH
	if(0xb451<=code&&code<=0xb46b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DWEO
	if(0xb46c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}else {if(code<0xb514){if(code<0xb4c0){if(code<0xb489){if(code<0xb488){// Lo  [27] HANGUL SYLLABLE DWEOG..HANGUL SYLLABLE DWEOH
	if(0xb46d<=code&&code<=0xb487){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DWE
	if(0xb488===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xb4a4){// Lo  [27] HANGUL SYLLABLE DWEG..HANGUL SYLLABLE DWEH
	if(0xb489<=code&&code<=0xb4a3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb4a5){// Lo       HANGUL SYLLABLE DWI
	if(0xb4a4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DWIG..HANGUL SYLLABLE DWIH
	if(0xb4a5<=code&&code<=0xb4bf){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xb4dd){if(code<0xb4c1){// Lo       HANGUL SYLLABLE DYU
	if(0xb4c0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb4dc){// Lo  [27] HANGUL SYLLABLE DYUG..HANGUL SYLLABLE DYUH
	if(0xb4c1<=code&&code<=0xb4db){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DEU
	if(0xb4dc===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xb4f8){// Lo  [27] HANGUL SYLLABLE DEUG..HANGUL SYLLABLE DEUH
	if(0xb4dd<=code&&code<=0xb4f7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb4f9){// Lo       HANGUL SYLLABLE DYI
	if(0xb4f8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DYIG..HANGUL SYLLABLE DYIH
	if(0xb4f9<=code&&code<=0xb513){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xb54d){if(code<0xb530){if(code<0xb515){// Lo       HANGUL SYLLABLE DI
	if(0xb514===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DIG..HANGUL SYLLABLE DIH
	if(0xb515<=code&&code<=0xb52f){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xb531){// Lo       HANGUL SYLLABLE DDA
	if(0xb530===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb54c){// Lo  [27] HANGUL SYLLABLE DDAG..HANGUL SYLLABLE DDAH
	if(0xb531<=code&&code<=0xb54b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DDAE
	if(0xb54c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xb584){if(code<0xb568){// Lo  [27] HANGUL SYLLABLE DDAEG..HANGUL SYLLABLE DDAEH
	if(0xb54d<=code&&code<=0xb567){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb569){// Lo       HANGUL SYLLABLE DDYA
	if(0xb568===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DDYAG..HANGUL SYLLABLE DDYAH
	if(0xb569<=code&&code<=0xb583){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xb585){// Lo       HANGUL SYLLABLE DDYAE
	if(0xb584===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb5a0){// Lo  [27] HANGUL SYLLABLE DDYAEG..HANGUL SYLLABLE DDYAEH
	if(0xb585<=code&&code<=0xb59f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DDEO
	if(0xb5a0===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}}}}else {if(code<0xba55){if(code<0xb808){if(code<0xb6d4){if(code<0xb62d){if(code<0xb5f4){if(code<0xb5bd){if(code<0xb5bc){// Lo  [27] HANGUL SYLLABLE DDEOG..HANGUL SYLLABLE DDEOH
	if(0xb5a1<=code&&code<=0xb5bb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DDE
	if(0xb5bc===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xb5d8){// Lo  [27] HANGUL SYLLABLE DDEG..HANGUL SYLLABLE DDEH
	if(0xb5bd<=code&&code<=0xb5d7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb5d9){// Lo       HANGUL SYLLABLE DDYEO
	if(0xb5d8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DDYEOG..HANGUL SYLLABLE DDYEOH
	if(0xb5d9<=code&&code<=0xb5f3){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xb610){if(code<0xb5f5){// Lo       HANGUL SYLLABLE DDYE
	if(0xb5f4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DDYEG..HANGUL SYLLABLE DDYEH
	if(0xb5f5<=code&&code<=0xb60f){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xb611){// Lo       HANGUL SYLLABLE DDO
	if(0xb610===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb62c){// Lo  [27] HANGUL SYLLABLE DDOG..HANGUL SYLLABLE DDOH
	if(0xb611<=code&&code<=0xb62b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DDWA
	if(0xb62c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xb680){if(code<0xb649){if(code<0xb648){// Lo  [27] HANGUL SYLLABLE DDWAG..HANGUL SYLLABLE DDWAH
	if(0xb62d<=code&&code<=0xb647){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DDWAE
	if(0xb648===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xb664){// Lo  [27] HANGUL SYLLABLE DDWAEG..HANGUL SYLLABLE DDWAEH
	if(0xb649<=code&&code<=0xb663){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb665){// Lo       HANGUL SYLLABLE DDOE
	if(0xb664===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DDOEG..HANGUL SYLLABLE DDOEH
	if(0xb665<=code&&code<=0xb67f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xb69d){if(code<0xb681){// Lo       HANGUL SYLLABLE DDYO
	if(0xb680===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb69c){// Lo  [27] HANGUL SYLLABLE DDYOG..HANGUL SYLLABLE DDYOH
	if(0xb681<=code&&code<=0xb69b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DDU
	if(0xb69c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xb6b8){// Lo  [27] HANGUL SYLLABLE DDUG..HANGUL SYLLABLE DDUH
	if(0xb69d<=code&&code<=0xb6b7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb6b9){// Lo       HANGUL SYLLABLE DDWEO
	if(0xb6b8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DDWEOG..HANGUL SYLLABLE DDWEOH
	if(0xb6b9<=code&&code<=0xb6d3){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}else {if(code<0xb761){if(code<0xb70d){if(code<0xb6f0){if(code<0xb6d5){// Lo       HANGUL SYLLABLE DDWE
	if(0xb6d4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DDWEG..HANGUL SYLLABLE DDWEH
	if(0xb6d5<=code&&code<=0xb6ef){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xb6f1){// Lo       HANGUL SYLLABLE DDWI
	if(0xb6f0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb70c){// Lo  [27] HANGUL SYLLABLE DDWIG..HANGUL SYLLABLE DDWIH
	if(0xb6f1<=code&&code<=0xb70b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DDYU
	if(0xb70c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xb744){if(code<0xb728){// Lo  [27] HANGUL SYLLABLE DDYUG..HANGUL SYLLABLE DDYUH
	if(0xb70d<=code&&code<=0xb727){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb729){// Lo       HANGUL SYLLABLE DDEU
	if(0xb728===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DDEUG..HANGUL SYLLABLE DDEUH
	if(0xb729<=code&&code<=0xb743){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xb745){// Lo       HANGUL SYLLABLE DDYI
	if(0xb744===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb760){// Lo  [27] HANGUL SYLLABLE DDYIG..HANGUL SYLLABLE DDYIH
	if(0xb745<=code&&code<=0xb75f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DDI
	if(0xb760===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xb7b4){if(code<0xb77d){if(code<0xb77c){// Lo  [27] HANGUL SYLLABLE DDIG..HANGUL SYLLABLE DDIH
	if(0xb761<=code&&code<=0xb77b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE RA
	if(0xb77c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xb798){// Lo  [27] HANGUL SYLLABLE RAG..HANGUL SYLLABLE RAH
	if(0xb77d<=code&&code<=0xb797){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb799){// Lo       HANGUL SYLLABLE RAE
	if(0xb798===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE RAEG..HANGUL SYLLABLE RAEH
	if(0xb799<=code&&code<=0xb7b3){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xb7d1){if(code<0xb7b5){// Lo       HANGUL SYLLABLE RYA
	if(0xb7b4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb7d0){// Lo  [27] HANGUL SYLLABLE RYAG..HANGUL SYLLABLE RYAH
	if(0xb7b5<=code&&code<=0xb7cf){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE RYAE
	if(0xb7d0===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xb7ec){// Lo  [27] HANGUL SYLLABLE RYAEG..HANGUL SYLLABLE RYAEH
	if(0xb7d1<=code&&code<=0xb7eb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb7ed){// Lo       HANGUL SYLLABLE REO
	if(0xb7ec===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE REOG..HANGUL SYLLABLE REOH
	if(0xb7ed<=code&&code<=0xb807){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}}else {if(code<0xb921){if(code<0xb894){if(code<0xb841){if(code<0xb824){if(code<0xb809){// Lo       HANGUL SYLLABLE RE
	if(0xb808===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE REG..HANGUL SYLLABLE REH
	if(0xb809<=code&&code<=0xb823){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xb825){// Lo       HANGUL SYLLABLE RYEO
	if(0xb824===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb840){// Lo  [27] HANGUL SYLLABLE RYEOG..HANGUL SYLLABLE RYEOH
	if(0xb825<=code&&code<=0xb83f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE RYE
	if(0xb840===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xb85d){if(code<0xb85c){// Lo  [27] HANGUL SYLLABLE RYEG..HANGUL SYLLABLE RYEH
	if(0xb841<=code&&code<=0xb85b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE RO
	if(0xb85c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xb878){// Lo  [27] HANGUL SYLLABLE ROG..HANGUL SYLLABLE ROH
	if(0xb85d<=code&&code<=0xb877){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb879){// Lo       HANGUL SYLLABLE RWA
	if(0xb878===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE RWAG..HANGUL SYLLABLE RWAH
	if(0xb879<=code&&code<=0xb893){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xb8cd){if(code<0xb8b0){if(code<0xb895){// Lo       HANGUL SYLLABLE RWAE
	if(0xb894===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE RWAEG..HANGUL SYLLABLE RWAEH
	if(0xb895<=code&&code<=0xb8af){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xb8b1){// Lo       HANGUL SYLLABLE ROE
	if(0xb8b0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb8cc){// Lo  [27] HANGUL SYLLABLE ROEG..HANGUL SYLLABLE ROEH
	if(0xb8b1<=code&&code<=0xb8cb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE RYO
	if(0xb8cc===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xb904){if(code<0xb8e8){// Lo  [27] HANGUL SYLLABLE RYOG..HANGUL SYLLABLE RYOH
	if(0xb8cd<=code&&code<=0xb8e7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb8e9){// Lo       HANGUL SYLLABLE RU
	if(0xb8e8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE RUG..HANGUL SYLLABLE RUH
	if(0xb8e9<=code&&code<=0xb903){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xb905){// Lo       HANGUL SYLLABLE RWEO
	if(0xb904===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb920){// Lo  [27] HANGUL SYLLABLE RWEOG..HANGUL SYLLABLE RWEOH
	if(0xb905<=code&&code<=0xb91f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE RWE
	if(0xb920===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}else {if(code<0xb9c8){if(code<0xb974){if(code<0xb93d){if(code<0xb93c){// Lo  [27] HANGUL SYLLABLE RWEG..HANGUL SYLLABLE RWEH
	if(0xb921<=code&&code<=0xb93b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE RWI
	if(0xb93c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xb958){// Lo  [27] HANGUL SYLLABLE RWIG..HANGUL SYLLABLE RWIH
	if(0xb93d<=code&&code<=0xb957){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb959){// Lo       HANGUL SYLLABLE RYU
	if(0xb958===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE RYUG..HANGUL SYLLABLE RYUH
	if(0xb959<=code&&code<=0xb973){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xb991){if(code<0xb975){// Lo       HANGUL SYLLABLE REU
	if(0xb974===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb990){// Lo  [27] HANGUL SYLLABLE REUG..HANGUL SYLLABLE REUH
	if(0xb975<=code&&code<=0xb98f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE RYI
	if(0xb990===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xb9ac){// Lo  [27] HANGUL SYLLABLE RYIG..HANGUL SYLLABLE RYIH
	if(0xb991<=code&&code<=0xb9ab){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb9ad){// Lo       HANGUL SYLLABLE RI
	if(0xb9ac===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE RIG..HANGUL SYLLABLE RIH
	if(0xb9ad<=code&&code<=0xb9c7){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xba01){if(code<0xb9e4){if(code<0xb9c9){// Lo       HANGUL SYLLABLE MA
	if(0xb9c8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE MAG..HANGUL SYLLABLE MAH
	if(0xb9c9<=code&&code<=0xb9e3){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xb9e5){// Lo       HANGUL SYLLABLE MAE
	if(0xb9e4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xba00){// Lo  [27] HANGUL SYLLABLE MAEG..HANGUL SYLLABLE MAEH
	if(0xb9e5<=code&&code<=0xb9ff){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE MYA
	if(0xba00===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xba38){if(code<0xba1c){// Lo  [27] HANGUL SYLLABLE MYAG..HANGUL SYLLABLE MYAH
	if(0xba01<=code&&code<=0xba1b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xba1d){// Lo       HANGUL SYLLABLE MYAE
	if(0xba1c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE MYAEG..HANGUL SYLLABLE MYAEH
	if(0xba1d<=code&&code<=0xba37){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xba39){// Lo       HANGUL SYLLABLE MEO
	if(0xba38===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xba54){// Lo  [27] HANGUL SYLLABLE MEOG..HANGUL SYLLABLE MEOH
	if(0xba39<=code&&code<=0xba53){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE ME
	if(0xba54===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}}}else {if(code<0xbcbc){if(code<0xbb88){if(code<0xbae1){if(code<0xbaa8){if(code<0xba71){if(code<0xba70){// Lo  [27] HANGUL SYLLABLE MEG..HANGUL SYLLABLE MEH
	if(0xba55<=code&&code<=0xba6f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE MYEO
	if(0xba70===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xba8c){// Lo  [27] HANGUL SYLLABLE MYEOG..HANGUL SYLLABLE MYEOH
	if(0xba71<=code&&code<=0xba8b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xba8d){// Lo       HANGUL SYLLABLE MYE
	if(0xba8c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE MYEG..HANGUL SYLLABLE MYEH
	if(0xba8d<=code&&code<=0xbaa7){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xbac4){if(code<0xbaa9){// Lo       HANGUL SYLLABLE MO
	if(0xbaa8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE MOG..HANGUL SYLLABLE MOH
	if(0xbaa9<=code&&code<=0xbac3){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xbac5){// Lo       HANGUL SYLLABLE MWA
	if(0xbac4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xbae0){// Lo  [27] HANGUL SYLLABLE MWAG..HANGUL SYLLABLE MWAH
	if(0xbac5<=code&&code<=0xbadf){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE MWAE
	if(0xbae0===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xbb34){if(code<0xbafd){if(code<0xbafc){// Lo  [27] HANGUL SYLLABLE MWAEG..HANGUL SYLLABLE MWAEH
	if(0xbae1<=code&&code<=0xbafb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE MOE
	if(0xbafc===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xbb18){// Lo  [27] HANGUL SYLLABLE MOEG..HANGUL SYLLABLE MOEH
	if(0xbafd<=code&&code<=0xbb17){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xbb19){// Lo       HANGUL SYLLABLE MYO
	if(0xbb18===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE MYOG..HANGUL SYLLABLE MYOH
	if(0xbb19<=code&&code<=0xbb33){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xbb51){if(code<0xbb35){// Lo       HANGUL SYLLABLE MU
	if(0xbb34===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xbb50){// Lo  [27] HANGUL SYLLABLE MUG..HANGUL SYLLABLE MUH
	if(0xbb35<=code&&code<=0xbb4f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE MWEO
	if(0xbb50===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xbb6c){// Lo  [27] HANGUL SYLLABLE MWEOG..HANGUL SYLLABLE MWEOH
	if(0xbb51<=code&&code<=0xbb6b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xbb6d){// Lo       HANGUL SYLLABLE MWE
	if(0xbb6c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE MWEG..HANGUL SYLLABLE MWEH
	if(0xbb6d<=code&&code<=0xbb87){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}else {if(code<0xbc15){if(code<0xbbc1){if(code<0xbba4){if(code<0xbb89){// Lo       HANGUL SYLLABLE MWI
	if(0xbb88===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE MWIG..HANGUL SYLLABLE MWIH
	if(0xbb89<=code&&code<=0xbba3){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xbba5){// Lo       HANGUL SYLLABLE MYU
	if(0xbba4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xbbc0){// Lo  [27] HANGUL SYLLABLE MYUG..HANGUL SYLLABLE MYUH
	if(0xbba5<=code&&code<=0xbbbf){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE MEU
	if(0xbbc0===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xbbf8){if(code<0xbbdc){// Lo  [27] HANGUL SYLLABLE MEUG..HANGUL SYLLABLE MEUH
	if(0xbbc1<=code&&code<=0xbbdb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xbbdd){// Lo       HANGUL SYLLABLE MYI
	if(0xbbdc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE MYIG..HANGUL SYLLABLE MYIH
	if(0xbbdd<=code&&code<=0xbbf7){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xbbf9){// Lo       HANGUL SYLLABLE MI
	if(0xbbf8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xbc14){// Lo  [27] HANGUL SYLLABLE MIG..HANGUL SYLLABLE MIH
	if(0xbbf9<=code&&code<=0xbc13){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BA
	if(0xbc14===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xbc68){if(code<0xbc31){if(code<0xbc30){// Lo  [27] HANGUL SYLLABLE BAG..HANGUL SYLLABLE BAH
	if(0xbc15<=code&&code<=0xbc2f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BAE
	if(0xbc30===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xbc4c){// Lo  [27] HANGUL SYLLABLE BAEG..HANGUL SYLLABLE BAEH
	if(0xbc31<=code&&code<=0xbc4b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xbc4d){// Lo       HANGUL SYLLABLE BYA
	if(0xbc4c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BYAG..HANGUL SYLLABLE BYAH
	if(0xbc4d<=code&&code<=0xbc67){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xbc85){if(code<0xbc69){// Lo       HANGUL SYLLABLE BYAE
	if(0xbc68===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xbc84){// Lo  [27] HANGUL SYLLABLE BYAEG..HANGUL SYLLABLE BYAEH
	if(0xbc69<=code&&code<=0xbc83){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BEO
	if(0xbc84===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xbca0){// Lo  [27] HANGUL SYLLABLE BEOG..HANGUL SYLLABLE BEOH
	if(0xbc85<=code&&code<=0xbc9f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xbca1){// Lo       HANGUL SYLLABLE BE
	if(0xbca0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BEG..HANGUL SYLLABLE BEH
	if(0xbca1<=code&&code<=0xbcbb){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}}else {if(code<0xbdd5){if(code<0xbd48){if(code<0xbcf5){if(code<0xbcd8){if(code<0xbcbd){// Lo       HANGUL SYLLABLE BYEO
	if(0xbcbc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BYEOG..HANGUL SYLLABLE BYEOH
	if(0xbcbd<=code&&code<=0xbcd7){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xbcd9){// Lo       HANGUL SYLLABLE BYE
	if(0xbcd8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xbcf4){// Lo  [27] HANGUL SYLLABLE BYEG..HANGUL SYLLABLE BYEH
	if(0xbcd9<=code&&code<=0xbcf3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BO
	if(0xbcf4===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xbd11){if(code<0xbd10){// Lo  [27] HANGUL SYLLABLE BOG..HANGUL SYLLABLE BOH
	if(0xbcf5<=code&&code<=0xbd0f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BWA
	if(0xbd10===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xbd2c){// Lo  [27] HANGUL SYLLABLE BWAG..HANGUL SYLLABLE BWAH
	if(0xbd11<=code&&code<=0xbd2b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xbd2d){// Lo       HANGUL SYLLABLE BWAE
	if(0xbd2c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BWAEG..HANGUL SYLLABLE BWAEH
	if(0xbd2d<=code&&code<=0xbd47){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xbd81){if(code<0xbd64){if(code<0xbd49){// Lo       HANGUL SYLLABLE BOE
	if(0xbd48===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BOEG..HANGUL SYLLABLE BOEH
	if(0xbd49<=code&&code<=0xbd63){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xbd65){// Lo       HANGUL SYLLABLE BYO
	if(0xbd64===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xbd80){// Lo  [27] HANGUL SYLLABLE BYOG..HANGUL SYLLABLE BYOH
	if(0xbd65<=code&&code<=0xbd7f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BU
	if(0xbd80===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xbdb8){if(code<0xbd9c){// Lo  [27] HANGUL SYLLABLE BUG..HANGUL SYLLABLE BUH
	if(0xbd81<=code&&code<=0xbd9b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xbd9d){// Lo       HANGUL SYLLABLE BWEO
	if(0xbd9c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BWEOG..HANGUL SYLLABLE BWEOH
	if(0xbd9d<=code&&code<=0xbdb7){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xbdb9){// Lo       HANGUL SYLLABLE BWE
	if(0xbdb8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xbdd4){// Lo  [27] HANGUL SYLLABLE BWEG..HANGUL SYLLABLE BWEH
	if(0xbdb9<=code&&code<=0xbdd3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BWI
	if(0xbdd4===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}else {if(code<0xbe7c){if(code<0xbe28){if(code<0xbdf1){if(code<0xbdf0){// Lo  [27] HANGUL SYLLABLE BWIG..HANGUL SYLLABLE BWIH
	if(0xbdd5<=code&&code<=0xbdef){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BYU
	if(0xbdf0===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xbe0c){// Lo  [27] HANGUL SYLLABLE BYUG..HANGUL SYLLABLE BYUH
	if(0xbdf1<=code&&code<=0xbe0b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xbe0d){// Lo       HANGUL SYLLABLE BEU
	if(0xbe0c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BEUG..HANGUL SYLLABLE BEUH
	if(0xbe0d<=code&&code<=0xbe27){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xbe45){if(code<0xbe29){// Lo       HANGUL SYLLABLE BYI
	if(0xbe28===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xbe44){// Lo  [27] HANGUL SYLLABLE BYIG..HANGUL SYLLABLE BYIH
	if(0xbe29<=code&&code<=0xbe43){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BI
	if(0xbe44===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xbe60){// Lo  [27] HANGUL SYLLABLE BIG..HANGUL SYLLABLE BIH
	if(0xbe45<=code&&code<=0xbe5f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xbe61){// Lo       HANGUL SYLLABLE BBA
	if(0xbe60===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BBAG..HANGUL SYLLABLE BBAH
	if(0xbe61<=code&&code<=0xbe7b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xbeb5){if(code<0xbe98){if(code<0xbe7d){// Lo       HANGUL SYLLABLE BBAE
	if(0xbe7c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BBAEG..HANGUL SYLLABLE BBAEH
	if(0xbe7d<=code&&code<=0xbe97){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xbe99){// Lo       HANGUL SYLLABLE BBYA
	if(0xbe98===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xbeb4){// Lo  [27] HANGUL SYLLABLE BBYAG..HANGUL SYLLABLE BBYAH
	if(0xbe99<=code&&code<=0xbeb3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BBYAE
	if(0xbeb4===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xbeec){if(code<0xbed0){// Lo  [27] HANGUL SYLLABLE BBYAEG..HANGUL SYLLABLE BBYAEH
	if(0xbeb5<=code&&code<=0xbecf){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xbed1){// Lo       HANGUL SYLLABLE BBEO
	if(0xbed0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BBEOG..HANGUL SYLLABLE BBEOH
	if(0xbed1<=code&&code<=0xbeeb){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xbeed){// Lo       HANGUL SYLLABLE BBE
	if(0xbeec===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xbf08){// Lo  [27] HANGUL SYLLABLE BBEG..HANGUL SYLLABLE BBEH
	if(0xbeed<=code&&code<=0xbf07){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BBYEO
	if(0xbf08===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}}}}}}else {if(code<0xd1d8){if(code<0xc870){if(code<0xc3bc){if(code<0xc155){if(code<0xc03c){if(code<0xbf95){if(code<0xbf5c){if(code<0xbf25){if(code<0xbf24){// Lo  [27] HANGUL SYLLABLE BBYEOG..HANGUL SYLLABLE BBYEOH
	if(0xbf09<=code&&code<=0xbf23){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BBYE
	if(0xbf24===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xbf40){// Lo  [27] HANGUL SYLLABLE BBYEG..HANGUL SYLLABLE BBYEH
	if(0xbf25<=code&&code<=0xbf3f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xbf41){// Lo       HANGUL SYLLABLE BBO
	if(0xbf40===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BBOG..HANGUL SYLLABLE BBOH
	if(0xbf41<=code&&code<=0xbf5b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xbf78){if(code<0xbf5d){// Lo       HANGUL SYLLABLE BBWA
	if(0xbf5c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BBWAG..HANGUL SYLLABLE BBWAH
	if(0xbf5d<=code&&code<=0xbf77){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xbf79){// Lo       HANGUL SYLLABLE BBWAE
	if(0xbf78===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xbf94){// Lo  [27] HANGUL SYLLABLE BBWAEG..HANGUL SYLLABLE BBWAEH
	if(0xbf79<=code&&code<=0xbf93){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BBOE
	if(0xbf94===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xbfe8){if(code<0xbfb1){if(code<0xbfb0){// Lo  [27] HANGUL SYLLABLE BBOEG..HANGUL SYLLABLE BBOEH
	if(0xbf95<=code&&code<=0xbfaf){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BBYO
	if(0xbfb0===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xbfcc){// Lo  [27] HANGUL SYLLABLE BBYOG..HANGUL SYLLABLE BBYOH
	if(0xbfb1<=code&&code<=0xbfcb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xbfcd){// Lo       HANGUL SYLLABLE BBU
	if(0xbfcc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BBUG..HANGUL SYLLABLE BBUH
	if(0xbfcd<=code&&code<=0xbfe7){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xc005){if(code<0xbfe9){// Lo       HANGUL SYLLABLE BBWEO
	if(0xbfe8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc004){// Lo  [27] HANGUL SYLLABLE BBWEOG..HANGUL SYLLABLE BBWEOH
	if(0xbfe9<=code&&code<=0xc003){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BBWE
	if(0xc004===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xc020){// Lo  [27] HANGUL SYLLABLE BBWEG..HANGUL SYLLABLE BBWEH
	if(0xc005<=code&&code<=0xc01f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc021){// Lo       HANGUL SYLLABLE BBWI
	if(0xc020===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BBWIG..HANGUL SYLLABLE BBWIH
	if(0xc021<=code&&code<=0xc03b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}else {if(code<0xc0c8){if(code<0xc075){if(code<0xc058){if(code<0xc03d){// Lo       HANGUL SYLLABLE BBYU
	if(0xc03c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BBYUG..HANGUL SYLLABLE BBYUH
	if(0xc03d<=code&&code<=0xc057){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xc059){// Lo       HANGUL SYLLABLE BBEU
	if(0xc058===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc074){// Lo  [27] HANGUL SYLLABLE BBEUG..HANGUL SYLLABLE BBEUH
	if(0xc059<=code&&code<=0xc073){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BBYI
	if(0xc074===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xc091){if(code<0xc090){// Lo  [27] HANGUL SYLLABLE BBYIG..HANGUL SYLLABLE BBYIH
	if(0xc075<=code&&code<=0xc08f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BBI
	if(0xc090===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xc0ac){// Lo  [27] HANGUL SYLLABLE BBIG..HANGUL SYLLABLE BBIH
	if(0xc091<=code&&code<=0xc0ab){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc0ad){// Lo       HANGUL SYLLABLE SA
	if(0xc0ac===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SAG..HANGUL SYLLABLE SAH
	if(0xc0ad<=code&&code<=0xc0c7){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xc101){if(code<0xc0e4){if(code<0xc0c9){// Lo       HANGUL SYLLABLE SAE
	if(0xc0c8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SAEG..HANGUL SYLLABLE SAEH
	if(0xc0c9<=code&&code<=0xc0e3){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xc0e5){// Lo       HANGUL SYLLABLE SYA
	if(0xc0e4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc100){// Lo  [27] HANGUL SYLLABLE SYAG..HANGUL SYLLABLE SYAH
	if(0xc0e5<=code&&code<=0xc0ff){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SYAE
	if(0xc100===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xc138){if(code<0xc11c){// Lo  [27] HANGUL SYLLABLE SYAEG..HANGUL SYLLABLE SYAEH
	if(0xc101<=code&&code<=0xc11b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc11d){// Lo       HANGUL SYLLABLE SEO
	if(0xc11c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SEOG..HANGUL SYLLABLE SEOH
	if(0xc11d<=code&&code<=0xc137){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xc139){// Lo       HANGUL SYLLABLE SE
	if(0xc138===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc154){// Lo  [27] HANGUL SYLLABLE SEG..HANGUL SYLLABLE SEH
	if(0xc139<=code&&code<=0xc153){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SYEO
	if(0xc154===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}}else {if(code<0xc288){if(code<0xc1e1){if(code<0xc1a8){if(code<0xc171){if(code<0xc170){// Lo  [27] HANGUL SYLLABLE SYEOG..HANGUL SYLLABLE SYEOH
	if(0xc155<=code&&code<=0xc16f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SYE
	if(0xc170===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xc18c){// Lo  [27] HANGUL SYLLABLE SYEG..HANGUL SYLLABLE SYEH
	if(0xc171<=code&&code<=0xc18b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc18d){// Lo       HANGUL SYLLABLE SO
	if(0xc18c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SOG..HANGUL SYLLABLE SOH
	if(0xc18d<=code&&code<=0xc1a7){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xc1c4){if(code<0xc1a9){// Lo       HANGUL SYLLABLE SWA
	if(0xc1a8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SWAG..HANGUL SYLLABLE SWAH
	if(0xc1a9<=code&&code<=0xc1c3){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xc1c5){// Lo       HANGUL SYLLABLE SWAE
	if(0xc1c4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc1e0){// Lo  [27] HANGUL SYLLABLE SWAEG..HANGUL SYLLABLE SWAEH
	if(0xc1c5<=code&&code<=0xc1df){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SOE
	if(0xc1e0===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xc234){if(code<0xc1fd){if(code<0xc1fc){// Lo  [27] HANGUL SYLLABLE SOEG..HANGUL SYLLABLE SOEH
	if(0xc1e1<=code&&code<=0xc1fb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SYO
	if(0xc1fc===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xc218){// Lo  [27] HANGUL SYLLABLE SYOG..HANGUL SYLLABLE SYOH
	if(0xc1fd<=code&&code<=0xc217){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc219){// Lo       HANGUL SYLLABLE SU
	if(0xc218===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SUG..HANGUL SYLLABLE SUH
	if(0xc219<=code&&code<=0xc233){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xc251){if(code<0xc235){// Lo       HANGUL SYLLABLE SWEO
	if(0xc234===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc250){// Lo  [27] HANGUL SYLLABLE SWEOG..HANGUL SYLLABLE SWEOH
	if(0xc235<=code&&code<=0xc24f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SWE
	if(0xc250===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xc26c){// Lo  [27] HANGUL SYLLABLE SWEG..HANGUL SYLLABLE SWEH
	if(0xc251<=code&&code<=0xc26b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc26d){// Lo       HANGUL SYLLABLE SWI
	if(0xc26c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SWIG..HANGUL SYLLABLE SWIH
	if(0xc26d<=code&&code<=0xc287){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}else {if(code<0xc315){if(code<0xc2c1){if(code<0xc2a4){if(code<0xc289){// Lo       HANGUL SYLLABLE SYU
	if(0xc288===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SYUG..HANGUL SYLLABLE SYUH
	if(0xc289<=code&&code<=0xc2a3){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xc2a5){// Lo       HANGUL SYLLABLE SEU
	if(0xc2a4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc2c0){// Lo  [27] HANGUL SYLLABLE SEUG..HANGUL SYLLABLE SEUH
	if(0xc2a5<=code&&code<=0xc2bf){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SYI
	if(0xc2c0===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xc2f8){if(code<0xc2dc){// Lo  [27] HANGUL SYLLABLE SYIG..HANGUL SYLLABLE SYIH
	if(0xc2c1<=code&&code<=0xc2db){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc2dd){// Lo       HANGUL SYLLABLE SI
	if(0xc2dc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SIG..HANGUL SYLLABLE SIH
	if(0xc2dd<=code&&code<=0xc2f7){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xc2f9){// Lo       HANGUL SYLLABLE SSA
	if(0xc2f8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc314){// Lo  [27] HANGUL SYLLABLE SSAG..HANGUL SYLLABLE SSAH
	if(0xc2f9<=code&&code<=0xc313){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SSAE
	if(0xc314===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xc368){if(code<0xc331){if(code<0xc330){// Lo  [27] HANGUL SYLLABLE SSAEG..HANGUL SYLLABLE SSAEH
	if(0xc315<=code&&code<=0xc32f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SSYA
	if(0xc330===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xc34c){// Lo  [27] HANGUL SYLLABLE SSYAG..HANGUL SYLLABLE SSYAH
	if(0xc331<=code&&code<=0xc34b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc34d){// Lo       HANGUL SYLLABLE SSYAE
	if(0xc34c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SSYAEG..HANGUL SYLLABLE SSYAEH
	if(0xc34d<=code&&code<=0xc367){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xc385){if(code<0xc369){// Lo       HANGUL SYLLABLE SSEO
	if(0xc368===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc384){// Lo  [27] HANGUL SYLLABLE SSEOG..HANGUL SYLLABLE SSEOH
	if(0xc369<=code&&code<=0xc383){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SSE
	if(0xc384===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xc3a0){// Lo  [27] HANGUL SYLLABLE SSEG..HANGUL SYLLABLE SSEH
	if(0xc385<=code&&code<=0xc39f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc3a1){// Lo       HANGUL SYLLABLE SSYEO
	if(0xc3a0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SSYEOG..HANGUL SYLLABLE SSYEOH
	if(0xc3a1<=code&&code<=0xc3bb){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}}}else {if(code<0xc609){if(code<0xc4d5){if(code<0xc448){if(code<0xc3f5){if(code<0xc3d8){if(code<0xc3bd){// Lo       HANGUL SYLLABLE SSYE
	if(0xc3bc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SSYEG..HANGUL SYLLABLE SSYEH
	if(0xc3bd<=code&&code<=0xc3d7){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xc3d9){// Lo       HANGUL SYLLABLE SSO
	if(0xc3d8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc3f4){// Lo  [27] HANGUL SYLLABLE SSOG..HANGUL SYLLABLE SSOH
	if(0xc3d9<=code&&code<=0xc3f3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SSWA
	if(0xc3f4===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xc411){if(code<0xc410){// Lo  [27] HANGUL SYLLABLE SSWAG..HANGUL SYLLABLE SSWAH
	if(0xc3f5<=code&&code<=0xc40f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SSWAE
	if(0xc410===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xc42c){// Lo  [27] HANGUL SYLLABLE SSWAEG..HANGUL SYLLABLE SSWAEH
	if(0xc411<=code&&code<=0xc42b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc42d){// Lo       HANGUL SYLLABLE SSOE
	if(0xc42c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SSOEG..HANGUL SYLLABLE SSOEH
	if(0xc42d<=code&&code<=0xc447){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xc481){if(code<0xc464){if(code<0xc449){// Lo       HANGUL SYLLABLE SSYO
	if(0xc448===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SSYOG..HANGUL SYLLABLE SSYOH
	if(0xc449<=code&&code<=0xc463){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xc465){// Lo       HANGUL SYLLABLE SSU
	if(0xc464===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc480){// Lo  [27] HANGUL SYLLABLE SSUG..HANGUL SYLLABLE SSUH
	if(0xc465<=code&&code<=0xc47f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SSWEO
	if(0xc480===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xc4b8){if(code<0xc49c){// Lo  [27] HANGUL SYLLABLE SSWEOG..HANGUL SYLLABLE SSWEOH
	if(0xc481<=code&&code<=0xc49b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc49d){// Lo       HANGUL SYLLABLE SSWE
	if(0xc49c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SSWEG..HANGUL SYLLABLE SSWEH
	if(0xc49d<=code&&code<=0xc4b7){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xc4b9){// Lo       HANGUL SYLLABLE SSWI
	if(0xc4b8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc4d4){// Lo  [27] HANGUL SYLLABLE SSWIG..HANGUL SYLLABLE SSWIH
	if(0xc4b9<=code&&code<=0xc4d3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SSYU
	if(0xc4d4===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}else {if(code<0xc57c){if(code<0xc528){if(code<0xc4f1){if(code<0xc4f0){// Lo  [27] HANGUL SYLLABLE SSYUG..HANGUL SYLLABLE SSYUH
	if(0xc4d5<=code&&code<=0xc4ef){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SSEU
	if(0xc4f0===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xc50c){// Lo  [27] HANGUL SYLLABLE SSEUG..HANGUL SYLLABLE SSEUH
	if(0xc4f1<=code&&code<=0xc50b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc50d){// Lo       HANGUL SYLLABLE SSYI
	if(0xc50c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SSYIG..HANGUL SYLLABLE SSYIH
	if(0xc50d<=code&&code<=0xc527){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xc545){if(code<0xc529){// Lo       HANGUL SYLLABLE SSI
	if(0xc528===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc544){// Lo  [27] HANGUL SYLLABLE SSIG..HANGUL SYLLABLE SSIH
	if(0xc529<=code&&code<=0xc543){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE A
	if(0xc544===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xc560){// Lo  [27] HANGUL SYLLABLE AG..HANGUL SYLLABLE AH
	if(0xc545<=code&&code<=0xc55f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc561){// Lo       HANGUL SYLLABLE AE
	if(0xc560===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE AEG..HANGUL SYLLABLE AEH
	if(0xc561<=code&&code<=0xc57b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xc5b5){if(code<0xc598){if(code<0xc57d){// Lo       HANGUL SYLLABLE YA
	if(0xc57c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE YAG..HANGUL SYLLABLE YAH
	if(0xc57d<=code&&code<=0xc597){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xc599){// Lo       HANGUL SYLLABLE YAE
	if(0xc598===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc5b4){// Lo  [27] HANGUL SYLLABLE YAEG..HANGUL SYLLABLE YAEH
	if(0xc599<=code&&code<=0xc5b3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE EO
	if(0xc5b4===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xc5ec){if(code<0xc5d0){// Lo  [27] HANGUL SYLLABLE EOG..HANGUL SYLLABLE EOH
	if(0xc5b5<=code&&code<=0xc5cf){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc5d1){// Lo       HANGUL SYLLABLE E
	if(0xc5d0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE EG..HANGUL SYLLABLE EH
	if(0xc5d1<=code&&code<=0xc5eb){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xc5ed){// Lo       HANGUL SYLLABLE YEO
	if(0xc5ec===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc608){// Lo  [27] HANGUL SYLLABLE YEOG..HANGUL SYLLABLE YEOH
	if(0xc5ed<=code&&code<=0xc607){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE YE
	if(0xc608===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}}else {if(code<0xc73c){if(code<0xc695){if(code<0xc65c){if(code<0xc625){if(code<0xc624){// Lo  [27] HANGUL SYLLABLE YEG..HANGUL SYLLABLE YEH
	if(0xc609<=code&&code<=0xc623){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE O
	if(0xc624===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xc640){// Lo  [27] HANGUL SYLLABLE OG..HANGUL SYLLABLE OH
	if(0xc625<=code&&code<=0xc63f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc641){// Lo       HANGUL SYLLABLE WA
	if(0xc640===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE WAG..HANGUL SYLLABLE WAH
	if(0xc641<=code&&code<=0xc65b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xc678){if(code<0xc65d){// Lo       HANGUL SYLLABLE WAE
	if(0xc65c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE WAEG..HANGUL SYLLABLE WAEH
	if(0xc65d<=code&&code<=0xc677){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xc679){// Lo       HANGUL SYLLABLE OE
	if(0xc678===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc694){// Lo  [27] HANGUL SYLLABLE OEG..HANGUL SYLLABLE OEH
	if(0xc679<=code&&code<=0xc693){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE YO
	if(0xc694===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xc6e8){if(code<0xc6b1){if(code<0xc6b0){// Lo  [27] HANGUL SYLLABLE YOG..HANGUL SYLLABLE YOH
	if(0xc695<=code&&code<=0xc6af){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE U
	if(0xc6b0===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xc6cc){// Lo  [27] HANGUL SYLLABLE UG..HANGUL SYLLABLE UH
	if(0xc6b1<=code&&code<=0xc6cb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc6cd){// Lo       HANGUL SYLLABLE WEO
	if(0xc6cc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE WEOG..HANGUL SYLLABLE WEOH
	if(0xc6cd<=code&&code<=0xc6e7){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xc705){if(code<0xc6e9){// Lo       HANGUL SYLLABLE WE
	if(0xc6e8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc704){// Lo  [27] HANGUL SYLLABLE WEG..HANGUL SYLLABLE WEH
	if(0xc6e9<=code&&code<=0xc703){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE WI
	if(0xc704===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xc720){// Lo  [27] HANGUL SYLLABLE WIG..HANGUL SYLLABLE WIH
	if(0xc705<=code&&code<=0xc71f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc721){// Lo       HANGUL SYLLABLE YU
	if(0xc720===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE YUG..HANGUL SYLLABLE YUH
	if(0xc721<=code&&code<=0xc73b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}else {if(code<0xc7c9){if(code<0xc775){if(code<0xc758){if(code<0xc73d){// Lo       HANGUL SYLLABLE EU
	if(0xc73c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE EUG..HANGUL SYLLABLE EUH
	if(0xc73d<=code&&code<=0xc757){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xc759){// Lo       HANGUL SYLLABLE YI
	if(0xc758===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc774){// Lo  [27] HANGUL SYLLABLE YIG..HANGUL SYLLABLE YIH
	if(0xc759<=code&&code<=0xc773){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE I
	if(0xc774===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xc7ac){if(code<0xc790){// Lo  [27] HANGUL SYLLABLE IG..HANGUL SYLLABLE IH
	if(0xc775<=code&&code<=0xc78f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc791){// Lo       HANGUL SYLLABLE JA
	if(0xc790===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JAG..HANGUL SYLLABLE JAH
	if(0xc791<=code&&code<=0xc7ab){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xc7ad){// Lo       HANGUL SYLLABLE JAE
	if(0xc7ac===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc7c8){// Lo  [27] HANGUL SYLLABLE JAEG..HANGUL SYLLABLE JAEH
	if(0xc7ad<=code&&code<=0xc7c7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JYA
	if(0xc7c8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xc81c){if(code<0xc7e5){if(code<0xc7e4){// Lo  [27] HANGUL SYLLABLE JYAG..HANGUL SYLLABLE JYAH
	if(0xc7c9<=code&&code<=0xc7e3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JYAE
	if(0xc7e4===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xc800){// Lo  [27] HANGUL SYLLABLE JYAEG..HANGUL SYLLABLE JYAEH
	if(0xc7e5<=code&&code<=0xc7ff){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc801){// Lo       HANGUL SYLLABLE JEO
	if(0xc800===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JEOG..HANGUL SYLLABLE JEOH
	if(0xc801<=code&&code<=0xc81b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xc839){if(code<0xc81d){// Lo       HANGUL SYLLABLE JE
	if(0xc81c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc838){// Lo  [27] HANGUL SYLLABLE JEG..HANGUL SYLLABLE JEH
	if(0xc81d<=code&&code<=0xc837){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JYEO
	if(0xc838===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xc854){// Lo  [27] HANGUL SYLLABLE JYEOG..HANGUL SYLLABLE JYEOH
	if(0xc839<=code&&code<=0xc853){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc855){// Lo       HANGUL SYLLABLE JYE
	if(0xc854===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JYEG..HANGUL SYLLABLE JYEH
	if(0xc855<=code&&code<=0xc86f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}}}}else {if(code<0xcd24){if(code<0xcabd){if(code<0xc989){if(code<0xc8fc){if(code<0xc8a9){if(code<0xc88c){if(code<0xc871){// Lo       HANGUL SYLLABLE JO
	if(0xc870===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JOG..HANGUL SYLLABLE JOH
	if(0xc871<=code&&code<=0xc88b){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xc88d){// Lo       HANGUL SYLLABLE JWA
	if(0xc88c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc8a8){// Lo  [27] HANGUL SYLLABLE JWAG..HANGUL SYLLABLE JWAH
	if(0xc88d<=code&&code<=0xc8a7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JWAE
	if(0xc8a8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xc8c5){if(code<0xc8c4){// Lo  [27] HANGUL SYLLABLE JWAEG..HANGUL SYLLABLE JWAEH
	if(0xc8a9<=code&&code<=0xc8c3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JOE
	if(0xc8c4===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xc8e0){// Lo  [27] HANGUL SYLLABLE JOEG..HANGUL SYLLABLE JOEH
	if(0xc8c5<=code&&code<=0xc8df){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc8e1){// Lo       HANGUL SYLLABLE JYO
	if(0xc8e0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JYOG..HANGUL SYLLABLE JYOH
	if(0xc8e1<=code&&code<=0xc8fb){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xc935){if(code<0xc918){if(code<0xc8fd){// Lo       HANGUL SYLLABLE JU
	if(0xc8fc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JUG..HANGUL SYLLABLE JUH
	if(0xc8fd<=code&&code<=0xc917){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xc919){// Lo       HANGUL SYLLABLE JWEO
	if(0xc918===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc934){// Lo  [27] HANGUL SYLLABLE JWEOG..HANGUL SYLLABLE JWEOH
	if(0xc919<=code&&code<=0xc933){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JWE
	if(0xc934===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xc96c){if(code<0xc950){// Lo  [27] HANGUL SYLLABLE JWEG..HANGUL SYLLABLE JWEH
	if(0xc935<=code&&code<=0xc94f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc951){// Lo       HANGUL SYLLABLE JWI
	if(0xc950===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JWIG..HANGUL SYLLABLE JWIH
	if(0xc951<=code&&code<=0xc96b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xc96d){// Lo       HANGUL SYLLABLE JYU
	if(0xc96c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc988){// Lo  [27] HANGUL SYLLABLE JYUG..HANGUL SYLLABLE JYUH
	if(0xc96d<=code&&code<=0xc987){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JEU
	if(0xc988===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}else {if(code<0xca30){if(code<0xc9dc){if(code<0xc9a5){if(code<0xc9a4){// Lo  [27] HANGUL SYLLABLE JEUG..HANGUL SYLLABLE JEUH
	if(0xc989<=code&&code<=0xc9a3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JYI
	if(0xc9a4===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xc9c0){// Lo  [27] HANGUL SYLLABLE JYIG..HANGUL SYLLABLE JYIH
	if(0xc9a5<=code&&code<=0xc9bf){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc9c1){// Lo       HANGUL SYLLABLE JI
	if(0xc9c0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JIG..HANGUL SYLLABLE JIH
	if(0xc9c1<=code&&code<=0xc9db){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xc9f9){if(code<0xc9dd){// Lo       HANGUL SYLLABLE JJA
	if(0xc9dc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc9f8){// Lo  [27] HANGUL SYLLABLE JJAG..HANGUL SYLLABLE JJAH
	if(0xc9dd<=code&&code<=0xc9f7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JJAE
	if(0xc9f8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xca14){// Lo  [27] HANGUL SYLLABLE JJAEG..HANGUL SYLLABLE JJAEH
	if(0xc9f9<=code&&code<=0xca13){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xca15){// Lo       HANGUL SYLLABLE JJYA
	if(0xca14===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JJYAG..HANGUL SYLLABLE JJYAH
	if(0xca15<=code&&code<=0xca2f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xca69){if(code<0xca4c){if(code<0xca31){// Lo       HANGUL SYLLABLE JJYAE
	if(0xca30===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JJYAEG..HANGUL SYLLABLE JJYAEH
	if(0xca31<=code&&code<=0xca4b){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xca4d){// Lo       HANGUL SYLLABLE JJEO
	if(0xca4c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xca68){// Lo  [27] HANGUL SYLLABLE JJEOG..HANGUL SYLLABLE JJEOH
	if(0xca4d<=code&&code<=0xca67){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JJE
	if(0xca68===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xcaa0){if(code<0xca84){// Lo  [27] HANGUL SYLLABLE JJEG..HANGUL SYLLABLE JJEH
	if(0xca69<=code&&code<=0xca83){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xca85){// Lo       HANGUL SYLLABLE JJYEO
	if(0xca84===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JJYEOG..HANGUL SYLLABLE JJYEOH
	if(0xca85<=code&&code<=0xca9f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xcaa1){// Lo       HANGUL SYLLABLE JJYE
	if(0xcaa0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xcabc){// Lo  [27] HANGUL SYLLABLE JJYEG..HANGUL SYLLABLE JJYEH
	if(0xcaa1<=code&&code<=0xcabb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JJO
	if(0xcabc===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}}else {if(code<0xcbf0){if(code<0xcb49){if(code<0xcb10){if(code<0xcad9){if(code<0xcad8){// Lo  [27] HANGUL SYLLABLE JJOG..HANGUL SYLLABLE JJOH
	if(0xcabd<=code&&code<=0xcad7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JJWA
	if(0xcad8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xcaf4){// Lo  [27] HANGUL SYLLABLE JJWAG..HANGUL SYLLABLE JJWAH
	if(0xcad9<=code&&code<=0xcaf3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xcaf5){// Lo       HANGUL SYLLABLE JJWAE
	if(0xcaf4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JJWAEG..HANGUL SYLLABLE JJWAEH
	if(0xcaf5<=code&&code<=0xcb0f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xcb2c){if(code<0xcb11){// Lo       HANGUL SYLLABLE JJOE
	if(0xcb10===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JJOEG..HANGUL SYLLABLE JJOEH
	if(0xcb11<=code&&code<=0xcb2b){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xcb2d){// Lo       HANGUL SYLLABLE JJYO
	if(0xcb2c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xcb48){// Lo  [27] HANGUL SYLLABLE JJYOG..HANGUL SYLLABLE JJYOH
	if(0xcb2d<=code&&code<=0xcb47){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JJU
	if(0xcb48===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xcb9c){if(code<0xcb65){if(code<0xcb64){// Lo  [27] HANGUL SYLLABLE JJUG..HANGUL SYLLABLE JJUH
	if(0xcb49<=code&&code<=0xcb63){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JJWEO
	if(0xcb64===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xcb80){// Lo  [27] HANGUL SYLLABLE JJWEOG..HANGUL SYLLABLE JJWEOH
	if(0xcb65<=code&&code<=0xcb7f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xcb81){// Lo       HANGUL SYLLABLE JJWE
	if(0xcb80===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JJWEG..HANGUL SYLLABLE JJWEH
	if(0xcb81<=code&&code<=0xcb9b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xcbb9){if(code<0xcb9d){// Lo       HANGUL SYLLABLE JJWI
	if(0xcb9c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xcbb8){// Lo  [27] HANGUL SYLLABLE JJWIG..HANGUL SYLLABLE JJWIH
	if(0xcb9d<=code&&code<=0xcbb7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JJYU
	if(0xcbb8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xcbd4){// Lo  [27] HANGUL SYLLABLE JJYUG..HANGUL SYLLABLE JJYUH
	if(0xcbb9<=code&&code<=0xcbd3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xcbd5){// Lo       HANGUL SYLLABLE JJEU
	if(0xcbd4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JJEUG..HANGUL SYLLABLE JJEUH
	if(0xcbd5<=code&&code<=0xcbef){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}else {if(code<0xcc7d){if(code<0xcc29){if(code<0xcc0c){if(code<0xcbf1){// Lo       HANGUL SYLLABLE JJYI
	if(0xcbf0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JJYIG..HANGUL SYLLABLE JJYIH
	if(0xcbf1<=code&&code<=0xcc0b){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xcc0d){// Lo       HANGUL SYLLABLE JJI
	if(0xcc0c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xcc28){// Lo  [27] HANGUL SYLLABLE JJIG..HANGUL SYLLABLE JJIH
	if(0xcc0d<=code&&code<=0xcc27){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE CA
	if(0xcc28===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xcc60){if(code<0xcc44){// Lo  [27] HANGUL SYLLABLE CAG..HANGUL SYLLABLE CAH
	if(0xcc29<=code&&code<=0xcc43){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xcc45){// Lo       HANGUL SYLLABLE CAE
	if(0xcc44===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE CAEG..HANGUL SYLLABLE CAEH
	if(0xcc45<=code&&code<=0xcc5f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xcc61){// Lo       HANGUL SYLLABLE CYA
	if(0xcc60===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xcc7c){// Lo  [27] HANGUL SYLLABLE CYAG..HANGUL SYLLABLE CYAH
	if(0xcc61<=code&&code<=0xcc7b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE CYAE
	if(0xcc7c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xccd0){if(code<0xcc99){if(code<0xcc98){// Lo  [27] HANGUL SYLLABLE CYAEG..HANGUL SYLLABLE CYAEH
	if(0xcc7d<=code&&code<=0xcc97){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE CEO
	if(0xcc98===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xccb4){// Lo  [27] HANGUL SYLLABLE CEOG..HANGUL SYLLABLE CEOH
	if(0xcc99<=code&&code<=0xccb3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xccb5){// Lo       HANGUL SYLLABLE CE
	if(0xccb4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE CEG..HANGUL SYLLABLE CEH
	if(0xccb5<=code&&code<=0xcccf){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xcced){if(code<0xccd1){// Lo       HANGUL SYLLABLE CYEO
	if(0xccd0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xccec){// Lo  [27] HANGUL SYLLABLE CYEOG..HANGUL SYLLABLE CYEOH
	if(0xccd1<=code&&code<=0xcceb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE CYE
	if(0xccec===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xcd08){// Lo  [27] HANGUL SYLLABLE CYEG..HANGUL SYLLABLE CYEH
	if(0xcced<=code&&code<=0xcd07){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xcd09){// Lo       HANGUL SYLLABLE CO
	if(0xcd08===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE COG..HANGUL SYLLABLE COH
	if(0xcd09<=code&&code<=0xcd23){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}}}else {if(code<0xcf71){if(code<0xce3d){if(code<0xcdb0){if(code<0xcd5d){if(code<0xcd40){if(code<0xcd25){// Lo       HANGUL SYLLABLE CWA
	if(0xcd24===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE CWAG..HANGUL SYLLABLE CWAH
	if(0xcd25<=code&&code<=0xcd3f){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xcd41){// Lo       HANGUL SYLLABLE CWAE
	if(0xcd40===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xcd5c){// Lo  [27] HANGUL SYLLABLE CWAEG..HANGUL SYLLABLE CWAEH
	if(0xcd41<=code&&code<=0xcd5b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE COE
	if(0xcd5c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xcd79){if(code<0xcd78){// Lo  [27] HANGUL SYLLABLE COEG..HANGUL SYLLABLE COEH
	if(0xcd5d<=code&&code<=0xcd77){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE CYO
	if(0xcd78===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xcd94){// Lo  [27] HANGUL SYLLABLE CYOG..HANGUL SYLLABLE CYOH
	if(0xcd79<=code&&code<=0xcd93){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xcd95){// Lo       HANGUL SYLLABLE CU
	if(0xcd94===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE CUG..HANGUL SYLLABLE CUH
	if(0xcd95<=code&&code<=0xcdaf){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xcde9){if(code<0xcdcc){if(code<0xcdb1){// Lo       HANGUL SYLLABLE CWEO
	if(0xcdb0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE CWEOG..HANGUL SYLLABLE CWEOH
	if(0xcdb1<=code&&code<=0xcdcb){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xcdcd){// Lo       HANGUL SYLLABLE CWE
	if(0xcdcc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xcde8){// Lo  [27] HANGUL SYLLABLE CWEG..HANGUL SYLLABLE CWEH
	if(0xcdcd<=code&&code<=0xcde7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE CWI
	if(0xcde8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xce20){if(code<0xce04){// Lo  [27] HANGUL SYLLABLE CWIG..HANGUL SYLLABLE CWIH
	if(0xcde9<=code&&code<=0xce03){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xce05){// Lo       HANGUL SYLLABLE CYU
	if(0xce04===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE CYUG..HANGUL SYLLABLE CYUH
	if(0xce05<=code&&code<=0xce1f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xce21){// Lo       HANGUL SYLLABLE CEU
	if(0xce20===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xce3c){// Lo  [27] HANGUL SYLLABLE CEUG..HANGUL SYLLABLE CEUH
	if(0xce21<=code&&code<=0xce3b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE CYI
	if(0xce3c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}else {if(code<0xcee4){if(code<0xce90){if(code<0xce59){if(code<0xce58){// Lo  [27] HANGUL SYLLABLE CYIG..HANGUL SYLLABLE CYIH
	if(0xce3d<=code&&code<=0xce57){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE CI
	if(0xce58===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xce74){// Lo  [27] HANGUL SYLLABLE CIG..HANGUL SYLLABLE CIH
	if(0xce59<=code&&code<=0xce73){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xce75){// Lo       HANGUL SYLLABLE KA
	if(0xce74===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE KAG..HANGUL SYLLABLE KAH
	if(0xce75<=code&&code<=0xce8f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xcead){if(code<0xce91){// Lo       HANGUL SYLLABLE KAE
	if(0xce90===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xceac){// Lo  [27] HANGUL SYLLABLE KAEG..HANGUL SYLLABLE KAEH
	if(0xce91<=code&&code<=0xceab){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE KYA
	if(0xceac===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xcec8){// Lo  [27] HANGUL SYLLABLE KYAG..HANGUL SYLLABLE KYAH
	if(0xcead<=code&&code<=0xcec7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xcec9){// Lo       HANGUL SYLLABLE KYAE
	if(0xcec8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE KYAEG..HANGUL SYLLABLE KYAEH
	if(0xcec9<=code&&code<=0xcee3){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xcf1d){if(code<0xcf00){if(code<0xcee5){// Lo       HANGUL SYLLABLE KEO
	if(0xcee4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE KEOG..HANGUL SYLLABLE KEOH
	if(0xcee5<=code&&code<=0xceff){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xcf01){// Lo       HANGUL SYLLABLE KE
	if(0xcf00===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xcf1c){// Lo  [27] HANGUL SYLLABLE KEG..HANGUL SYLLABLE KEH
	if(0xcf01<=code&&code<=0xcf1b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE KYEO
	if(0xcf1c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xcf54){if(code<0xcf38){// Lo  [27] HANGUL SYLLABLE KYEOG..HANGUL SYLLABLE KYEOH
	if(0xcf1d<=code&&code<=0xcf37){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xcf39){// Lo       HANGUL SYLLABLE KYE
	if(0xcf38===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE KYEG..HANGUL SYLLABLE KYEH
	if(0xcf39<=code&&code<=0xcf53){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xcf55){// Lo       HANGUL SYLLABLE KO
	if(0xcf54===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xcf70){// Lo  [27] HANGUL SYLLABLE KOG..HANGUL SYLLABLE KOH
	if(0xcf55<=code&&code<=0xcf6f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE KWA
	if(0xcf70===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}}else {if(code<0xd0a4){if(code<0xcffd){if(code<0xcfc4){if(code<0xcf8d){if(code<0xcf8c){// Lo  [27] HANGUL SYLLABLE KWAG..HANGUL SYLLABLE KWAH
	if(0xcf71<=code&&code<=0xcf8b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE KWAE
	if(0xcf8c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xcfa8){// Lo  [27] HANGUL SYLLABLE KWAEG..HANGUL SYLLABLE KWAEH
	if(0xcf8d<=code&&code<=0xcfa7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xcfa9){// Lo       HANGUL SYLLABLE KOE
	if(0xcfa8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE KOEG..HANGUL SYLLABLE KOEH
	if(0xcfa9<=code&&code<=0xcfc3){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xcfe0){if(code<0xcfc5){// Lo       HANGUL SYLLABLE KYO
	if(0xcfc4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE KYOG..HANGUL SYLLABLE KYOH
	if(0xcfc5<=code&&code<=0xcfdf){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xcfe1){// Lo       HANGUL SYLLABLE KU
	if(0xcfe0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xcffc){// Lo  [27] HANGUL SYLLABLE KUG..HANGUL SYLLABLE KUH
	if(0xcfe1<=code&&code<=0xcffb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE KWEO
	if(0xcffc===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xd050){if(code<0xd019){if(code<0xd018){// Lo  [27] HANGUL SYLLABLE KWEOG..HANGUL SYLLABLE KWEOH
	if(0xcffd<=code&&code<=0xd017){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE KWE
	if(0xd018===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xd034){// Lo  [27] HANGUL SYLLABLE KWEG..HANGUL SYLLABLE KWEH
	if(0xd019<=code&&code<=0xd033){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd035){// Lo       HANGUL SYLLABLE KWI
	if(0xd034===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE KWIG..HANGUL SYLLABLE KWIH
	if(0xd035<=code&&code<=0xd04f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xd06d){if(code<0xd051){// Lo       HANGUL SYLLABLE KYU
	if(0xd050===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd06c){// Lo  [27] HANGUL SYLLABLE KYUG..HANGUL SYLLABLE KYUH
	if(0xd051<=code&&code<=0xd06b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE KEU
	if(0xd06c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xd088){// Lo  [27] HANGUL SYLLABLE KEUG..HANGUL SYLLABLE KEUH
	if(0xd06d<=code&&code<=0xd087){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd089){// Lo       HANGUL SYLLABLE KYI
	if(0xd088===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE KYIG..HANGUL SYLLABLE KYIH
	if(0xd089<=code&&code<=0xd0a3){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}else {if(code<0xd131){if(code<0xd0dd){if(code<0xd0c0){if(code<0xd0a5){// Lo       HANGUL SYLLABLE KI
	if(0xd0a4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE KIG..HANGUL SYLLABLE KIH
	if(0xd0a5<=code&&code<=0xd0bf){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xd0c1){// Lo       HANGUL SYLLABLE TA
	if(0xd0c0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd0dc){// Lo  [27] HANGUL SYLLABLE TAG..HANGUL SYLLABLE TAH
	if(0xd0c1<=code&&code<=0xd0db){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE TAE
	if(0xd0dc===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xd114){if(code<0xd0f8){// Lo  [27] HANGUL SYLLABLE TAEG..HANGUL SYLLABLE TAEH
	if(0xd0dd<=code&&code<=0xd0f7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd0f9){// Lo       HANGUL SYLLABLE TYA
	if(0xd0f8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE TYAG..HANGUL SYLLABLE TYAH
	if(0xd0f9<=code&&code<=0xd113){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xd115){// Lo       HANGUL SYLLABLE TYAE
	if(0xd114===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd130){// Lo  [27] HANGUL SYLLABLE TYAEG..HANGUL SYLLABLE TYAEH
	if(0xd115<=code&&code<=0xd12f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE TEO
	if(0xd130===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xd184){if(code<0xd14d){if(code<0xd14c){// Lo  [27] HANGUL SYLLABLE TEOG..HANGUL SYLLABLE TEOH
	if(0xd131<=code&&code<=0xd14b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE TE
	if(0xd14c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xd168){// Lo  [27] HANGUL SYLLABLE TEG..HANGUL SYLLABLE TEH
	if(0xd14d<=code&&code<=0xd167){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd169){// Lo       HANGUL SYLLABLE TYEO
	if(0xd168===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE TYEOG..HANGUL SYLLABLE TYEOH
	if(0xd169<=code&&code<=0xd183){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xd1a1){if(code<0xd185){// Lo       HANGUL SYLLABLE TYE
	if(0xd184===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd1a0){// Lo  [27] HANGUL SYLLABLE TYEG..HANGUL SYLLABLE TYEH
	if(0xd185<=code&&code<=0xd19f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE TO
	if(0xd1a0===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xd1bc){// Lo  [27] HANGUL SYLLABLE TOG..HANGUL SYLLABLE TOH
	if(0xd1a1<=code&&code<=0xd1bb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd1bd){// Lo       HANGUL SYLLABLE TWA
	if(0xd1bc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE TWAG..HANGUL SYLLABLE TWAH
	if(0xd1bd<=code&&code<=0xd1d7){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}}}}}else {if(code<0x1133b){if(code<0xd671){if(code<0xd424){if(code<0xd2f1){if(code<0xd264){if(code<0xd211){if(code<0xd1f4){if(code<0xd1d9){// Lo       HANGUL SYLLABLE TWAE
	if(0xd1d8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE TWAEG..HANGUL SYLLABLE TWAEH
	if(0xd1d9<=code&&code<=0xd1f3){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xd1f5){// Lo       HANGUL SYLLABLE TOE
	if(0xd1f4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd210){// Lo  [27] HANGUL SYLLABLE TOEG..HANGUL SYLLABLE TOEH
	if(0xd1f5<=code&&code<=0xd20f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE TYO
	if(0xd210===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xd22d){if(code<0xd22c){// Lo  [27] HANGUL SYLLABLE TYOG..HANGUL SYLLABLE TYOH
	if(0xd211<=code&&code<=0xd22b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE TU
	if(0xd22c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xd248){// Lo  [27] HANGUL SYLLABLE TUG..HANGUL SYLLABLE TUH
	if(0xd22d<=code&&code<=0xd247){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd249){// Lo       HANGUL SYLLABLE TWEO
	if(0xd248===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE TWEOG..HANGUL SYLLABLE TWEOH
	if(0xd249<=code&&code<=0xd263){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xd29d){if(code<0xd280){if(code<0xd265){// Lo       HANGUL SYLLABLE TWE
	if(0xd264===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE TWEG..HANGUL SYLLABLE TWEH
	if(0xd265<=code&&code<=0xd27f){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xd281){// Lo       HANGUL SYLLABLE TWI
	if(0xd280===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd29c){// Lo  [27] HANGUL SYLLABLE TWIG..HANGUL SYLLABLE TWIH
	if(0xd281<=code&&code<=0xd29b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE TYU
	if(0xd29c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xd2d4){if(code<0xd2b8){// Lo  [27] HANGUL SYLLABLE TYUG..HANGUL SYLLABLE TYUH
	if(0xd29d<=code&&code<=0xd2b7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd2b9){// Lo       HANGUL SYLLABLE TEU
	if(0xd2b8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE TEUG..HANGUL SYLLABLE TEUH
	if(0xd2b9<=code&&code<=0xd2d3){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xd2d5){// Lo       HANGUL SYLLABLE TYI
	if(0xd2d4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd2f0){// Lo  [27] HANGUL SYLLABLE TYIG..HANGUL SYLLABLE TYIH
	if(0xd2d5<=code&&code<=0xd2ef){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE TI
	if(0xd2f0===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}else {if(code<0xd37d){if(code<0xd344){if(code<0xd30d){if(code<0xd30c){// Lo  [27] HANGUL SYLLABLE TIG..HANGUL SYLLABLE TIH
	if(0xd2f1<=code&&code<=0xd30b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE PA
	if(0xd30c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xd328){// Lo  [27] HANGUL SYLLABLE PAG..HANGUL SYLLABLE PAH
	if(0xd30d<=code&&code<=0xd327){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd329){// Lo       HANGUL SYLLABLE PAE
	if(0xd328===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE PAEG..HANGUL SYLLABLE PAEH
	if(0xd329<=code&&code<=0xd343){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xd360){if(code<0xd345){// Lo       HANGUL SYLLABLE PYA
	if(0xd344===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE PYAG..HANGUL SYLLABLE PYAH
	if(0xd345<=code&&code<=0xd35f){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xd361){// Lo       HANGUL SYLLABLE PYAE
	if(0xd360===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd37c){// Lo  [27] HANGUL SYLLABLE PYAEG..HANGUL SYLLABLE PYAEH
	if(0xd361<=code&&code<=0xd37b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE PEO
	if(0xd37c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xd3d0){if(code<0xd399){if(code<0xd398){// Lo  [27] HANGUL SYLLABLE PEOG..HANGUL SYLLABLE PEOH
	if(0xd37d<=code&&code<=0xd397){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE PE
	if(0xd398===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xd3b4){// Lo  [27] HANGUL SYLLABLE PEG..HANGUL SYLLABLE PEH
	if(0xd399<=code&&code<=0xd3b3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd3b5){// Lo       HANGUL SYLLABLE PYEO
	if(0xd3b4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE PYEOG..HANGUL SYLLABLE PYEOH
	if(0xd3b5<=code&&code<=0xd3cf){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xd3ed){if(code<0xd3d1){// Lo       HANGUL SYLLABLE PYE
	if(0xd3d0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd3ec){// Lo  [27] HANGUL SYLLABLE PYEG..HANGUL SYLLABLE PYEH
	if(0xd3d1<=code&&code<=0xd3eb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE PO
	if(0xd3ec===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xd408){// Lo  [27] HANGUL SYLLABLE POG..HANGUL SYLLABLE POH
	if(0xd3ed<=code&&code<=0xd407){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd409){// Lo       HANGUL SYLLABLE PWA
	if(0xd408===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE PWAG..HANGUL SYLLABLE PWAH
	if(0xd409<=code&&code<=0xd423){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}}else {if(code<0xd53d){if(code<0xd4b0){if(code<0xd45d){if(code<0xd440){if(code<0xd425){// Lo       HANGUL SYLLABLE PWAE
	if(0xd424===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE PWAEG..HANGUL SYLLABLE PWAEH
	if(0xd425<=code&&code<=0xd43f){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xd441){// Lo       HANGUL SYLLABLE POE
	if(0xd440===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd45c){// Lo  [27] HANGUL SYLLABLE POEG..HANGUL SYLLABLE POEH
	if(0xd441<=code&&code<=0xd45b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE PYO
	if(0xd45c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xd479){if(code<0xd478){// Lo  [27] HANGUL SYLLABLE PYOG..HANGUL SYLLABLE PYOH
	if(0xd45d<=code&&code<=0xd477){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE PU
	if(0xd478===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xd494){// Lo  [27] HANGUL SYLLABLE PUG..HANGUL SYLLABLE PUH
	if(0xd479<=code&&code<=0xd493){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd495){// Lo       HANGUL SYLLABLE PWEO
	if(0xd494===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE PWEOG..HANGUL SYLLABLE PWEOH
	if(0xd495<=code&&code<=0xd4af){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xd4e9){if(code<0xd4cc){if(code<0xd4b1){// Lo       HANGUL SYLLABLE PWE
	if(0xd4b0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE PWEG..HANGUL SYLLABLE PWEH
	if(0xd4b1<=code&&code<=0xd4cb){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xd4cd){// Lo       HANGUL SYLLABLE PWI
	if(0xd4cc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd4e8){// Lo  [27] HANGUL SYLLABLE PWIG..HANGUL SYLLABLE PWIH
	if(0xd4cd<=code&&code<=0xd4e7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE PYU
	if(0xd4e8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xd520){if(code<0xd504){// Lo  [27] HANGUL SYLLABLE PYUG..HANGUL SYLLABLE PYUH
	if(0xd4e9<=code&&code<=0xd503){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd505){// Lo       HANGUL SYLLABLE PEU
	if(0xd504===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE PEUG..HANGUL SYLLABLE PEUH
	if(0xd505<=code&&code<=0xd51f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xd521){// Lo       HANGUL SYLLABLE PYI
	if(0xd520===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd53c){// Lo  [27] HANGUL SYLLABLE PYIG..HANGUL SYLLABLE PYIH
	if(0xd521<=code&&code<=0xd53b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE PI
	if(0xd53c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}else {if(code<0xd5e4){if(code<0xd590){if(code<0xd559){if(code<0xd558){// Lo  [27] HANGUL SYLLABLE PIG..HANGUL SYLLABLE PIH
	if(0xd53d<=code&&code<=0xd557){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE HA
	if(0xd558===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xd574){// Lo  [27] HANGUL SYLLABLE HAG..HANGUL SYLLABLE HAH
	if(0xd559<=code&&code<=0xd573){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd575){// Lo       HANGUL SYLLABLE HAE
	if(0xd574===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE HAEG..HANGUL SYLLABLE HAEH
	if(0xd575<=code&&code<=0xd58f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xd5ad){if(code<0xd591){// Lo       HANGUL SYLLABLE HYA
	if(0xd590===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd5ac){// Lo  [27] HANGUL SYLLABLE HYAG..HANGUL SYLLABLE HYAH
	if(0xd591<=code&&code<=0xd5ab){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE HYAE
	if(0xd5ac===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xd5c8){// Lo  [27] HANGUL SYLLABLE HYAEG..HANGUL SYLLABLE HYAEH
	if(0xd5ad<=code&&code<=0xd5c7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd5c9){// Lo       HANGUL SYLLABLE HEO
	if(0xd5c8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE HEOG..HANGUL SYLLABLE HEOH
	if(0xd5c9<=code&&code<=0xd5e3){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xd61d){if(code<0xd600){if(code<0xd5e5){// Lo       HANGUL SYLLABLE HE
	if(0xd5e4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE HEG..HANGUL SYLLABLE HEH
	if(0xd5e5<=code&&code<=0xd5ff){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xd601){// Lo       HANGUL SYLLABLE HYEO
	if(0xd600===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd61c){// Lo  [27] HANGUL SYLLABLE HYEOG..HANGUL SYLLABLE HYEOH
	if(0xd601<=code&&code<=0xd61b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE HYE
	if(0xd61c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xd654){if(code<0xd638){// Lo  [27] HANGUL SYLLABLE HYEG..HANGUL SYLLABLE HYEH
	if(0xd61d<=code&&code<=0xd637){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd639){// Lo       HANGUL SYLLABLE HO
	if(0xd638===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE HOG..HANGUL SYLLABLE HOH
	if(0xd639<=code&&code<=0xd653){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xd655){// Lo       HANGUL SYLLABLE HWA
	if(0xd654===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd670){// Lo  [27] HANGUL SYLLABLE HWAG..HANGUL SYLLABLE HWAH
	if(0xd655<=code&&code<=0xd66f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE HWAE
	if(0xd670===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}}}else {if(code<0x11000){if(code<0xd7b0){if(code<0xd6fd){if(code<0xd6c4){if(code<0xd68d){if(code<0xd68c){// Lo  [27] HANGUL SYLLABLE HWAEG..HANGUL SYLLABLE HWAEH
	if(0xd671<=code&&code<=0xd68b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE HOE
	if(0xd68c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xd6a8){// Lo  [27] HANGUL SYLLABLE HOEG..HANGUL SYLLABLE HOEH
	if(0xd68d<=code&&code<=0xd6a7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd6a9){// Lo       HANGUL SYLLABLE HYO
	if(0xd6a8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE HYOG..HANGUL SYLLABLE HYOH
	if(0xd6a9<=code&&code<=0xd6c3){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xd6e0){if(code<0xd6c5){// Lo       HANGUL SYLLABLE HU
	if(0xd6c4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE HUG..HANGUL SYLLABLE HUH
	if(0xd6c5<=code&&code<=0xd6df){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xd6e1){// Lo       HANGUL SYLLABLE HWEO
	if(0xd6e0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd6fc){// Lo  [27] HANGUL SYLLABLE HWEOG..HANGUL SYLLABLE HWEOH
	if(0xd6e1<=code&&code<=0xd6fb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE HWE
	if(0xd6fc===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xd750){if(code<0xd719){if(code<0xd718){// Lo  [27] HANGUL SYLLABLE HWEG..HANGUL SYLLABLE HWEH
	if(0xd6fd<=code&&code<=0xd717){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE HWI
	if(0xd718===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xd734){// Lo  [27] HANGUL SYLLABLE HWIG..HANGUL SYLLABLE HWIH
	if(0xd719<=code&&code<=0xd733){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd735){// Lo       HANGUL SYLLABLE HYU
	if(0xd734===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE HYUG..HANGUL SYLLABLE HYUH
	if(0xd735<=code&&code<=0xd74f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xd76d){if(code<0xd751){// Lo       HANGUL SYLLABLE HEU
	if(0xd750===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd76c){// Lo  [27] HANGUL SYLLABLE HEUG..HANGUL SYLLABLE HEUH
	if(0xd751<=code&&code<=0xd76b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE HYI
	if(0xd76c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xd788){// Lo  [27] HANGUL SYLLABLE HYIG..HANGUL SYLLABLE HYIH
	if(0xd76d<=code&&code<=0xd787){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd789){// Lo       HANGUL SYLLABLE HI
	if(0xd788===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE HIG..HANGUL SYLLABLE HIH
	if(0xd789<=code&&code<=0xd7a3){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}else {if(code<0x10a01){if(code<0xfeff){if(code<0xfb1e){if(code<0xd7cb){// Lo  [23] HANGUL JUNGSEONG O-YEO..HANGUL JUNGSEONG ARAEA-E
	if(0xd7b0<=code&&code<=0xd7c6){return boundaries_1.CLUSTER_BREAK.V;}}else {// Lo  [49] HANGUL JONGSEONG NIEUN-RIEUL..HANGUL JONGSEONG PHIEUPH-THIEUTH
	if(0xd7cb<=code&&code<=0xd7fb){return boundaries_1.CLUSTER_BREAK.T;}}}else {if(code<0xfe00){// Mn       HEBREW POINT JUDEO-SPANISH VARIKA
	if(0xfb1e===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xfe20){// Mn  [16] VARIATION SELECTOR-1..VARIATION SELECTOR-16
	if(0xfe00<=code&&code<=0xfe0f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn  [16] COMBINING LIGATURE LEFT HALF..COMBINING CYRILLIC TITLO RIGHT HALF
	if(0xfe20<=code&&code<=0xfe2f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x101fd){if(code<0xff9e){// Cf       ZERO WIDTH NO-BREAK SPACE
	if(0xfeff===code){return boundaries_1.CLUSTER_BREAK.CONTROL;}}else {if(code<0xfff0){// Lm   [2] HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK
	if(0xff9e<=code&&code<=0xff9f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Cn   [9] <reserved-FFF0>..<reserved-FFF8>
	// Cf   [3] INTERLINEAR ANNOTATION ANCHOR..INTERLINEAR ANNOTATION TERMINATOR
	if(0xfff0<=code&&code<=0xfffb){return boundaries_1.CLUSTER_BREAK.CONTROL;}}}}else {if(code<0x102e0){// Mn       PHAISTOS DISC SIGN COMBINING OBLIQUE STROKE
	if(0x101fd===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x10376){// Mn       COPTIC EPACT THOUSANDS MARK
	if(0x102e0===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [5] COMBINING OLD PERMIC LETTER AN..COMBINING OLD PERMIC LETTER SII
	if(0x10376<=code&&code<=0x1037a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0x10ae5){if(code<0x10a0c){if(code<0x10a05){// Mn   [3] KHAROSHTHI VOWEL SIGN I..KHAROSHTHI VOWEL SIGN VOCALIC R
	if(0x10a01<=code&&code<=0x10a03){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] KHAROSHTHI VOWEL SIGN E..KHAROSHTHI VOWEL SIGN O
	if(0x10a05<=code&&code<=0x10a06){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x10a38){// Mn   [4] KHAROSHTHI VOWEL LENGTH MARK..KHAROSHTHI SIGN VISARGA
	if(0x10a0c<=code&&code<=0x10a0f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x10a3f){// Mn   [3] KHAROSHTHI SIGN BAR ABOVE..KHAROSHTHI SIGN DOT BELOW
	if(0x10a38<=code&&code<=0x10a3a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       KHAROSHTHI VIRAMA
	if(0x10a3f===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x10efd){if(code<0x10d24){// Mn   [2] MANICHAEAN ABBREVIATION MARK ABOVE..MANICHAEAN ABBREVIATION MARK BELOW
	if(0x10ae5<=code&&code<=0x10ae6){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x10eab){// Mn   [4] HANIFI ROHINGYA SIGN HARBAHAY..HANIFI ROHINGYA SIGN TASSI
	if(0x10d24<=code&&code<=0x10d27){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] YEZIDI COMBINING HAMZA MARK..YEZIDI COMBINING MADDA MARK
	if(0x10eab<=code&&code<=0x10eac){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x10f46){// Mn   [3] ARABIC SMALL LOW WORD SAKTA..ARABIC SMALL LOW WORD MADDA
	if(0x10efd<=code&&code<=0x10eff){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x10f82){// Mn  [11] SOGDIAN COMBINING DOT BELOW..SOGDIAN COMBINING STROKE BELOW
	if(0x10f46<=code&&code<=0x10f50){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [4] OLD UYGHUR COMBINING DOT ABOVE..OLD UYGHUR COMBINING TWO DOTS BELOW
	if(0x10f82<=code&&code<=0x10f85){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}}else {if(code<0x11180){if(code<0x110b7){if(code<0x11073){if(code<0x11002){// Mc       BRAHMI SIGN CANDRABINDU
	if(0x11000===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       BRAHMI SIGN ANUSVARA
	if(0x11001===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11038){// Mc       BRAHMI SIGN VISARGA
	if(0x11002===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x11070){// Mn  [15] BRAHMI VOWEL SIGN AA..BRAHMI VIRAMA
	if(0x11038<=code&&code<=0x11046){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       BRAHMI SIGN OLD TAMIL VIRAMA
	if(0x11070===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x11082){if(code<0x1107f){// Mn   [2] BRAHMI VOWEL SIGN OLD TAMIL SHORT E..BRAHMI VOWEL SIGN OLD TAMIL SHORT O
	if(0x11073<=code&&code<=0x11074){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [3] BRAHMI NUMBER JOINER..KAITHI SIGN ANUSVARA
	if(0x1107f<=code&&code<=0x11081){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x110b0){// Mc       KAITHI SIGN VISARGA
	if(0x11082===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x110b3){// Mc   [3] KAITHI VOWEL SIGN AA..KAITHI VOWEL SIGN II
	if(0x110b0<=code&&code<=0x110b2){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [4] KAITHI VOWEL SIGN U..KAITHI VOWEL SIGN AI
	if(0x110b3<=code&&code<=0x110b6){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0x11100){if(code<0x110bd){if(code<0x110b9){// Mc   [2] KAITHI VOWEL SIGN O..KAITHI VOWEL SIGN AU
	if(0x110b7<=code&&code<=0x110b8){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] KAITHI SIGN VIRAMA..KAITHI SIGN NUKTA
	if(0x110b9<=code&&code<=0x110ba){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x110c2){// Cf       KAITHI NUMBER SIGN
	if(0x110bd===code){return boundaries_1.CLUSTER_BREAK.PREPEND;}}else {// Mn       KAITHI VOWEL SIGN VOCALIC R
	if(0x110c2===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Cf       KAITHI NUMBER SIGN ABOVE
	if(0x110cd===code){return boundaries_1.CLUSTER_BREAK.PREPEND;}}}}else {if(code<0x1112d){if(code<0x11127){// Mn   [3] CHAKMA SIGN CANDRABINDU..CHAKMA SIGN VISARGA
	if(0x11100<=code&&code<=0x11102){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1112c){// Mn   [5] CHAKMA VOWEL SIGN A..CHAKMA VOWEL SIGN UU
	if(0x11127<=code&&code<=0x1112b){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       CHAKMA VOWEL SIGN E
	if(0x1112c===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0x11145){// Mn   [8] CHAKMA VOWEL SIGN AI..CHAKMA MAAYYAA
	if(0x1112d<=code&&code<=0x11134){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11173){// Mc   [2] CHAKMA VOWEL SIGN AA..CHAKMA VOWEL SIGN EI
	if(0x11145<=code&&code<=0x11146){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       MAHAJANI SIGN NUKTA
	if(0x11173===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}else {if(code<0x11232){if(code<0x111c2){if(code<0x111b3){if(code<0x11182){// Mn   [2] SHARADA SIGN CANDRABINDU..SHARADA SIGN ANUSVARA
	if(0x11180<=code&&code<=0x11181){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       SHARADA SIGN VISARGA
	if(0x11182===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x111b6){// Mc   [3] SHARADA VOWEL SIGN AA..SHARADA VOWEL SIGN II
	if(0x111b3<=code&&code<=0x111b5){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x111bf){// Mn   [9] SHARADA VOWEL SIGN U..SHARADA VOWEL SIGN O
	if(0x111b6<=code&&code<=0x111be){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] SHARADA VOWEL SIGN AU..SHARADA SIGN VIRAMA
	if(0x111bf<=code&&code<=0x111c0){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0x111cf){if(code<0x111c9){// Lo   [2] SHARADA SIGN JIHVAMULIYA..SHARADA SIGN UPADHMANIYA
	if(0x111c2<=code&&code<=0x111c3){return boundaries_1.CLUSTER_BREAK.PREPEND;}}else {if(code<0x111ce){// Mn   [4] SHARADA SANDHI MARK..SHARADA EXTRA SHORT VOWEL MARK
	if(0x111c9<=code&&code<=0x111cc){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       SHARADA VOWEL SIGN PRISHTHAMATRA E
	if(0x111ce===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0x1122c){// Mn       SHARADA SIGN INVERTED CANDRABINDU
	if(0x111cf===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1122f){// Mc   [3] KHOJKI VOWEL SIGN AA..KHOJKI VOWEL SIGN II
	if(0x1122c<=code&&code<=0x1122e){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [3] KHOJKI VOWEL SIGN U..KHOJKI VOWEL SIGN AI
	if(0x1122f<=code&&code<=0x11231){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0x11241){if(code<0x11235){if(code<0x11234){// Mc   [2] KHOJKI VOWEL SIGN O..KHOJKI VOWEL SIGN AU
	if(0x11232<=code&&code<=0x11233){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       KHOJKI SIGN ANUSVARA
	if(0x11234===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x11236){// Mc       KHOJKI SIGN VIRAMA
	if(0x11235===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x1123e){// Mn   [2] KHOJKI SIGN NUKTA..KHOJKI SIGN SHADDA
	if(0x11236<=code&&code<=0x11237){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       KHOJKI SIGN SUKUN
	if(0x1123e===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x112e3){if(code<0x112df){// Mn       KHOJKI VOWEL SIGN VOCALIC R
	if(0x11241===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x112e0){// Mn       KHUDAWADI SIGN ANUSVARA
	if(0x112df===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [3] KHUDAWADI VOWEL SIGN AA..KHUDAWADI VOWEL SIGN II
	if(0x112e0<=code&&code<=0x112e2){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0x11300){// Mn   [8] KHUDAWADI VOWEL SIGN U..KHUDAWADI SIGN VIRAMA
	if(0x112e3<=code&&code<=0x112ea){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11302){// Mn   [2] GRANTHA SIGN COMBINING ANUSVARA ABOVE..GRANTHA SIGN CANDRABINDU
	if(0x11300<=code&&code<=0x11301){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] GRANTHA SIGN ANUSVARA..GRANTHA SIGN VISARGA
	if(0x11302<=code&&code<=0x11303){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}}}}}}else {if(code<0x11a97){if(code<0x116ab){if(code<0x114b9){if(code<0x11370){if(code<0x11347){if(code<0x1133f){if(code<0x1133e){// Mn   [2] COMBINING BINDU BELOW..GRANTHA SIGN NUKTA
	if(0x1133b<=code&&code<=0x1133c){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       GRANTHA VOWEL SIGN AA
	if(0x1133e===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x11340){// Mc       GRANTHA VOWEL SIGN I
	if(0x1133f===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x11341){// Mn       GRANTHA VOWEL SIGN II
	if(0x11340===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [4] GRANTHA VOWEL SIGN U..GRANTHA VOWEL SIGN VOCALIC RR
	if(0x11341<=code&&code<=0x11344){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0x11357){if(code<0x1134b){// Mc   [2] GRANTHA VOWEL SIGN EE..GRANTHA VOWEL SIGN AI
	if(0x11347<=code&&code<=0x11348){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mc   [3] GRANTHA VOWEL SIGN OO..GRANTHA SIGN VIRAMA
	if(0x1134b<=code&&code<=0x1134d){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x11362){// Mc       GRANTHA AU LENGTH MARK
	if(0x11357===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11366){// Mc   [2] GRANTHA VOWEL SIGN VOCALIC L..GRANTHA VOWEL SIGN VOCALIC LL
	if(0x11362<=code&&code<=0x11363){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [7] COMBINING GRANTHA DIGIT ZERO..COMBINING GRANTHA DIGIT SIX
	if(0x11366<=code&&code<=0x1136c){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0x11445){if(code<0x11438){if(code<0x11435){// Mn   [5] COMBINING GRANTHA LETTER A..COMBINING GRANTHA LETTER PA
	if(0x11370<=code&&code<=0x11374){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [3] NEWA VOWEL SIGN AA..NEWA VOWEL SIGN II
	if(0x11435<=code&&code<=0x11437){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x11440){// Mn   [8] NEWA VOWEL SIGN U..NEWA VOWEL SIGN AI
	if(0x11438<=code&&code<=0x1143f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11442){// Mc   [2] NEWA VOWEL SIGN O..NEWA VOWEL SIGN AU
	if(0x11440<=code&&code<=0x11441){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [3] NEWA SIGN VIRAMA..NEWA SIGN ANUSVARA
	if(0x11442<=code&&code<=0x11444){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x114b0){if(code<0x11446){// Mc       NEWA SIGN VISARGA
	if(0x11445===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       NEWA SIGN NUKTA
	if(0x11446===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mn       NEWA SANDHI MARK
	if(0x1145e===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x114b1){// Mc       TIRHUTA VOWEL SIGN AA
	if(0x114b0===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x114b3){// Mc   [2] TIRHUTA VOWEL SIGN I..TIRHUTA VOWEL SIGN II
	if(0x114b1<=code&&code<=0x114b2){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [6] TIRHUTA VOWEL SIGN U..TIRHUTA VOWEL SIGN VOCALIC LL
	if(0x114b3<=code&&code<=0x114b8){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}else {if(code<0x115b8){if(code<0x114bf){if(code<0x114bb){// Mc       TIRHUTA VOWEL SIGN E
	if(0x114b9===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       TIRHUTA VOWEL SIGN SHORT E
	if(0x114ba===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x114bd){// Mc   [2] TIRHUTA VOWEL SIGN AI..TIRHUTA VOWEL SIGN O
	if(0x114bb<=code&&code<=0x114bc){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mc       TIRHUTA VOWEL SIGN SHORT O
	if(0x114bd===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mc       TIRHUTA VOWEL SIGN AU
	if(0x114be===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0x115af){if(code<0x114c1){// Mn   [2] TIRHUTA SIGN CANDRABINDU..TIRHUTA SIGN ANUSVARA
	if(0x114bf<=code&&code<=0x114c0){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x114c2){// Mc       TIRHUTA SIGN VISARGA
	if(0x114c1===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] TIRHUTA SIGN VIRAMA..TIRHUTA SIGN NUKTA
	if(0x114c2<=code&&code<=0x114c3){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x115b0){// Mc       SIDDHAM VOWEL SIGN AA
	if(0x115af===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x115b2){// Mc   [2] SIDDHAM VOWEL SIGN I..SIDDHAM VOWEL SIGN II
	if(0x115b0<=code&&code<=0x115b1){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [4] SIDDHAM VOWEL SIGN U..SIDDHAM VOWEL SIGN VOCALIC RR
	if(0x115b2<=code&&code<=0x115b5){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0x11630){if(code<0x115be){if(code<0x115bc){// Mc   [4] SIDDHAM VOWEL SIGN E..SIDDHAM VOWEL SIGN AU
	if(0x115b8<=code&&code<=0x115bb){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] SIDDHAM SIGN CANDRABINDU..SIDDHAM SIGN ANUSVARA
	if(0x115bc<=code&&code<=0x115bd){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x115bf){// Mc       SIDDHAM SIGN VISARGA
	if(0x115be===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x115dc){// Mn   [2] SIDDHAM SIGN VIRAMA..SIDDHAM SIGN NUKTA
	if(0x115bf<=code&&code<=0x115c0){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] SIDDHAM VOWEL SIGN ALTERNATE U..SIDDHAM VOWEL SIGN ALTERNATE UU
	if(0x115dc<=code&&code<=0x115dd){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x1163d){if(code<0x11633){// Mc   [3] MODI VOWEL SIGN AA..MODI VOWEL SIGN II
	if(0x11630<=code&&code<=0x11632){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x1163b){// Mn   [8] MODI VOWEL SIGN U..MODI VOWEL SIGN AI
	if(0x11633<=code&&code<=0x1163a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] MODI VOWEL SIGN O..MODI VOWEL SIGN AU
	if(0x1163b<=code&&code<=0x1163c){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0x1163e){// Mn       MODI SIGN ANUSVARA
	if(0x1163d===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1163f){// Mc       MODI SIGN VISARGA
	if(0x1163e===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] MODI SIGN VIRAMA..MODI SIGN ARDHACANDRA
	if(0x1163f<=code&&code<=0x11640){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}}else {if(code<0x1193f){if(code<0x11727){if(code<0x116b6){if(code<0x116ad){// Mn       TAKRI SIGN ANUSVARA
	if(0x116ab===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mc       TAKRI SIGN VISARGA
	if(0x116ac===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x116ae){// Mn       TAKRI VOWEL SIGN AA
	if(0x116ad===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x116b0){// Mc   [2] TAKRI VOWEL SIGN I..TAKRI VOWEL SIGN II
	if(0x116ae<=code&&code<=0x116af){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [6] TAKRI VOWEL SIGN U..TAKRI VOWEL SIGN AU
	if(0x116b0<=code&&code<=0x116b5){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x1171d){// Mc       TAKRI SIGN VIRAMA
	if(0x116b6===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       TAKRI SIGN NUKTA
	if(0x116b7===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11722){// Mn   [3] AHOM CONSONANT SIGN MEDIAL LA..AHOM CONSONANT SIGN MEDIAL LIGATING RA
	if(0x1171d<=code&&code<=0x1171f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11726){// Mn   [4] AHOM VOWEL SIGN I..AHOM VOWEL SIGN UU
	if(0x11722<=code&&code<=0x11725){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       AHOM VOWEL SIGN E
	if(0x11726===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}}else {if(code<0x11930){if(code<0x1182f){if(code<0x1182c){// Mn   [5] AHOM VOWEL SIGN AW..AHOM SIGN KILLER
	if(0x11727<=code&&code<=0x1172b){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [3] DOGRA VOWEL SIGN AA..DOGRA VOWEL SIGN II
	if(0x1182c<=code&&code<=0x1182e){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x11838){// Mn   [9] DOGRA VOWEL SIGN U..DOGRA SIGN ANUSVARA
	if(0x1182f<=code&&code<=0x11837){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11839){// Mc       DOGRA SIGN VISARGA
	if(0x11838===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] DOGRA SIGN VIRAMA..DOGRA SIGN NUKTA
	if(0x11839<=code&&code<=0x1183a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x1193b){if(code<0x11931){// Mc       DIVES AKURU VOWEL SIGN AA
	if(0x11930===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11937){// Mc   [5] DIVES AKURU VOWEL SIGN I..DIVES AKURU VOWEL SIGN E
	if(0x11931<=code&&code<=0x11935){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mc   [2] DIVES AKURU VOWEL SIGN AI..DIVES AKURU VOWEL SIGN O
	if(0x11937<=code&&code<=0x11938){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0x1193d){// Mn   [2] DIVES AKURU SIGN ANUSVARA..DIVES AKURU SIGN CANDRABINDU
	if(0x1193b<=code&&code<=0x1193c){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       DIVES AKURU SIGN HALANTA
	if(0x1193d===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       DIVES AKURU VIRAMA
	if(0x1193e===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0x11a01){if(code<0x119d1){if(code<0x11941){// Lo       DIVES AKURU PREFIXED NASAL SIGN
	if(0x1193f===code){return boundaries_1.CLUSTER_BREAK.PREPEND;}// Mc       DIVES AKURU MEDIAL YA
	if(0x11940===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x11942){// Lo       DIVES AKURU INITIAL RA
	if(0x11941===code){return boundaries_1.CLUSTER_BREAK.PREPEND;}}else {// Mc       DIVES AKURU MEDIAL RA
	if(0x11942===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       DIVES AKURU SIGN NUKTA
	if(0x11943===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x119dc){if(code<0x119d4){// Mc   [3] NANDINAGARI VOWEL SIGN AA..NANDINAGARI VOWEL SIGN II
	if(0x119d1<=code&&code<=0x119d3){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x119da){// Mn   [4] NANDINAGARI VOWEL SIGN U..NANDINAGARI VOWEL SIGN VOCALIC RR
	if(0x119d4<=code&&code<=0x119d7){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] NANDINAGARI VOWEL SIGN E..NANDINAGARI VOWEL SIGN AI
	if(0x119da<=code&&code<=0x119db){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x119e0){// Mc   [4] NANDINAGARI VOWEL SIGN O..NANDINAGARI SIGN VISARGA
	if(0x119dc<=code&&code<=0x119df){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       NANDINAGARI SIGN VIRAMA
	if(0x119e0===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mc       NANDINAGARI VOWEL SIGN PRISHTHAMATRA E
	if(0x119e4===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0x11a47){if(code<0x11a39){if(code<0x11a33){// Mn  [10] ZANABAZAR SQUARE VOWEL SIGN I..ZANABAZAR SQUARE VOWEL LENGTH MARK
	if(0x11a01<=code&&code<=0x11a0a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [6] ZANABAZAR SQUARE FINAL CONSONANT MARK..ZANABAZAR SQUARE SIGN ANUSVARA
	if(0x11a33<=code&&code<=0x11a38){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x11a3a){// Mc       ZANABAZAR SQUARE SIGN VISARGA
	if(0x11a39===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x11a3b){// Lo       ZANABAZAR SQUARE CLUSTER-INITIAL LETTER RA
	if(0x11a3a===code){return boundaries_1.CLUSTER_BREAK.PREPEND;}}else {// Mn   [4] ZANABAZAR SQUARE CLUSTER-FINAL LETTER YA..ZANABAZAR SQUARE CLUSTER-FINAL LETTER VA
	if(0x11a3b<=code&&code<=0x11a3e){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x11a59){if(code<0x11a51){// Mn       ZANABAZAR SQUARE SUBJOINER
	if(0x11a47===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11a57){// Mn   [6] SOYOMBO VOWEL SIGN I..SOYOMBO VOWEL SIGN OE
	if(0x11a51<=code&&code<=0x11a56){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] SOYOMBO VOWEL SIGN AI..SOYOMBO VOWEL SIGN AU
	if(0x11a57<=code&&code<=0x11a58){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0x11a84){// Mn   [3] SOYOMBO VOWEL SIGN VOCALIC R..SOYOMBO VOWEL LENGTH MARK
	if(0x11a59<=code&&code<=0x11a5b){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11a8a){// Lo   [6] SOYOMBO SIGN JIHVAMULIYA..SOYOMBO CLUSTER-INITIAL LETTER SA
	if(0x11a84<=code&&code<=0x11a89){return boundaries_1.CLUSTER_BREAK.PREPEND;}}else {// Mn  [13] SOYOMBO FINAL CONSONANT SIGN G..SOYOMBO SIGN ANUSVARA
	if(0x11a8a<=code&&code<=0x11a96){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}}}else {if(code<0x16f51){if(code<0x11d90){if(code<0x11cb1){if(code<0x11c3e){if(code<0x11c2f){if(code<0x11a98){// Mc       SOYOMBO SIGN VISARGA
	if(0x11a97===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] SOYOMBO GEMINATION MARK..SOYOMBO SUBJOINER
	if(0x11a98<=code&&code<=0x11a99){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x11c30){// Mc       BHAIKSUKI VOWEL SIGN AA
	if(0x11c2f===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x11c38){// Mn   [7] BHAIKSUKI VOWEL SIGN I..BHAIKSUKI VOWEL SIGN VOCALIC L
	if(0x11c30<=code&&code<=0x11c36){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [6] BHAIKSUKI VOWEL SIGN E..BHAIKSUKI SIGN ANUSVARA
	if(0x11c38<=code&&code<=0x11c3d){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x11c92){// Mc       BHAIKSUKI SIGN VISARGA
	if(0x11c3e===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       BHAIKSUKI SIGN VIRAMA
	if(0x11c3f===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11ca9){// Mn  [22] MARCHEN SUBJOINED LETTER KA..MARCHEN SUBJOINED LETTER ZA
	if(0x11c92<=code&&code<=0x11ca7){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11caa){// Mc       MARCHEN SUBJOINED LETTER YA
	if(0x11ca9===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [7] MARCHEN SUBJOINED LETTER RA..MARCHEN VOWEL SIGN AA
	if(0x11caa<=code&&code<=0x11cb0){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0x11d3a){if(code<0x11cb4){if(code<0x11cb2){// Mc       MARCHEN VOWEL SIGN I
	if(0x11cb1===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] MARCHEN VOWEL SIGN U..MARCHEN VOWEL SIGN E
	if(0x11cb2<=code&&code<=0x11cb3){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x11cb5){// Mc       MARCHEN VOWEL SIGN O
	if(0x11cb4===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x11d31){// Mn   [2] MARCHEN SIGN ANUSVARA..MARCHEN SIGN CANDRABINDU
	if(0x11cb5<=code&&code<=0x11cb6){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [6] MASARAM GONDI VOWEL SIGN AA..MASARAM GONDI VOWEL SIGN VOCALIC R
	if(0x11d31<=code&&code<=0x11d36){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x11d46){if(code<0x11d3c){// Mn       MASARAM GONDI VOWEL SIGN E
	if(0x11d3a===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11d3f){// Mn   [2] MASARAM GONDI VOWEL SIGN AI..MASARAM GONDI VOWEL SIGN O
	if(0x11d3c<=code&&code<=0x11d3d){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [7] MASARAM GONDI VOWEL SIGN AU..MASARAM GONDI VIRAMA
	if(0x11d3f<=code&&code<=0x11d45){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x11d47){// Lo       MASARAM GONDI REPHA
	if(0x11d46===code){return boundaries_1.CLUSTER_BREAK.PREPEND;}}else {if(code<0x11d8a){// Mn       MASARAM GONDI RA-KARA
	if(0x11d47===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [5] GUNJALA GONDI VOWEL SIGN AA..GUNJALA GONDI VOWEL SIGN UU
	if(0x11d8a<=code&&code<=0x11d8e){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}}}else {if(code<0x11f36){if(code<0x11ef3){if(code<0x11d95){if(code<0x11d93){// Mn   [2] GUNJALA GONDI VOWEL SIGN EE..GUNJALA GONDI VOWEL SIGN AI
	if(0x11d90<=code&&code<=0x11d91){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] GUNJALA GONDI VOWEL SIGN OO..GUNJALA GONDI VOWEL SIGN AU
	if(0x11d93<=code&&code<=0x11d94){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x11d96){// Mn       GUNJALA GONDI SIGN ANUSVARA
	if(0x11d95===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       GUNJALA GONDI SIGN VISARGA
	if(0x11d96===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       GUNJALA GONDI VIRAMA
	if(0x11d97===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x11f02){if(code<0x11ef5){// Mn   [2] MAKASAR VOWEL SIGN I..MAKASAR VOWEL SIGN U
	if(0x11ef3<=code&&code<=0x11ef4){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11f00){// Mc   [2] MAKASAR VOWEL SIGN E..MAKASAR VOWEL SIGN O
	if(0x11ef5<=code&&code<=0x11ef6){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] KAWI SIGN CANDRABINDU..KAWI SIGN ANUSVARA
	if(0x11f00<=code&&code<=0x11f01){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x11f03){// Lo       KAWI SIGN REPHA
	if(0x11f02===code){return boundaries_1.CLUSTER_BREAK.PREPEND;}}else {if(code<0x11f34){// Mc       KAWI SIGN VISARGA
	if(0x11f03===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mc   [2] KAWI VOWEL SIGN AA..KAWI VOWEL SIGN ALTERNATE AA
	if(0x11f34<=code&&code<=0x11f35){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}}else {if(code<0x13430){if(code<0x11f40){if(code<0x11f3e){// Mn   [5] KAWI VOWEL SIGN I..KAWI VOWEL SIGN VOCALIC R
	if(0x11f36<=code&&code<=0x11f3a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] KAWI VOWEL SIGN E..KAWI VOWEL SIGN AI
	if(0x11f3e<=code&&code<=0x11f3f){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x11f41){// Mn       KAWI VOWEL SIGN EU
	if(0x11f40===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       KAWI SIGN KILLER
	if(0x11f41===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       KAWI CONJOINER
	if(0x11f42===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x16af0){if(code<0x13440){// Cf  [16] EGYPTIAN HIEROGLYPH VERTICAL JOINER..EGYPTIAN HIEROGLYPH END WALLED ENCLOSURE
	if(0x13430<=code&&code<=0x1343f){return boundaries_1.CLUSTER_BREAK.CONTROL;}}else {if(code<0x13447){// Mn       EGYPTIAN HIEROGLYPH MIRROR HORIZONTALLY
	if(0x13440===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn  [15] EGYPTIAN HIEROGLYPH MODIFIER DAMAGED AT TOP START..EGYPTIAN HIEROGLYPH MODIFIER DAMAGED
	if(0x13447<=code&&code<=0x13455){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x16b30){// Mn   [5] BASSA VAH COMBINING HIGH TONE..BASSA VAH COMBINING HIGH-LOW TONE
	if(0x16af0<=code&&code<=0x16af4){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x16f4f){// Mn   [7] PAHAWH HMONG MARK CIM TUB..PAHAWH HMONG MARK CIM TAUM
	if(0x16b30<=code&&code<=0x16b36){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       MIAO SIGN CONSONANT MODIFIER BAR
	if(0x16f4f===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}}else {if(code<0x1da84){if(code<0x1d167){if(code<0x1bca0){if(code<0x16fe4){if(code<0x16f8f){// Mc  [55] MIAO SIGN ASPIRATION..MIAO VOWEL SIGN UI
	if(0x16f51<=code&&code<=0x16f87){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [4] MIAO TONE RIGHT..MIAO TONE BELOW
	if(0x16f8f<=code&&code<=0x16f92){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x16ff0){// Mn       KHITAN SMALL SCRIPT FILLER
	if(0x16fe4===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1bc9d){// Mc   [2] VIETNAMESE ALTERNATE READING MARK CA..VIETNAMESE ALTERNATE READING MARK NHAY
	if(0x16ff0<=code&&code<=0x16ff1){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] DUPLOYAN THICK LETTER SELECTOR..DUPLOYAN DOUBLE MARK
	if(0x1bc9d<=code&&code<=0x1bc9e){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x1cf30){if(code<0x1cf00){// Cf   [4] SHORTHAND FORMAT LETTER OVERLAP..SHORTHAND FORMAT UP STEP
	if(0x1bca0<=code&&code<=0x1bca3){return boundaries_1.CLUSTER_BREAK.CONTROL;}}else {// Mn  [46] ZNAMENNY COMBINING MARK GORAZDO NIZKO S KRYZHEM ON LEFT..ZNAMENNY COMBINING MARK KRYZH ON LEFT
	if(0x1cf00<=code&&code<=0x1cf2d){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x1d165){// Mn  [23] ZNAMENNY COMBINING TONAL RANGE MARK MRACHNO..ZNAMENNY PRIZNAK MODIFIER ROG
	if(0x1cf30<=code&&code<=0x1cf46){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       MUSICAL SYMBOL COMBINING STEM
	if(0x1d165===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mc       MUSICAL SYMBOL COMBINING SPRECHGESANG STEM
	if(0x1d166===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0x1d185){if(code<0x1d16e){if(code<0x1d16d){// Mn   [3] MUSICAL SYMBOL COMBINING TREMOLO-1..MUSICAL SYMBOL COMBINING TREMOLO-3
	if(0x1d167<=code&&code<=0x1d169){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       MUSICAL SYMBOL COMBINING AUGMENTATION DOT
	if(0x1d16d===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x1d173){// Mc   [5] MUSICAL SYMBOL COMBINING FLAG-1..MUSICAL SYMBOL COMBINING FLAG-5
	if(0x1d16e<=code&&code<=0x1d172){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1d17b){// Cf   [8] MUSICAL SYMBOL BEGIN BEAM..MUSICAL SYMBOL END PHRASE
	if(0x1d173<=code&&code<=0x1d17a){return boundaries_1.CLUSTER_BREAK.CONTROL;}}else {// Mn   [8] MUSICAL SYMBOL COMBINING ACCENT..MUSICAL SYMBOL COMBINING LOURE
	if(0x1d17b<=code&&code<=0x1d182){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x1da00){if(code<0x1d1aa){// Mn   [7] MUSICAL SYMBOL COMBINING DOIT..MUSICAL SYMBOL COMBINING TRIPLE TONGUE
	if(0x1d185<=code&&code<=0x1d18b){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1d242){// Mn   [4] MUSICAL SYMBOL COMBINING DOWN BOW..MUSICAL SYMBOL COMBINING SNAP PIZZICATO
	if(0x1d1aa<=code&&code<=0x1d1ad){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [3] COMBINING GREEK MUSICAL TRISEME..COMBINING GREEK MUSICAL PENTASEME
	if(0x1d242<=code&&code<=0x1d244){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x1da3b){// Mn  [55] SIGNWRITING HEAD RIM..SIGNWRITING AIR SUCKING IN
	if(0x1da00<=code&&code<=0x1da36){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1da75){// Mn  [50] SIGNWRITING MOUTH CLOSED NEUTRAL..SIGNWRITING EXCITEMENT
	if(0x1da3b<=code&&code<=0x1da6c){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS
	if(0x1da75===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}else {if(code<0x1e2ec){if(code<0x1e01b){if(code<0x1daa1){if(code<0x1da9b){// Mn       SIGNWRITING LOCATION HEAD NECK
	if(0x1da84===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [5] SIGNWRITING FILL MODIFIER-2..SIGNWRITING FILL MODIFIER-6
	if(0x1da9b<=code&&code<=0x1da9f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x1e000){// Mn  [15] SIGNWRITING ROTATION MODIFIER-2..SIGNWRITING ROTATION MODIFIER-16
	if(0x1daa1<=code&&code<=0x1daaf){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1e008){// Mn   [7] COMBINING GLAGOLITIC LETTER AZU..COMBINING GLAGOLITIC LETTER ZHIVETE
	if(0x1e000<=code&&code<=0x1e006){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn  [17] COMBINING GLAGOLITIC LETTER ZEMLJA..COMBINING GLAGOLITIC LETTER HERU
	if(0x1e008<=code&&code<=0x1e018){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x1e08f){if(code<0x1e023){// Mn   [7] COMBINING GLAGOLITIC LETTER SHTA..COMBINING GLAGOLITIC LETTER YATI
	if(0x1e01b<=code&&code<=0x1e021){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1e026){// Mn   [2] COMBINING GLAGOLITIC LETTER YU..COMBINING GLAGOLITIC LETTER SMALL YUS
	if(0x1e023<=code&&code<=0x1e024){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [5] COMBINING GLAGOLITIC LETTER YO..COMBINING GLAGOLITIC LETTER FITA
	if(0x1e026<=code&&code<=0x1e02a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x1e130){// Mn       COMBINING CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I
	if(0x1e08f===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1e2ae){// Mn   [7] NYIAKENG PUACHUE HMONG TONE-B..NYIAKENG PUACHUE HMONG TONE-D
	if(0x1e130<=code&&code<=0x1e136){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       TOTO SIGN RISING TONE
	if(0x1e2ae===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0x1f3fb){if(code<0x1e8d0){if(code<0x1e4ec){// Mn   [4] WANCHO TONE TUP..WANCHO TONE KOINI
	if(0x1e2ec<=code&&code<=0x1e2ef){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [4] NAG MUNDARI SIGN MUHOR..NAG MUNDARI SIGN SUTUH
	if(0x1e4ec<=code&&code<=0x1e4ef){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x1e944){// Mn   [7] MENDE KIKAKUI COMBINING NUMBER TEENS..MENDE KIKAKUI COMBINING NUMBER MILLIONS
	if(0x1e8d0<=code&&code<=0x1e8d6){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1f1e6){// Mn   [7] ADLAM ALIF LENGTHENER..ADLAM NUKTA
	if(0x1e944<=code&&code<=0x1e94a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// So  [26] REGIONAL INDICATOR SYMBOL LETTER A..REGIONAL INDICATOR SYMBOL LETTER Z
	if(0x1f1e6<=code&&code<=0x1f1ff){return boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;}}}}}else {if(code<0xe0080){if(code<0xe0000){// Sk   [5] EMOJI MODIFIER FITZPATRICK TYPE-1-2..EMOJI MODIFIER FITZPATRICK TYPE-6
	if(0x1f3fb<=code&&code<=0x1f3ff){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xe0020){// Cn       <reserved-E0000>
	// Cf       LANGUAGE TAG
	// Cn  [30] <reserved-E0002>..<reserved-E001F>
	if(0xe0000<=code&&code<=0xe001f){return boundaries_1.CLUSTER_BREAK.CONTROL;}}else {// Cf  [96] TAG SPACE..CANCEL TAG
	if(0xe0020<=code&&code<=0xe007f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0xe0100){// Cn [128] <reserved-E0080>..<reserved-E00FF>
	if(0xe0080<=code&&code<=0xe00ff){return boundaries_1.CLUSTER_BREAK.CONTROL;}}else {if(code<0xe01f0){// Mn [240] VARIATION SELECTOR-17..VARIATION SELECTOR-256
	if(0xe0100<=code&&code<=0xe01ef){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Cn [3600] <reserved-E01F0>..<reserved-E0FFF>
	if(0xe01f0<=code&&code<=0xe0fff){return boundaries_1.CLUSTER_BREAK.CONTROL;}}}}}}}}}}}}// unlisted code points are treated as a break property of "Other"
	return boundaries_1.CLUSTER_BREAK.OTHER;}/**
	     * Given a Unicode code point, returns if symbol is an extended pictographic or some other break
	     * @param code {number} Unicode code point
	     * @returns {number}
	     */static getEmojiProperty(code){// emoji property taken from:
	// https://www.unicode.org/Public/UCD/latest/ucd/emoji/emoji-data.txt
	// and generated by
	// node ./scripts/generate-emoji-extended-pictographic.js
	if(code<0x27b0){if(code<0x2600){if(code<0x2328){if(code<0x2122){if(code<0x203c){// E0.6   [1] (©️)       copyright
	if(0xa9===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}// E0.6   [1] (®️)       registered
	if(0xae===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [1] (‼️)       double exclamation mark
	if(0x203c===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}// E0.6   [1] (⁉️)       exclamation question mark
	if(0x2049===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}else {if(code<0x2194){// E0.6   [1] (™️)       trade mark
	if(0x2122===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}// E0.6   [1] (ℹ️)       information
	if(0x2139===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x21a9){// E0.6   [6] (↔️..↙️)    left-right arrow..down-left arrow
	if(0x2194<=code&&code<=0x2199){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x231a){// E0.6   [2] (↩️..↪️)    right arrow curving left..left arrow curving right
	if(0x21a9<=code&&code<=0x21aa){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [2] (⌚..⌛)    watch..hourglass done
	if(0x231a<=code&&code<=0x231b){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}}else {if(code<0x24c2){if(code<0x23cf){// E1.0   [1] (⌨️)       keyboard
	if(0x2328===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}// E0.0   [1] (⎈)       HELM SYMBOL
	if(0x2388===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x23e9){// E1.0   [1] (⏏️)       eject button
	if(0x23cf===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x23f8){// E0.6   [4] (⏩..⏬)    fast-forward button..fast down button
	// E0.7   [2] (⏭️..⏮️)    next track button..last track button
	// E1.0   [1] (⏯️)       play or pause button
	// E0.6   [1] (⏰)       alarm clock
	// E1.0   [2] (⏱️..⏲️)    stopwatch..timer clock
	// E0.6   [1] (⏳)       hourglass not done
	if(0x23e9<=code&&code<=0x23f3){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.7   [3] (⏸️..⏺️)    pause button..record button
	if(0x23f8<=code&&code<=0x23fa){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}else {if(code<0x25b6){if(code<0x25aa){// E0.6   [1] (Ⓜ️)       circled M
	if(0x24c2===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [2] (▪️..▫️)    black small square..white small square
	if(0x25aa<=code&&code<=0x25ab){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}else {if(code<0x25c0){// E0.6   [1] (▶️)       play button
	if(0x25b6===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x25fb){// E0.6   [1] (◀️)       reverse button
	if(0x25c0===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [4] (◻️..◾)    white medium square..black medium-small square
	if(0x25fb<=code&&code<=0x25fe){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}}}else {if(code<0x2733){if(code<0x2714){if(code<0x2614){if(code<0x2607){// E0.6   [2] (☀️..☁️)    sun..cloud
	// E0.7   [2] (☂️..☃️)    umbrella..snowman
	// E1.0   [1] (☄️)       comet
	// E0.0   [1] (★)       BLACK STAR
	if(0x2600<=code&&code<=0x2605){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.0   [7] (☇..☍)    LIGHTNING..OPPOSITION
	// E0.6   [1] (☎️)       telephone
	// E0.0   [2] (☏..☐)    WHITE TELEPHONE..BALLOT BOX
	// E0.6   [1] (☑️)       check box with check
	// E0.0   [1] (☒)       BALLOT BOX WITH X
	if(0x2607<=code&&code<=0x2612){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}else {if(code<0x2690){// E0.6   [2] (☔..☕)    umbrella with rain drops..hot beverage
	// E0.0   [2] (☖..☗)    WHITE SHOGI PIECE..BLACK SHOGI PIECE
	// E1.0   [1] (☘️)       shamrock
	// E0.0   [4] (☙..☜)    REVERSED ROTATED FLORAL HEART BULLET..WHITE LEFT POINTING INDEX
	// E0.6   [1] (☝️)       index pointing up
	// E0.0   [2] (☞..☟)    WHITE RIGHT POINTING INDEX..WHITE DOWN POINTING INDEX
	// E1.0   [1] (☠️)       skull and crossbones
	// E0.0   [1] (☡)       CAUTION SIGN
	// E1.0   [2] (☢️..☣️)    radioactive..biohazard
	// E0.0   [2] (☤..☥)    CADUCEUS..ANKH
	// E1.0   [1] (☦️)       orthodox cross
	// E0.0   [3] (☧..☩)    CHI RHO..CROSS OF JERUSALEM
	// E0.7   [1] (☪️)       star and crescent
	// E0.0   [3] (☫..☭)    FARSI SYMBOL..HAMMER AND SICKLE
	// E1.0   [1] (☮️)       peace symbol
	// E0.7   [1] (☯️)       yin yang
	// E0.0   [8] (☰..☷)    TRIGRAM FOR HEAVEN..TRIGRAM FOR EARTH
	// E0.7   [2] (☸️..☹️)    wheel of dharma..frowning face
	// E0.6   [1] (☺️)       smiling face
	// E0.0   [5] (☻..☿)    BLACK SMILING FACE..MERCURY
	// E4.0   [1] (♀️)       female sign
	// E0.0   [1] (♁)       EARTH
	// E4.0   [1] (♂️)       male sign
	// E0.0   [5] (♃..♇)    JUPITER..PLUTO
	// E0.6  [12] (♈..♓)    Aries..Pisces
	// E0.0  [11] (♔..♞)    WHITE CHESS KING..BLACK CHESS KNIGHT
	// E11.0  [1] (♟️)       chess pawn
	// E0.6   [1] (♠️)       spade suit
	// E0.0   [2] (♡..♢)    WHITE HEART SUIT..WHITE DIAMOND SUIT
	// E0.6   [1] (♣️)       club suit
	// E0.0   [1] (♤)       WHITE SPADE SUIT
	// E0.6   [2] (♥️..♦️)    heart suit..diamond suit
	// E0.0   [1] (♧)       WHITE CLUB SUIT
	// E0.6   [1] (♨️)       hot springs
	// E0.0  [18] (♩..♺)    QUARTER NOTE..RECYCLING SYMBOL FOR GENERIC MATERIALS
	// E0.6   [1] (♻️)       recycling symbol
	// E0.0   [2] (♼..♽)    RECYCLED PAPER SYMBOL..PARTIALLY-RECYCLED PAPER SYMBOL
	// E11.0  [1] (♾️)       infinity
	// E0.6   [1] (♿)       wheelchair symbol
	// E0.0   [6] (⚀..⚅)    DIE FACE-1..DIE FACE-6
	if(0x2614<=code&&code<=0x2685){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x2708){// E0.0   [2] (⚐..⚑)    WHITE FLAG..BLACK FLAG
	// E1.0   [1] (⚒️)       hammer and pick
	// E0.6   [1] (⚓)       anchor
	// E1.0   [1] (⚔️)       crossed swords
	// E4.0   [1] (⚕️)       medical symbol
	// E1.0   [2] (⚖️..⚗️)    balance scale..alembic
	// E0.0   [1] (⚘)       FLOWER
	// E1.0   [1] (⚙️)       gear
	// E0.0   [1] (⚚)       STAFF OF HERMES
	// E1.0   [2] (⚛️..⚜️)    atom symbol..fleur-de-lis
	// E0.0   [3] (⚝..⚟)    OUTLINED WHITE STAR..THREE LINES CONVERGING LEFT
	// E0.6   [2] (⚠️..⚡)    warning..high voltage
	// E0.0   [5] (⚢..⚦)    DOUBLED FEMALE SIGN..MALE WITH STROKE SIGN
	// E13.0  [1] (⚧️)       transgender symbol
	// E0.0   [2] (⚨..⚩)    VERTICAL MALE WITH STROKE SIGN..HORIZONTAL MALE WITH STROKE SIGN
	// E0.6   [2] (⚪..⚫)    white circle..black circle
	// E0.0   [4] (⚬..⚯)    MEDIUM SMALL WHITE CIRCLE..UNMARRIED PARTNERSHIP SYMBOL
	// E1.0   [2] (⚰️..⚱️)    coffin..funeral urn
	// E0.0  [11] (⚲..⚼)    NEUTER..SESQUIQUADRATE
	// E0.6   [2] (⚽..⚾)    soccer ball..baseball
	// E0.0   [5] (⚿..⛃)    SQUARED KEY..BLACK DRAUGHTS KING
	// E0.6   [2] (⛄..⛅)    snowman without snow..sun behind cloud
	// E0.0   [2] (⛆..⛇)    RAIN..BLACK SNOWMAN
	// E0.7   [1] (⛈️)       cloud with lightning and rain
	// E0.0   [5] (⛉..⛍)    TURNED WHITE SHOGI PIECE..DISABLED CAR
	// E0.6   [1] (⛎)       Ophiuchus
	// E0.7   [1] (⛏️)       pick
	// E0.0   [1] (⛐)       CAR SLIDING
	// E0.7   [1] (⛑️)       rescue worker’s helmet
	// E0.0   [1] (⛒)       CIRCLED CROSSING LANES
	// E0.7   [1] (⛓️)       chains
	// E0.6   [1] (⛔)       no entry
	// E0.0  [20] (⛕..⛨)    ALTERNATE ONE-WAY LEFT WAY TRAFFIC..BLACK CROSS ON SHIELD
	// E0.7   [1] (⛩️)       shinto shrine
	// E0.6   [1] (⛪)       church
	// E0.0   [5] (⛫..⛯)    CASTLE..MAP SYMBOL FOR LIGHTHOUSE
	// E0.7   [2] (⛰️..⛱️)    mountain..umbrella on ground
	// E0.6   [2] (⛲..⛳)    fountain..flag in hole
	// E0.7   [1] (⛴️)       ferry
	// E0.6   [1] (⛵)       sailboat
	// E0.0   [1] (⛶)       SQUARE FOUR CORNERS
	// E0.7   [3] (⛷️..⛹️)    skier..person bouncing ball
	// E0.6   [1] (⛺)       tent
	// E0.0   [2] (⛻..⛼)    JAPANESE BANK SYMBOL..HEADSTONE GRAVEYARD SYMBOL
	// E0.6   [1] (⛽)       fuel pump
	// E0.0   [4] (⛾..✁)    CUP ON BLACK SQUARE..UPPER BLADE SCISSORS
	// E0.6   [1] (✂️)       scissors
	// E0.0   [2] (✃..✄)    LOWER BLADE SCISSORS..WHITE SCISSORS
	// E0.6   [1] (✅)       check mark button
	if(0x2690<=code&&code<=0x2705){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [5] (✈️..✌️)    airplane..victory hand
	// E0.7   [1] (✍️)       writing hand
	// E0.0   [1] (✎)       LOWER RIGHT PENCIL
	// E0.6   [1] (✏️)       pencil
	// E0.0   [2] (✐..✑)    UPPER RIGHT PENCIL..WHITE NIB
	// E0.6   [1] (✒️)       black nib
	if(0x2708<=code&&code<=0x2712){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}else {if(code<0x271d){// E0.6   [1] (✔️)       check mark
	if(0x2714===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}// E0.6   [1] (✖️)       multiply
	if(0x2716===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x2721){// E0.7   [1] (✝️)       latin cross
	if(0x271d===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.7   [1] (✡️)       star of David
	if(0x2721===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}// E0.6   [1] (✨)       sparkles
	if(0x2728===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}else {if(code<0x2753){if(code<0x2747){if(code<0x2744){// E0.6   [2] (✳️..✴️)    eight-spoked asterisk..eight-pointed star
	if(0x2733<=code&&code<=0x2734){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [1] (❄️)       snowflake
	if(0x2744===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}else {if(code<0x274c){// E0.6   [1] (❇️)       sparkle
	if(0x2747===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [1] (❌)       cross mark
	if(0x274c===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}// E0.6   [1] (❎)       cross mark button
	if(0x274e===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}else {if(code<0x2763){if(code<0x2757){// E0.6   [3] (❓..❕)    red question mark..white exclamation mark
	if(0x2753<=code&&code<=0x2755){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [1] (❗)       red exclamation mark
	if(0x2757===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}else {if(code<0x2795){// E1.0   [1] (❣️)       heart exclamation
	// E0.6   [1] (❤️)       red heart
	// E0.0   [3] (❥..❧)    ROTATED HEAVY BLACK HEART BULLET..ROTATED FLORAL HEART BULLET
	if(0x2763<=code&&code<=0x2767){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x27a1){// E0.6   [3] (➕..➗)    plus..divide
	if(0x2795<=code&&code<=0x2797){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [1] (➡️)       right arrow
	if(0x27a1===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}}}}else {if(code<0x1f201){if(code<0x3297){if(code<0x2b1b){if(code<0x2934){// E0.6   [1] (➰)       curly loop
	if(0x27b0===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}// E1.0   [1] (➿)       double curly loop
	if(0x27bf===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x2b05){// E0.6   [2] (⤴️..⤵️)    right arrow curving up..right arrow curving down
	if(0x2934<=code&&code<=0x2935){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [3] (⬅️..⬇️)    left arrow..down arrow
	if(0x2b05<=code&&code<=0x2b07){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}else {if(code<0x2b55){if(code<0x2b50){// E0.6   [2] (⬛..⬜)    black large square..white large square
	if(0x2b1b<=code&&code<=0x2b1c){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [1] (⭐)       star
	if(0x2b50===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}else {if(code<0x3030){// E0.6   [1] (⭕)       hollow red circle
	if(0x2b55===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [1] (〰️)       wavy dash
	if(0x3030===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}// E0.6   [1] (〽️)       part alternation mark
	if(0x303d===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}else {if(code<0x1f16c){if(code<0x1f000){// E0.6   [1] (㊗️)       Japanese “congratulations” button
	if(0x3297===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}// E0.6   [1] (㊙️)       Japanese “secret” button
	if(0x3299===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x1f10d){// E0.0   [4] (🀀..🀃)    MAHJONG TILE EAST WIND..MAHJONG TILE NORTH WIND
	// E0.6   [1] (🀄)       mahjong red dragon
	// E0.0 [202] (🀅..🃎)    MAHJONG TILE GREEN DRAGON..PLAYING CARD KING OF DIAMONDS
	// E0.6   [1] (🃏)       joker
	// E0.0  [48] (🃐..🃿)    <reserved-1F0D0>..<reserved-1F0FF>
	if(0x1f000<=code&&code<=0x1f0ff){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x1f12f){// E0.0   [3] (🄍..🄏)    CIRCLED ZERO WITH SLASH..CIRCLED DOLLAR SIGN WITH OVERLAID BACKSLASH
	if(0x1f10d<=code&&code<=0x1f10f){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.0   [1] (🄯)       COPYLEFT SYMBOL
	if(0x1f12f===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}else {if(code<0x1f18e){if(code<0x1f17e){// E0.0   [4] (🅬..🅯)    RAISED MR SIGN..CIRCLED HUMAN FIGURE
	// E0.6   [2] (🅰️..🅱️)    A button (blood type)..B button (blood type)
	if(0x1f16c<=code&&code<=0x1f171){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [2] (🅾️..🅿️)    O button (blood type)..P button
	if(0x1f17e<=code&&code<=0x1f17f){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}else {if(code<0x1f191){// E0.6   [1] (🆎)       AB button (blood type)
	if(0x1f18e===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x1f1ad){// E0.6  [10] (🆑..🆚)    CL button..VS button
	if(0x1f191<=code&&code<=0x1f19a){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.0  [57] (🆭..🇥)    MASK WORK SYMBOL..<reserved-1F1E5>
	if(0x1f1ad<=code&&code<=0x1f1e5){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}}}else {if(code<0x1f7d5){if(code<0x1f249){if(code<0x1f22f){if(code<0x1f21a){// E0.6   [2] (🈁..🈂️)    Japanese “here” button..Japanese “service charge” button
	// E0.0  [13] (🈃..🈏)    <reserved-1F203>..<reserved-1F20F>
	if(0x1f201<=code&&code<=0x1f20f){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [1] (🈚)       Japanese “free of charge” button
	if(0x1f21a===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}else {if(code<0x1f232){// E0.6   [1] (🈯)       Japanese “reserved” button
	if(0x1f22f===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x1f23c){// E0.6   [9] (🈲..🈺)    Japanese “prohibited” button..Japanese “open for business” button
	if(0x1f232<=code&&code<=0x1f23a){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.0   [4] (🈼..🈿)    <reserved-1F23C>..<reserved-1F23F>
	if(0x1f23c<=code&&code<=0x1f23f){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}else {if(code<0x1f546){if(code<0x1f400){// E0.0   [7] (🉉..🉏)    <reserved-1F249>..<reserved-1F24F>
	// E0.6   [2] (🉐..🉑)    Japanese “bargain” button..Japanese “acceptable” button
	// E0.0 [174] (🉒..🋿)    <reserved-1F252>..<reserved-1F2FF>
	// E0.6  [13] (🌀..🌌)    cyclone..milky way
	// E0.7   [2] (🌍..🌎)    globe showing Europe-Africa..globe showing Americas
	// E0.6   [1] (🌏)       globe showing Asia-Australia
	// E1.0   [1] (🌐)       globe with meridians
	// E0.6   [1] (🌑)       new moon
	// E1.0   [1] (🌒)       waxing crescent moon
	// E0.6   [3] (🌓..🌕)    first quarter moon..full moon
	// E1.0   [3] (🌖..🌘)    waning gibbous moon..waning crescent moon
	// E0.6   [1] (🌙)       crescent moon
	// E1.0   [1] (🌚)       new moon face
	// E0.6   [1] (🌛)       first quarter moon face
	// E0.7   [1] (🌜)       last quarter moon face
	// E1.0   [2] (🌝..🌞)    full moon face..sun with face
	// E0.6   [2] (🌟..🌠)    glowing star..shooting star
	// E0.7   [1] (🌡️)       thermometer
	// E0.0   [2] (🌢..🌣)    BLACK DROPLET..WHITE SUN
	// E0.7   [9] (🌤️..🌬️)    sun behind small cloud..wind face
	// E1.0   [3] (🌭..🌯)    hot dog..burrito
	// E0.6   [2] (🌰..🌱)    chestnut..seedling
	// E1.0   [2] (🌲..🌳)    evergreen tree..deciduous tree
	// E0.6   [2] (🌴..🌵)    palm tree..cactus
	// E0.7   [1] (🌶️)       hot pepper
	// E0.6  [20] (🌷..🍊)    tulip..tangerine
	// E1.0   [1] (🍋)       lemon
	// E0.6   [4] (🍌..🍏)    banana..green apple
	// E1.0   [1] (🍐)       pear
	// E0.6  [43] (🍑..🍻)    peach..clinking beer mugs
	// E1.0   [1] (🍼)       baby bottle
	// E0.7   [1] (🍽️)       fork and knife with plate
	// E1.0   [2] (🍾..🍿)    bottle with popping cork..popcorn
	// E0.6  [20] (🎀..🎓)    ribbon..graduation cap
	// E0.0   [2] (🎔..🎕)    HEART WITH TIP ON THE LEFT..BOUQUET OF FLOWERS
	// E0.7   [2] (🎖️..🎗️)    military medal..reminder ribbon
	// E0.0   [1] (🎘)       MUSICAL KEYBOARD WITH JACKS
	// E0.7   [3] (🎙️..🎛️)    studio microphone..control knobs
	// E0.0   [2] (🎜..🎝)    BEAMED ASCENDING MUSICAL NOTES..BEAMED DESCENDING MUSICAL NOTES
	// E0.7   [2] (🎞️..🎟️)    film frames..admission tickets
	// E0.6  [37] (🎠..🏄)    carousel horse..person surfing
	// E1.0   [1] (🏅)       sports medal
	// E0.6   [1] (🏆)       trophy
	// E1.0   [1] (🏇)       horse racing
	// E0.6   [1] (🏈)       american football
	// E1.0   [1] (🏉)       rugby football
	// E0.6   [1] (🏊)       person swimming
	// E0.7   [4] (🏋️..🏎️)    person lifting weights..racing car
	// E1.0   [5] (🏏..🏓)    cricket game..ping pong
	// E0.7  [12] (🏔️..🏟️)    snow-capped mountain..stadium
	// E0.6   [4] (🏠..🏣)    house..Japanese post office
	// E1.0   [1] (🏤)       post office
	// E0.6  [12] (🏥..🏰)    hospital..castle
	// E0.0   [2] (🏱..🏲)    WHITE PENNANT..BLACK PENNANT
	// E0.7   [1] (🏳️)       white flag
	// E1.0   [1] (🏴)       black flag
	// E0.7   [1] (🏵️)       rosette
	// E0.0   [1] (🏶)       BLACK ROSETTE
	// E0.7   [1] (🏷️)       label
	// E1.0   [3] (🏸..🏺)    badminton..amphora
	if(0x1f249<=code&&code<=0x1f3fa){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E1.0   [8] (🐀..🐇)    rat..rabbit
	// E0.7   [1] (🐈)       cat
	// E1.0   [3] (🐉..🐋)    dragon..whale
	// E0.6   [3] (🐌..🐎)    snail..horse
	// E1.0   [2] (🐏..🐐)    ram..goat
	// E0.6   [2] (🐑..🐒)    ewe..monkey
	// E1.0   [1] (🐓)       rooster
	// E0.6   [1] (🐔)       chicken
	// E0.7   [1] (🐕)       dog
	// E1.0   [1] (🐖)       pig
	// E0.6  [19] (🐗..🐩)    boar..poodle
	// E1.0   [1] (🐪)       camel
	// E0.6  [20] (🐫..🐾)    two-hump camel..paw prints
	// E0.7   [1] (🐿️)       chipmunk
	// E0.6   [1] (👀)       eyes
	// E0.7   [1] (👁️)       eye
	// E0.6  [35] (👂..👤)    ear..bust in silhouette
	// E1.0   [1] (👥)       busts in silhouette
	// E0.6   [6] (👦..👫)    boy..woman and man holding hands
	// E1.0   [2] (👬..👭)    men holding hands..women holding hands
	// E0.6  [63] (👮..💬)    police officer..speech balloon
	// E1.0   [1] (💭)       thought balloon
	// E0.6   [8] (💮..💵)    white flower..dollar banknote
	// E1.0   [2] (💶..💷)    euro banknote..pound banknote
	// E0.6  [52] (💸..📫)    money with wings..closed mailbox with raised flag
	// E0.7   [2] (📬..📭)    open mailbox with raised flag..open mailbox with lowered flag
	// E0.6   [1] (📮)       postbox
	// E1.0   [1] (📯)       postal horn
	// E0.6   [5] (📰..📴)    newspaper..mobile phone off
	// E1.0   [1] (📵)       no mobile phones
	// E0.6   [2] (📶..📷)    antenna bars..camera
	// E1.0   [1] (📸)       camera with flash
	// E0.6   [4] (📹..📼)    video camera..videocassette
	// E0.7   [1] (📽️)       film projector
	// E0.0   [1] (📾)       PORTABLE STEREO
	// E1.0   [4] (📿..🔂)    prayer beads..repeat single button
	// E0.6   [1] (🔃)       clockwise vertical arrows
	// E1.0   [4] (🔄..🔇)    counterclockwise arrows button..muted speaker
	// E0.7   [1] (🔈)       speaker low volume
	// E1.0   [1] (🔉)       speaker medium volume
	// E0.6  [11] (🔊..🔔)    speaker high volume..bell
	// E1.0   [1] (🔕)       bell with slash
	// E0.6  [22] (🔖..🔫)    bookmark..water pistol
	// E1.0   [2] (🔬..🔭)    microscope..telescope
	// E0.6  [16] (🔮..🔽)    crystal ball..downwards button
	if(0x1f400<=code&&code<=0x1f53d){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}else {if(code<0x1f680){// E0.0   [3] (🕆..🕈)    WHITE LATIN CROSS..CELTIC CROSS
	// E0.7   [2] (🕉️..🕊️)    om..dove
	// E1.0   [4] (🕋..🕎)    kaaba..menorah
	// E0.0   [1] (🕏)       BOWL OF HYGIEIA
	// E0.6  [12] (🕐..🕛)    one o’clock..twelve o’clock
	// E0.7  [12] (🕜..🕧)    one-thirty..twelve-thirty
	// E0.0   [7] (🕨..🕮)    RIGHT SPEAKER..BOOK
	// E0.7   [2] (🕯️..🕰️)    candle..mantelpiece clock
	// E0.0   [2] (🕱..🕲)    BLACK SKULL AND CROSSBONES..NO PIRACY
	// E0.7   [7] (🕳️..🕹️)    hole..joystick
	// E3.0   [1] (🕺)       man dancing
	// E0.0  [12] (🕻..🖆)    LEFT HAND TELEPHONE RECEIVER..PEN OVER STAMPED ENVELOPE
	// E0.7   [1] (🖇️)       linked paperclips
	// E0.0   [2] (🖈..🖉)    BLACK PUSHPIN..LOWER LEFT PENCIL
	// E0.7   [4] (🖊️..🖍️)    pen..crayon
	// E0.0   [2] (🖎..🖏)    LEFT WRITING HAND..TURNED OK HAND SIGN
	// E0.7   [1] (🖐️)       hand with fingers splayed
	// E0.0   [4] (🖑..🖔)    REVERSED RAISED HAND WITH FINGERS SPLAYED..REVERSED VICTORY HAND
	// E1.0   [2] (🖕..🖖)    middle finger..vulcan salute
	// E0.0  [13] (🖗..🖣)    WHITE DOWN POINTING LEFT HAND INDEX..BLACK DOWN POINTING BACKHAND INDEX
	// E3.0   [1] (🖤)       black heart
	// E0.7   [1] (🖥️)       desktop computer
	// E0.0   [2] (🖦..🖧)    KEYBOARD AND MOUSE..THREE NETWORKED COMPUTERS
	// E0.7   [1] (🖨️)       printer
	// E0.0   [8] (🖩..🖰)    POCKET CALCULATOR..TWO BUTTON MOUSE
	// E0.7   [2] (🖱️..🖲️)    computer mouse..trackball
	// E0.0   [9] (🖳..🖻)    OLD PERSONAL COMPUTER..DOCUMENT WITH PICTURE
	// E0.7   [1] (🖼️)       framed picture
	// E0.0   [5] (🖽..🗁)    FRAME WITH TILES..OPEN FOLDER
	// E0.7   [3] (🗂️..🗄️)    card index dividers..file cabinet
	// E0.0  [12] (🗅..🗐)    EMPTY NOTE..PAGES
	// E0.7   [3] (🗑️..🗓️)    wastebasket..spiral calendar
	// E0.0   [8] (🗔..🗛)    DESKTOP WINDOW..DECREASE FONT SIZE SYMBOL
	// E0.7   [3] (🗜️..🗞️)    clamp..rolled-up newspaper
	// E0.0   [2] (🗟..🗠)    PAGE WITH CIRCLED TEXT..STOCK CHART
	// E0.7   [1] (🗡️)       dagger
	// E0.0   [1] (🗢)       LIPS
	// E0.7   [1] (🗣️)       speaking head
	// E0.0   [4] (🗤..🗧)    THREE RAYS ABOVE..THREE RAYS RIGHT
	// E2.0   [1] (🗨️)       left speech bubble
	// E0.0   [6] (🗩..🗮)    RIGHT SPEECH BUBBLE..LEFT ANGER BUBBLE
	// E0.7   [1] (🗯️)       right anger bubble
	// E0.0   [3] (🗰..🗲)    MOOD BUBBLE..LIGHTNING MOOD
	// E0.7   [1] (🗳️)       ballot box with ballot
	// E0.0   [6] (🗴..🗹)    BALLOT SCRIPT X..BALLOT BOX WITH BOLD CHECK
	// E0.7   [1] (🗺️)       world map
	// E0.6   [5] (🗻..🗿)    mount fuji..moai
	// E1.0   [1] (😀)       grinning face
	// E0.6   [6] (😁..😆)    beaming face with smiling eyes..grinning squinting face
	// E1.0   [2] (😇..😈)    smiling face with halo..smiling face with horns
	// E0.6   [5] (😉..😍)    winking face..smiling face with heart-eyes
	// E1.0   [1] (😎)       smiling face with sunglasses
	// E0.6   [1] (😏)       smirking face
	// E0.7   [1] (😐)       neutral face
	// E1.0   [1] (😑)       expressionless face
	// E0.6   [3] (😒..😔)    unamused face..pensive face
	// E1.0   [1] (😕)       confused face
	// E0.6   [1] (😖)       confounded face
	// E1.0   [1] (😗)       kissing face
	// E0.6   [1] (😘)       face blowing a kiss
	// E1.0   [1] (😙)       kissing face with smiling eyes
	// E0.6   [1] (😚)       kissing face with closed eyes
	// E1.0   [1] (😛)       face with tongue
	// E0.6   [3] (😜..😞)    winking face with tongue..disappointed face
	// E1.0   [1] (😟)       worried face
	// E0.6   [6] (😠..😥)    angry face..sad but relieved face
	// E1.0   [2] (😦..😧)    frowning face with open mouth..anguished face
	// E0.6   [4] (😨..😫)    fearful face..tired face
	// E1.0   [1] (😬)       grimacing face
	// E0.6   [1] (😭)       loudly crying face
	// E1.0   [2] (😮..😯)    face with open mouth..hushed face
	// E0.6   [4] (😰..😳)    anxious face with sweat..flushed face
	// E1.0   [1] (😴)       sleeping face
	// E0.6   [1] (😵)       face with crossed-out eyes
	// E1.0   [1] (😶)       face without mouth
	// E0.6  [10] (😷..🙀)    face with medical mask..weary cat
	// E1.0   [4] (🙁..🙄)    slightly frowning face..face with rolling eyes
	// E0.6  [11] (🙅..🙏)    person gesturing NO..folded hands
	if(0x1f546<=code&&code<=0x1f64f){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x1f774){// E0.6   [1] (🚀)       rocket
	// E1.0   [2] (🚁..🚂)    helicopter..locomotive
	// E0.6   [3] (🚃..🚅)    railway car..bullet train
	// E1.0   [1] (🚆)       train
	// E0.6   [1] (🚇)       metro
	// E1.0   [1] (🚈)       light rail
	// E0.6   [1] (🚉)       station
	// E1.0   [2] (🚊..🚋)    tram..tram car
	// E0.6   [1] (🚌)       bus
	// E0.7   [1] (🚍)       oncoming bus
	// E1.0   [1] (🚎)       trolleybus
	// E0.6   [1] (🚏)       bus stop
	// E1.0   [1] (🚐)       minibus
	// E0.6   [3] (🚑..🚓)    ambulance..police car
	// E0.7   [1] (🚔)       oncoming police car
	// E0.6   [1] (🚕)       taxi
	// E1.0   [1] (🚖)       oncoming taxi
	// E0.6   [1] (🚗)       automobile
	// E0.7   [1] (🚘)       oncoming automobile
	// E0.6   [2] (🚙..🚚)    sport utility vehicle..delivery truck
	// E1.0   [7] (🚛..🚡)    articulated lorry..aerial tramway
	// E0.6   [1] (🚢)       ship
	// E1.0   [1] (🚣)       person rowing boat
	// E0.6   [2] (🚤..🚥)    speedboat..horizontal traffic light
	// E1.0   [1] (🚦)       vertical traffic light
	// E0.6   [7] (🚧..🚭)    construction..no smoking
	// E1.0   [4] (🚮..🚱)    litter in bin sign..non-potable water
	// E0.6   [1] (🚲)       bicycle
	// E1.0   [3] (🚳..🚵)    no bicycles..person mountain biking
	// E0.6   [1] (🚶)       person walking
	// E1.0   [2] (🚷..🚸)    no pedestrians..children crossing
	// E0.6   [6] (🚹..🚾)    men’s room..water closet
	// E1.0   [1] (🚿)       shower
	// E0.6   [1] (🛀)       person taking bath
	// E1.0   [5] (🛁..🛅)    bathtub..left luggage
	// E0.0   [5] (🛆..🛊)    TRIANGLE WITH ROUNDED CORNERS..GIRLS SYMBOL
	// E0.7   [1] (🛋️)       couch and lamp
	// E1.0   [1] (🛌)       person in bed
	// E0.7   [3] (🛍️..🛏️)    shopping bags..bed
	// E1.0   [1] (🛐)       place of worship
	// E3.0   [2] (🛑..🛒)    stop sign..shopping cart
	// E0.0   [2] (🛓..🛔)    STUPA..PAGODA
	// E12.0  [1] (🛕)       hindu temple
	// E13.0  [2] (🛖..🛗)    hut..elevator
	// E0.0   [4] (🛘..🛛)    <reserved-1F6D8>..<reserved-1F6DB>
	// E15.0  [1] (🛜)       wireless
	// E14.0  [3] (🛝..🛟)    playground slide..ring buoy
	// E0.7   [6] (🛠️..🛥️)    hammer and wrench..motor boat
	// E0.0   [3] (🛦..🛨)    UP-POINTING MILITARY AIRPLANE..UP-POINTING SMALL AIRPLANE
	// E0.7   [1] (🛩️)       small airplane
	// E0.0   [1] (🛪)       NORTHEAST-POINTING AIRPLANE
	// E1.0   [2] (🛫..🛬)    airplane departure..airplane arrival
	// E0.0   [3] (🛭..🛯)    <reserved-1F6ED>..<reserved-1F6EF>
	// E0.7   [1] (🛰️)       satellite
	// E0.0   [2] (🛱..🛲)    ONCOMING FIRE ENGINE..DIESEL LOCOMOTIVE
	// E0.7   [1] (🛳️)       passenger ship
	// E3.0   [3] (🛴..🛶)    kick scooter..canoe
	// E5.0   [2] (🛷..🛸)    sled..flying saucer
	// E11.0  [1] (🛹)       skateboard
	// E12.0  [1] (🛺)       auto rickshaw
	// E13.0  [2] (🛻..🛼)    pickup truck..roller skate
	// E0.0   [3] (🛽..🛿)    <reserved-1F6FD>..<reserved-1F6FF>
	if(0x1f680<=code&&code<=0x1f6ff){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.0  [12] (🝴..🝿)    LOT OF FORTUNE..ORCUS
	if(0x1f774<=code&&code<=0x1f77f){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}}else {if(code<0x1f8ae){if(code<0x1f848){if(code<0x1f80c){// E0.0  [11] (🟕..🟟)    CIRCLED TRIANGLE..<reserved-1F7DF>
	// E12.0 [12] (🟠..🟫)    orange circle..brown square
	// E0.0   [4] (🟬..🟯)    <reserved-1F7EC>..<reserved-1F7EF>
	// E14.0  [1] (🟰)       heavy equals sign
	// E0.0  [15] (🟱..🟿)    <reserved-1F7F1>..<reserved-1F7FF>
	if(0x1f7d5<=code&&code<=0x1f7ff){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.0   [4] (🠌..🠏)    <reserved-1F80C>..<reserved-1F80F>
	if(0x1f80c<=code&&code<=0x1f80f){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}else {if(code<0x1f85a){// E0.0   [8] (🡈..🡏)    <reserved-1F848>..<reserved-1F84F>
	if(0x1f848<=code&&code<=0x1f84f){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x1f888){// E0.0   [6] (🡚..🡟)    <reserved-1F85A>..<reserved-1F85F>
	if(0x1f85a<=code&&code<=0x1f85f){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.0   [8] (🢈..🢏)    <reserved-1F888>..<reserved-1F88F>
	if(0x1f888<=code&&code<=0x1f88f){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}else {if(code<0x1f93c){if(code<0x1f90c){// E0.0  [82] (🢮..🣿)    <reserved-1F8AE>..<reserved-1F8FF>
	if(0x1f8ae<=code&&code<=0x1f8ff){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E13.0  [1] (🤌)       pinched fingers
	// E12.0  [3] (🤍..🤏)    white heart..pinching hand
	// E1.0   [9] (🤐..🤘)    zipper-mouth face..sign of the horns
	// E3.0   [6] (🤙..🤞)    call me hand..crossed fingers
	// E5.0   [1] (🤟)       love-you gesture
	// E3.0   [8] (🤠..🤧)    cowboy hat face..sneezing face
	// E5.0   [8] (🤨..🤯)    face with raised eyebrow..exploding head
	// E3.0   [1] (🤰)       pregnant woman
	// E5.0   [2] (🤱..🤲)    breast-feeding..palms up together
	// E3.0   [8] (🤳..🤺)    selfie..person fencing
	if(0x1f90c<=code&&code<=0x1f93a){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}else {if(code<0x1f947){// E3.0   [3] (🤼..🤾)    people wrestling..person playing handball
	// E12.0  [1] (🤿)       diving mask
	// E3.0   [6] (🥀..🥅)    wilted flower..goal net
	if(0x1f93c<=code&&code<=0x1f945){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x1fc00){// E3.0   [5] (🥇..🥋)    1st place medal..martial arts uniform
	// E5.0   [1] (🥌)       curling stone
	// E11.0  [3] (🥍..🥏)    lacrosse..flying disc
	// E3.0  [15] (🥐..🥞)    croissant..pancakes
	// E5.0  [13] (🥟..🥫)    dumpling..canned food
	// E11.0  [5] (🥬..🥰)    leafy green..smiling face with hearts
	// E12.0  [1] (🥱)       yawning face
	// E13.0  [1] (🥲)       smiling face with tear
	// E11.0  [4] (🥳..🥶)    partying face..cold face
	// E13.0  [2] (🥷..🥸)    ninja..disguised face
	// E14.0  [1] (🥹)       face holding back tears
	// E11.0  [1] (🥺)       pleading face
	// E12.0  [1] (🥻)       sari
	// E11.0  [4] (🥼..🥿)    lab coat..flat shoe
	// E1.0   [5] (🦀..🦄)    crab..unicorn
	// E3.0  [13] (🦅..🦑)    eagle..squid
	// E5.0   [6] (🦒..🦗)    giraffe..cricket
	// E11.0 [11] (🦘..🦢)    kangaroo..swan
	// E13.0  [2] (🦣..🦤)    mammoth..dodo
	// E12.0  [6] (🦥..🦪)    sloth..oyster
	// E13.0  [3] (🦫..🦭)    beaver..seal
	// E12.0  [2] (🦮..🦯)    guide dog..white cane
	// E11.0 [10] (🦰..🦹)    red hair..supervillain
	// E12.0  [6] (🦺..🦿)    safety vest..mechanical leg
	// E1.0   [1] (🧀)       cheese wedge
	// E11.0  [2] (🧁..🧂)    cupcake..salt
	// E12.0  [8] (🧃..🧊)    beverage box..ice
	// E13.0  [1] (🧋)       bubble tea
	// E14.0  [1] (🧌)       troll
	// E12.0  [3] (🧍..🧏)    person standing..deaf person
	// E5.0  [23] (🧐..🧦)    face with monocle..socks
	// E11.0 [25] (🧧..🧿)    red envelope..nazar amulet
	// E0.0 [112] (🨀..🩯)    NEUTRAL CHESS KING..<reserved-1FA6F>
	// E12.0  [4] (🩰..🩳)    ballet shoes..shorts
	// E13.0  [1] (🩴)       thong sandal
	// E15.0  [3] (🩵..🩷)    light blue heart..pink heart
	// E12.0  [3] (🩸..🩺)    drop of blood..stethoscope
	// E14.0  [2] (🩻..🩼)    x-ray..crutch
	// E0.0   [3] (🩽..🩿)    <reserved-1FA7D>..<reserved-1FA7F>
	// E12.0  [3] (🪀..🪂)    yo-yo..parachute
	// E13.0  [4] (🪃..🪆)    boomerang..nesting dolls
	// E15.0  [2] (🪇..🪈)    maracas..flute
	// E0.0   [7] (🪉..🪏)    <reserved-1FA89>..<reserved-1FA8F>
	// E12.0  [6] (🪐..🪕)    ringed planet..banjo
	// E13.0 [19] (🪖..🪨)    military helmet..rock
	// E14.0  [4] (🪩..🪬)    mirror ball..hamsa
	// E15.0  [3] (🪭..🪯)    folding hand fan..khanda
	// E13.0  [7] (🪰..🪶)    fly..feather
	// E14.0  [4] (🪷..🪺)    lotus..nest with eggs
	// E15.0  [3] (🪻..🪽)    hyacinth..wing
	// E0.0   [1] (🪾)       <reserved-1FABE>
	// E15.0  [1] (🪿)       goose
	// E13.0  [3] (🫀..🫂)    anatomical heart..people hugging
	// E14.0  [3] (🫃..🫅)    pregnant man..person with crown
	// E0.0   [8] (🫆..🫍)    <reserved-1FAC6>..<reserved-1FACD>
	// E15.0  [2] (🫎..🫏)    moose..donkey
	// E13.0  [7] (🫐..🫖)    blueberries..teapot
	// E14.0  [3] (🫗..🫙)    pouring liquid..jar
	// E15.0  [2] (🫚..🫛)    ginger root..pea pod
	// E0.0   [4] (🫜..🫟)    <reserved-1FADC>..<reserved-1FADF>
	// E14.0  [8] (🫠..🫧)    melting face..bubbles
	// E15.0  [1] (🫨)       shaking face
	// E0.0   [7] (🫩..🫯)    <reserved-1FAE9>..<reserved-1FAEF>
	// E14.0  [7] (🫰..🫶)    hand with index finger and thumb crossed..heart hands
	// E15.0  [2] (🫷..🫸)    leftwards pushing hand..rightwards pushing hand
	// E0.0   [7] (🫹..🫿)    <reserved-1FAF9>..<reserved-1FAFF>
	if(0x1f947<=code&&code<=0x1faff){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.0[1022] (🰀..🿽)    <reserved-1FC00>..<reserved-1FFFD>
	if(0x1fc00<=code&&code<=0x1fffd){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}}}}// unlisted code points are treated as a break property of "Other"
	return boundaries_1.CLUSTER_BREAK.OTHER;}}Graphemer$1.default=Graphemer;

	var __importDefault$2 = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
	  return mod && mod.__esModule ? mod : {
	    "default": mod
	  };
	};
	Object.defineProperty(lib, "__esModule", {
	  value: true
	});
	const Graphemer_1 = __importDefault$2(Graphemer$1);
	lib.default = Graphemer_1.default;

	var __createBinding$4 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  var desc = Object.getOwnPropertyDescriptor(m, k);
	  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	    desc = {
	      enumerable: true,
	      get: function () {
	        return m[k];
	      }
	    };
	  }
	  Object.defineProperty(o, k2, desc);
	} : function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  o[k2] = m[k];
	});
	var __setModuleDefault$4 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
	  Object.defineProperty(o, "default", {
	    enumerable: true,
	    value: v
	  });
	} : function (o, v) {
	  o["default"] = v;
	});
	var __importStar$4 = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
	  if (mod && mod.__esModule) return mod;
	  var result = {};
	  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$4(result, mod, k);
	  __setModuleDefault$4(result, mod);
	  return result;
	};
	var __importDefault$1 = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
	  return mod && mod.__esModule ? mod : {
	    "default": mod
	  };
	};
	Object.defineProperty(strings, "__esModule", {
	  value: true
	});
	strings.validateLanguage = strings.parseLanguage = strings.b64UrlToUtf8 = strings.utf8ToB64Url = strings.graphemeLen = strings.utf8Len = void 0;
	const graphemer_1 = __importDefault$1(lib);
	const ui8 = __importStar$4(src$1);
	// counts the number of bytes in a utf8 string
	const utf8Len = str => {
	  return new TextEncoder().encode(str).byteLength;
	};
	strings.utf8Len = utf8Len;
	// counts the number of graphemes (user-displayed characters) in a string
	const graphemeLen = str => {
	  const splitter = new graphemer_1.default();
	  return splitter.countGraphemes(str);
	};
	strings.graphemeLen = graphemeLen;
	const utf8ToB64Url = utf8 => {
	  return ui8.toString(ui8.fromString(utf8, 'utf8'), 'base64url');
	};
	strings.utf8ToB64Url = utf8ToB64Url;
	const b64UrlToUtf8 = b64 => {
	  return ui8.toString(ui8.fromString(b64, 'base64url'), 'utf8');
	};
	strings.b64UrlToUtf8 = b64UrlToUtf8;
	const parseLanguage = langTag => {
	  const parsed = langTag.match(bcp47Regexp);
	  if (!parsed?.groups) return null;
	  const parts = parsed.groups;
	  return {
	    grandfathered: parts.grandfathered,
	    language: parts.language,
	    extlang: parts.extlang,
	    script: parts.script,
	    region: parts.region,
	    variant: parts.variant,
	    extension: parts.extension,
	    privateUse: parts.privateUseA || parts.privateUseB
	  };
	};
	strings.parseLanguage = parseLanguage;
	const validateLanguage = langTag => {
	  return bcp47Regexp.test(langTag);
	};
	strings.validateLanguage = validateLanguage;
	// Validates well-formed BCP 47 syntax: https://www.rfc-editor.org/rfc/rfc5646.html#section-2.1
	const bcp47Regexp = /^((?<grandfathered>(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((?<language>([A-Za-z]{2,3}(-(?<extlang>[A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-(?<script>[A-Za-z]{4}))?(-(?<region>[A-Za-z]{2}|[0-9]{3}))?(-(?<variant>[A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-(?<extension>[0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8})+))*(-(?<privateUseA>x(-[A-Za-z0-9]{1,8})+))?)|(?<privateUseB>x(-[A-Za-z0-9]{1,8})+))$/;

	var didDoc = {};

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.didDocument = exports.getServiceEndpoint = exports.getNotifEndpoint = exports.getFeedGenEndpoint = exports.getPdsEndpoint = exports.getSigningDidKey = exports.getVerificationMaterial = exports.getSigningKey = exports.getHandle = exports.getDid = exports.isValidDidDoc = void 0;
	  const zod_1 = lib$1;
	  // Parsing atproto data
	  // --------
	  const isValidDidDoc = doc => {
	    return exports.didDocument.safeParse(doc).success;
	  };
	  exports.isValidDidDoc = isValidDidDoc;
	  const getDid = doc => {
	    const id = doc.id;
	    if (typeof id !== 'string') {
	      throw new Error('No `id` on document');
	    }
	    return id;
	  };
	  exports.getDid = getDid;
	  const getHandle = doc => {
	    const aka = doc.alsoKnownAs;
	    if (!aka) return undefined;
	    const found = aka.find(name => name.startsWith('at://'));
	    if (!found) return undefined;
	    // strip off at:// prefix
	    return found.slice(5);
	  };
	  exports.getHandle = getHandle;
	  // @NOTE we parse to type/publicKeyMultibase to avoid the dependency on @atproto/crypto
	  const getSigningKey = doc => {
	    return (0, exports.getVerificationMaterial)(doc, 'atproto');
	  };
	  exports.getSigningKey = getSigningKey;
	  const getVerificationMaterial = (doc, keyId) => {
	    const did = (0, exports.getDid)(doc);
	    let keys = doc.verificationMethod;
	    if (!keys) return undefined;
	    if (typeof keys !== 'object') return undefined;
	    if (!Array.isArray(keys)) {
	      keys = [keys];
	    }
	    const found = keys.find(key => key.id === `#${keyId}` || key.id === `${did}#${keyId}`);
	    if (!found?.publicKeyMultibase) return undefined;
	    return {
	      type: found.type,
	      publicKeyMultibase: found.publicKeyMultibase
	    };
	  };
	  exports.getVerificationMaterial = getVerificationMaterial;
	  const getSigningDidKey = doc => {
	    const parsed = (0, exports.getSigningKey)(doc);
	    if (!parsed) return;
	    return `did:key:${parsed.publicKeyMultibase}`;
	  };
	  exports.getSigningDidKey = getSigningDidKey;
	  const getPdsEndpoint = doc => {
	    return (0, exports.getServiceEndpoint)(doc, {
	      id: '#atproto_pds',
	      type: 'AtprotoPersonalDataServer'
	    });
	  };
	  exports.getPdsEndpoint = getPdsEndpoint;
	  const getFeedGenEndpoint = doc => {
	    return (0, exports.getServiceEndpoint)(doc, {
	      id: '#bsky_fg',
	      type: 'BskyFeedGenerator'
	    });
	  };
	  exports.getFeedGenEndpoint = getFeedGenEndpoint;
	  const getNotifEndpoint = doc => {
	    return (0, exports.getServiceEndpoint)(doc, {
	      id: '#bsky_notif',
	      type: 'BskyNotificationService'
	    });
	  };
	  exports.getNotifEndpoint = getNotifEndpoint;
	  const getServiceEndpoint = (doc, opts) => {
	    const did = (0, exports.getDid)(doc);
	    let services = doc.service;
	    if (!services) return undefined;
	    if (typeof services !== 'object') return undefined;
	    if (!Array.isArray(services)) {
	      services = [services];
	    }
	    const found = services.find(service => service.id === opts.id || service.id === `${did}${opts.id}`);
	    if (!found) return undefined;
	    if (opts.type && found.type !== opts.type) {
	      return undefined;
	    }
	    if (typeof found.serviceEndpoint !== 'string') {
	      return undefined;
	    }
	    return validateUrl(found.serviceEndpoint);
	  };
	  exports.getServiceEndpoint = getServiceEndpoint;
	  // Check protocol and hostname to prevent potential SSRF
	  const validateUrl = urlStr => {
	    let url;
	    try {
	      url = new URL(urlStr);
	    } catch {
	      return undefined;
	    }
	    if (!['http:', 'https:'].includes(url.protocol)) {
	      return undefined;
	    } else if (!url.hostname) {
	      return undefined;
	    } else {
	      return urlStr;
	    }
	  };
	  // Types
	  // --------
	  const verificationMethod = zod_1.z.object({
	    id: zod_1.z.string(),
	    type: zod_1.z.string(),
	    controller: zod_1.z.string(),
	    publicKeyMultibase: zod_1.z.string().optional()
	  });
	  const service = zod_1.z.object({
	    id: zod_1.z.string(),
	    type: zod_1.z.string(),
	    serviceEndpoint: zod_1.z.union([zod_1.z.string(), zod_1.z.record(zod_1.z.unknown())])
	  });
	  exports.didDocument = zod_1.z.object({
	    id: zod_1.z.string(),
	    alsoKnownAs: zod_1.z.array(zod_1.z.string()).optional(),
	    verificationMethod: zod_1.z.array(verificationMethod).optional(),
	    service: zod_1.z.array(service).optional()
	  });
	})(didDoc);

	(function (exports) {

	  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = {
	        enumerable: true,
	        get: function () {
	          return m[k];
	        }
	      };
	    }
	    Object.defineProperty(o, k2, desc);
	  } : function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	  });
	  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
	    Object.defineProperty(o, "default", {
	      enumerable: true,
	      value: v
	    });
	  } : function (o, v) {
	    o["default"] = v;
	  });
	  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	  };
	  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function (m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	  };
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.util = exports.check = void 0;
	  exports.check = __importStar(check);
	  exports.util = __importStar(util$5);
	  __exportStar(arrays, exports);
	  __exportStar(async, exports);
	  __exportStar(util$5, exports);
	  __exportStar(tid, exports);
	  __exportStar(ipld, exports);
	  __exportStar(retry$1, exports);
	  __exportStar(types$3, exports);
	  __exportStar(times, exports);
	  __exportStar(strings, exports);
	  __exportStar(didDoc, exports);
	})(dist$2);

	var formats = {};

	var dist$1 = {};

	var hasRequiredDist;
	function requireDist() {
	  if (hasRequiredDist) return dist$1;
	  hasRequiredDist = 1;
	  (function (exports) {
	    (() => {

	      var e = {
	          d: (t, r) => {
	            for (var n in r) e.o(r, n) && !e.o(t, n) && Object.defineProperty(t, n, {
	              enumerable: !0,
	              get: r[n]
	            });
	          },
	          o: (e, t) => Object.prototype.hasOwnProperty.call(e, t),
	          r: e => {
	            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
	              value: "Module"
	            }), Object.defineProperty(e, "__esModule", {
	              value: !0
	            });
	          }
	        },
	        t = {};
	      function r(e, t) {
	        return void 0 === t && (t = "-"), new RegExp("^(?!0{4}" + t + "0{2}" + t + "0{2})((?=[0-9]{4}" + t + "(((0[^2])|1[0-2])|02(?=" + t + "(([0-1][0-9])|2[0-8])))" + t + "[0-9]{2})|(?=((([13579][26])|([2468][048])|(0[48]))0{2})|([0-9]{2}((((0|[2468])[48])|[2468][048])|([13579][26])))" + t + "02" + t + "29))([0-9]{4})" + t + "(?!((0[469])|11)" + t + "31)((0[1,3-9]|1[0-2])|(02(?!" + t + "3)))" + t + "(0[1-9]|[1-2][0-9]|3[0-1])$").test(e);
	      }
	      function n(e) {
	        var t = /\D/.exec(e);
	        return t ? t[0] : "";
	      }
	      function i(e, t, r) {
	        void 0 === t && (t = ":"), void 0 === r && (r = !1);
	        var i = new RegExp("^([0-1]|2(?=([0-3])|4" + t + "00))[0-9]" + t + "[0-5][0-9](" + t + "([0-5]|6(?=0))[0-9])?(.[0-9]{1,9})?$");
	        if (!r || !/[Z+\-]/.test(e)) return i.test(e);
	        if (/Z$/.test(e)) return i.test(e.replace("Z", ""));
	        var o = e.includes("+"),
	          a = e.split(/[+-]/),
	          u = a[0],
	          d = a[1];
	        return i.test(u) && function (e, t, r) {
	          return void 0 === r && (r = ":"), new RegExp(t ? "^(0(?!(2" + r + "4)|0" + r + "3)|1(?=([0-1]|2(?=" + r + "[04])|[34](?=" + r + "0))))([03469](?=" + r + "[03])|[17](?=" + r + "0)|2(?=" + r + "[04])|5(?=" + r + "[034])|8(?=" + r + "[04]))" + r + "([03](?=0)|4(?=5))[05]$" : "^(0(?=[^0])|1(?=[0-2]))([39](?=" + r + "[03])|[0-24-8](?=" + r + "00))" + r + "[03]0$").test(e);
	        }(d, o, n(d));
	      }
	      function o(e) {
	        var t = e.split("T"),
	          o = t[0],
	          a = t[1],
	          u = r(o, n(o));
	        if (!a) return !1;
	        var d,
	          s = (d = a.match(/([^Z+\-\d])(?=\d+\1)/), Array.isArray(d) ? d[0] : "");
	        return u && i(a, s, !0);
	      }
	      function a(e, t) {
	        return void 0 === t && (t = "-"), new RegExp("^[0-9]{4}" + t + "(0(?=[^0])|1(?=[0-2]))[0-9]$").test(e);
	      }
	      e.r(t), e.d(t, {
	        isValidDate: () => r,
	        isValidISODateString: () => o,
	        isValidTime: () => i,
	        isValidYearMonth: () => a
	      });
	      var u = exports;
	      for (var d in t) u[d] = t[d];
	      t.__esModule && Object.defineProperty(u, "__esModule", {
	        value: !0
	      });
	    })();
	  })(dist$1);
	  return dist$1;
	}

	var hasRequiredFormats;
	function requireFormats() {
	  if (hasRequiredFormats) return formats;
	  hasRequiredFormats = 1;
	  Object.defineProperty(formats, "__esModule", {
	    value: true
	  });
	  formats.language = formats.cid = formats.nsid = formats.atIdentifier = formats.handle = formats.did = formats.atUri = formats.uri = formats.datetime = void 0;
	  const iso_datestring_validator_1 = requireDist();
	  const cid_1 = cid$2;
	  const types_1 = requireTypes();
	  const syntax_1 = dist$4;
	  const common_web_1 = dist$2;
	  function datetime(path, value) {
	    try {
	      if (!(0, iso_datestring_validator_1.isValidISODateString)(value)) {
	        throw new Error();
	      }
	    } catch {
	      return {
	        success: false,
	        error: new types_1.ValidationError(`${path} must be an valid atproto datetime (both RFC-3339 and ISO-8601)`)
	      };
	    }
	    return {
	      success: true,
	      value
	    };
	  }
	  formats.datetime = datetime;
	  function uri(path, value) {
	    const isUri = value.match(/^\w+:(?:\/\/)?[^\s/][^\s]*$/) !== null;
	    if (!isUri) {
	      return {
	        success: false,
	        error: new types_1.ValidationError(`${path} must be a uri`)
	      };
	    }
	    return {
	      success: true,
	      value
	    };
	  }
	  formats.uri = uri;
	  function atUri(path, value) {
	    try {
	      (0, syntax_1.ensureValidAtUri)(value);
	    } catch {
	      return {
	        success: false,
	        error: new types_1.ValidationError(`${path} must be a valid at-uri`)
	      };
	    }
	    return {
	      success: true,
	      value
	    };
	  }
	  formats.atUri = atUri;
	  function did(path, value) {
	    try {
	      (0, syntax_1.ensureValidDid)(value);
	    } catch {
	      return {
	        success: false,
	        error: new types_1.ValidationError(`${path} must be a valid did`)
	      };
	    }
	    return {
	      success: true,
	      value
	    };
	  }
	  formats.did = did;
	  function handle(path, value) {
	    try {
	      (0, syntax_1.ensureValidHandle)(value);
	    } catch {
	      return {
	        success: false,
	        error: new types_1.ValidationError(`${path} must be a valid handle`)
	      };
	    }
	    return {
	      success: true,
	      value
	    };
	  }
	  formats.handle = handle;
	  function atIdentifier(path, value) {
	    const isDid = did(path, value);
	    if (!isDid.success) {
	      const isHandle = handle(path, value);
	      if (!isHandle.success) {
	        return {
	          success: false,
	          error: new types_1.ValidationError(`${path} must be a valid did or a handle`)
	        };
	      }
	    }
	    return {
	      success: true,
	      value
	    };
	  }
	  formats.atIdentifier = atIdentifier;
	  function nsid(path, value) {
	    try {
	      (0, syntax_1.ensureValidNsid)(value);
	    } catch {
	      return {
	        success: false,
	        error: new types_1.ValidationError(`${path} must be a valid nsid`)
	      };
	    }
	    return {
	      success: true,
	      value
	    };
	  }
	  formats.nsid = nsid;
	  function cid(path, value) {
	    try {
	      cid_1.CID.parse(value);
	    } catch {
	      return {
	        success: false,
	        error: new types_1.ValidationError(`${path} must be a cid string`)
	      };
	    }
	    return {
	      success: true,
	      value
	    };
	  }
	  formats.cid = cid;
	  // The language format validates well-formed BCP 47 language tags: https://www.rfc-editor.org/info/bcp47
	  function language(path, value) {
	    if ((0, common_web_1.validateLanguage)(value)) {
	      return {
	        success: true,
	        value
	      };
	    }
	    return {
	      success: false,
	      error: new types_1.ValidationError(`${path} must be a well-formed BCP 47 language tag`)
	    };
	  }
	  formats.language = language;
	  return formats;
	}

	var hasRequiredPrimitives;
	function requirePrimitives() {
	  if (hasRequiredPrimitives) return primitives;
	  hasRequiredPrimitives = 1;
	  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = {
	        enumerable: true,
	        get: function () {
	          return m[k];
	        }
	      };
	    }
	    Object.defineProperty(o, k2, desc);
	  } : function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	  });
	  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
	    Object.defineProperty(o, "default", {
	      enumerable: true,
	      value: v
	    });
	  } : function (o, v) {
	    o["default"] = v;
	  });
	  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	  };
	  Object.defineProperty(primitives, "__esModule", {
	    value: true
	  });
	  primitives.unknown = primitives.cidLink = primitives.bytes = primitives.string = primitives.integer = primitives.boolean = primitives.validate = void 0;
	  const common_web_1 = dist$2;
	  const cid_1 = cid$2;
	  const formats = __importStar(requireFormats());
	  const types_1 = requireTypes();
	  function validate(lexicons, path, def, value) {
	    switch (def.type) {
	      case 'boolean':
	        return boolean(lexicons, path, def, value);
	      case 'integer':
	        return integer(lexicons, path, def, value);
	      case 'string':
	        return string(lexicons, path, def, value);
	      case 'bytes':
	        return bytes(lexicons, path, def, value);
	      case 'cid-link':
	        return cidLink(lexicons, path, def, value);
	      case 'unknown':
	        return unknown(lexicons, path, def, value);
	      default:
	        return {
	          success: false,
	          error: new types_1.ValidationError(`Unexpected lexicon type: ${def.type}`)
	        };
	    }
	  }
	  primitives.validate = validate;
	  function boolean(lexicons, path, def, value) {
	    def = def;
	    // type
	    const type = typeof value;
	    if (type === 'undefined') {
	      if (typeof def.default === 'boolean') {
	        return {
	          success: true,
	          value: def.default
	        };
	      }
	      return {
	        success: false,
	        error: new types_1.ValidationError(`${path} must be a boolean`)
	      };
	    } else if (type !== 'boolean') {
	      return {
	        success: false,
	        error: new types_1.ValidationError(`${path} must be a boolean`)
	      };
	    }
	    // const
	    if (typeof def.const === 'boolean') {
	      if (value !== def.const) {
	        return {
	          success: false,
	          error: new types_1.ValidationError(`${path} must be ${def.const}`)
	        };
	      }
	    }
	    return {
	      success: true,
	      value
	    };
	  }
	  primitives.boolean = boolean;
	  function integer(lexicons, path, def, value) {
	    def = def;
	    // type
	    const type = typeof value;
	    if (type === 'undefined') {
	      if (typeof def.default === 'number') {
	        return {
	          success: true,
	          value: def.default
	        };
	      }
	      return {
	        success: false,
	        error: new types_1.ValidationError(`${path} must be an integer`)
	      };
	    } else if (!Number.isInteger(value)) {
	      return {
	        success: false,
	        error: new types_1.ValidationError(`${path} must be an integer`)
	      };
	    }
	    // const
	    if (typeof def.const === 'number') {
	      if (value !== def.const) {
	        return {
	          success: false,
	          error: new types_1.ValidationError(`${path} must be ${def.const}`)
	        };
	      }
	    }
	    // enum
	    if (Array.isArray(def.enum)) {
	      if (!def.enum.includes(value)) {
	        return {
	          success: false,
	          error: new types_1.ValidationError(`${path} must be one of (${def.enum.join('|')})`)
	        };
	      }
	    }
	    // maximum
	    if (typeof def.maximum === 'number') {
	      if (value > def.maximum) {
	        return {
	          success: false,
	          error: new types_1.ValidationError(`${path} can not be greater than ${def.maximum}`)
	        };
	      }
	    }
	    // minimum
	    if (typeof def.minimum === 'number') {
	      if (value < def.minimum) {
	        return {
	          success: false,
	          error: new types_1.ValidationError(`${path} can not be less than ${def.minimum}`)
	        };
	      }
	    }
	    return {
	      success: true,
	      value
	    };
	  }
	  primitives.integer = integer;
	  function string(lexicons, path, def, value) {
	    def = def;
	    // type
	    if (typeof value === 'undefined') {
	      if (typeof def.default === 'string') {
	        return {
	          success: true,
	          value: def.default
	        };
	      }
	      return {
	        success: false,
	        error: new types_1.ValidationError(`${path} must be a string`)
	      };
	    } else if (typeof value !== 'string') {
	      return {
	        success: false,
	        error: new types_1.ValidationError(`${path} must be a string`)
	      };
	    }
	    // const
	    if (typeof def.const === 'string') {
	      if (value !== def.const) {
	        return {
	          success: false,
	          error: new types_1.ValidationError(`${path} must be ${def.const}`)
	        };
	      }
	    }
	    // enum
	    if (Array.isArray(def.enum)) {
	      if (!def.enum.includes(value)) {
	        return {
	          success: false,
	          error: new types_1.ValidationError(`${path} must be one of (${def.enum.join('|')})`)
	        };
	      }
	    }
	    // maxLength
	    if (typeof def.maxLength === 'number') {
	      if ((0, common_web_1.utf8Len)(value) > def.maxLength) {
	        return {
	          success: false,
	          error: new types_1.ValidationError(`${path} must not be longer than ${def.maxLength} characters`)
	        };
	      }
	    }
	    // minLength
	    if (typeof def.minLength === 'number') {
	      if ((0, common_web_1.utf8Len)(value) < def.minLength) {
	        return {
	          success: false,
	          error: new types_1.ValidationError(`${path} must not be shorter than ${def.minLength} characters`)
	        };
	      }
	    }
	    // maxGraphemes
	    if (typeof def.maxGraphemes === 'number') {
	      if ((0, common_web_1.graphemeLen)(value) > def.maxGraphemes) {
	        return {
	          success: false,
	          error: new types_1.ValidationError(`${path} must not be longer than ${def.maxGraphemes} graphemes`)
	        };
	      }
	    }
	    // minGraphemes
	    if (typeof def.minGraphemes === 'number') {
	      if ((0, common_web_1.graphemeLen)(value) < def.minGraphemes) {
	        return {
	          success: false,
	          error: new types_1.ValidationError(`${path} must not be shorter than ${def.minGraphemes} graphemes`)
	        };
	      }
	    }
	    if (typeof def.format === 'string') {
	      switch (def.format) {
	        case 'datetime':
	          return formats.datetime(path, value);
	        case 'uri':
	          return formats.uri(path, value);
	        case 'at-uri':
	          return formats.atUri(path, value);
	        case 'did':
	          return formats.did(path, value);
	        case 'handle':
	          return formats.handle(path, value);
	        case 'at-identifier':
	          return formats.atIdentifier(path, value);
	        case 'nsid':
	          return formats.nsid(path, value);
	        case 'cid':
	          return formats.cid(path, value);
	        case 'language':
	          return formats.language(path, value);
	      }
	    }
	    return {
	      success: true,
	      value
	    };
	  }
	  primitives.string = string;
	  function bytes(lexicons, path, def, value) {
	    def = def;
	    if (!value || !(value instanceof Uint8Array)) {
	      return {
	        success: false,
	        error: new types_1.ValidationError(`${path} must be a byte array`)
	      };
	    }
	    // maxLength
	    if (typeof def.maxLength === 'number') {
	      if (value.byteLength > def.maxLength) {
	        return {
	          success: false,
	          error: new types_1.ValidationError(`${path} must not be larger than ${def.maxLength} bytes`)
	        };
	      }
	    }
	    // minLength
	    if (typeof def.minLength === 'number') {
	      if (value.byteLength < def.minLength) {
	        return {
	          success: false,
	          error: new types_1.ValidationError(`${path} must not be smaller than ${def.minLength} bytes`)
	        };
	      }
	    }
	    return {
	      success: true,
	      value
	    };
	  }
	  primitives.bytes = bytes;
	  function cidLink(lexicons, path, def, value) {
	    if (cid_1.CID.asCID(value) === null) {
	      return {
	        success: false,
	        error: new types_1.ValidationError(`${path} must be a CID`)
	      };
	    }
	    return {
	      success: true,
	      value
	    };
	  }
	  primitives.cidLink = cidLink;
	  function unknown(lexicons, path, def, value) {
	    // type
	    if (!value || typeof value !== 'object') {
	      return {
	        success: false,
	        error: new types_1.ValidationError(`${path} must be an object`)
	      };
	    }
	    return {
	      success: true,
	      value
	    };
	  }
	  primitives.unknown = unknown;
	  return primitives;
	}

	var blob = {};

	var blobRefs = {};

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.BlobRef = exports.jsonBlobRef = exports.untypedJsonBlobRef = exports.typedJsonBlobRef = void 0;
	  const common_web_1 = dist$2;
	  const cid_1 = cid$2;
	  const zod_1 = lib$1;
	  exports.typedJsonBlobRef = zod_1.z.object({
	    $type: zod_1.z.literal('blob'),
	    ref: common_web_1.schema.cid,
	    mimeType: zod_1.z.string(),
	    size: zod_1.z.number()
	  }).strict();
	  exports.untypedJsonBlobRef = zod_1.z.object({
	    cid: zod_1.z.string(),
	    mimeType: zod_1.z.string()
	  }).strict();
	  exports.jsonBlobRef = zod_1.z.union([exports.typedJsonBlobRef, exports.untypedJsonBlobRef]);
	  class BlobRef {
	    constructor(ref, mimeType, size, original) {
	      Object.defineProperty(this, "ref", {
	        enumerable: true,
	        configurable: true,
	        writable: true,
	        value: ref
	      });
	      Object.defineProperty(this, "mimeType", {
	        enumerable: true,
	        configurable: true,
	        writable: true,
	        value: mimeType
	      });
	      Object.defineProperty(this, "size", {
	        enumerable: true,
	        configurable: true,
	        writable: true,
	        value: size
	      });
	      Object.defineProperty(this, "original", {
	        enumerable: true,
	        configurable: true,
	        writable: true,
	        value: void 0
	      });
	      this.original = original ?? {
	        $type: 'blob',
	        ref,
	        mimeType,
	        size
	      };
	    }
	    static asBlobRef(obj) {
	      if (common_web_1.check.is(obj, exports.jsonBlobRef)) {
	        return BlobRef.fromJsonRef(obj);
	      }
	      return null;
	    }
	    static fromJsonRef(json) {
	      if (common_web_1.check.is(json, exports.typedJsonBlobRef)) {
	        return new BlobRef(json.ref, json.mimeType, json.size);
	      } else {
	        return new BlobRef(cid_1.CID.parse(json.cid), json.mimeType, -1, json);
	      }
	    }
	    ipld() {
	      return {
	        $type: 'blob',
	        ref: this.ref,
	        mimeType: this.mimeType,
	        size: this.size
	      };
	    }
	    toJSON() {
	      return (0, common_web_1.ipldToJson)(this.ipld());
	    }
	  }
	  exports.BlobRef = BlobRef;
	})(blobRefs);

	var hasRequiredBlob;
	function requireBlob() {
	  if (hasRequiredBlob) return blob;
	  hasRequiredBlob = 1;
	  Object.defineProperty(blob, "__esModule", {
	    value: true
	  });
	  blob.blob = void 0;
	  const blob_refs_1 = blobRefs;
	  const types_1 = requireTypes();
	  function blob$1(lexicons, path, def, value) {
	    // check
	    if (!value || !(value instanceof blob_refs_1.BlobRef)) {
	      return {
	        success: false,
	        error: new types_1.ValidationError(`${path} should be a blob ref`)
	      };
	    }
	    return {
	      success: true,
	      value
	    };
	  }
	  blob.blob = blob$1;
	  return blob;
	}

	var hasRequiredComplex;
	function requireComplex() {
	  if (hasRequiredComplex) return complex;
	  hasRequiredComplex = 1;
	  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = {
	        enumerable: true,
	        get: function () {
	          return m[k];
	        }
	      };
	    }
	    Object.defineProperty(o, k2, desc);
	  } : function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	  });
	  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
	    Object.defineProperty(o, "default", {
	      enumerable: true,
	      value: v
	    });
	  } : function (o, v) {
	    o["default"] = v;
	  });
	  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	  };
	  Object.defineProperty(complex, "__esModule", {
	    value: true
	  });
	  complex.object = complex.array = complex.validate = void 0;
	  const types_1 = requireTypes();
	  const util_1 = requireUtil();
	  const Primitives = __importStar(requirePrimitives());
	  const Blob = __importStar(requireBlob());
	  function validate(lexicons, path, def, value) {
	    switch (def.type) {
	      case 'boolean':
	        return Primitives.boolean(lexicons, path, def, value);
	      case 'integer':
	        return Primitives.integer(lexicons, path, def, value);
	      case 'string':
	        return Primitives.string(lexicons, path, def, value);
	      case 'bytes':
	        return Primitives.bytes(lexicons, path, def, value);
	      case 'cid-link':
	        return Primitives.cidLink(lexicons, path, def, value);
	      case 'unknown':
	        return Primitives.unknown(lexicons, path, def, value);
	      case 'object':
	        return object(lexicons, path, def, value);
	      case 'array':
	        return array(lexicons, path, def, value);
	      case 'blob':
	        return Blob.blob(lexicons, path, def, value);
	      default:
	        return {
	          success: false,
	          error: new types_1.ValidationError(`Unexpected lexicon type: ${def.type}`)
	        };
	    }
	  }
	  complex.validate = validate;
	  function array(lexicons, path, def, value) {
	    // type
	    if (!Array.isArray(value)) {
	      return {
	        success: false,
	        error: new types_1.ValidationError(`${path} must be an array`)
	      };
	    }
	    // maxLength
	    if (typeof def.maxLength === 'number') {
	      if (value.length > def.maxLength) {
	        return {
	          success: false,
	          error: new types_1.ValidationError(`${path} must not have more than ${def.maxLength} elements`)
	        };
	      }
	    }
	    // minLength
	    if (typeof def.minLength === 'number') {
	      if (value.length < def.minLength) {
	        return {
	          success: false,
	          error: new types_1.ValidationError(`${path} must not have fewer than ${def.minLength} elements`)
	        };
	      }
	    }
	    // items
	    const itemsDef = def.items;
	    for (let i = 0; i < value.length; i++) {
	      const itemValue = value[i];
	      const itemPath = `${path}/${i}`;
	      const res = (0, util_1.validateOneOf)(lexicons, itemPath, itemsDef, itemValue);
	      if (!res.success) {
	        return res;
	      }
	    }
	    return {
	      success: true,
	      value
	    };
	  }
	  complex.array = array;
	  function object(lexicons, path, def, value) {
	    def = def;
	    // type
	    if (!value || typeof value !== 'object') {
	      return {
	        success: false,
	        error: new types_1.ValidationError(`${path} must be an object`)
	      };
	    }
	    const requiredProps = new Set(def.required);
	    const nullableProps = new Set(def.nullable);
	    // properties
	    let resultValue = value;
	    if (typeof def.properties === 'object') {
	      for (const key in def.properties) {
	        if (value[key] === null && nullableProps.has(key)) {
	          continue;
	        }
	        const propDef = def.properties[key];
	        const propPath = `${path}/${key}`;
	        const validated = (0, util_1.validateOneOf)(lexicons, propPath, propDef, value[key]);
	        const propValue = validated.success ? validated.value : value[key];
	        const propIsUndefined = typeof propValue === 'undefined';
	        // Return error for bad validation, giving required rule precedence
	        if (propIsUndefined && requiredProps.has(key)) {
	          return {
	            success: false,
	            error: new types_1.ValidationError(`${path} must have the property "${key}"`)
	          };
	        } else if (!propIsUndefined && !validated.success) {
	          return validated;
	        }
	        // Adjust value based on e.g. applied defaults, cloning shallowly if there was a changed value
	        if (propValue !== value[key]) {
	          if (resultValue === value) {
	            // Lazy shallow clone
	            resultValue = {
	              ...value
	            };
	          }
	          resultValue[key] = propValue;
	        }
	      }
	    }
	    return {
	      success: true,
	      value: resultValue
	    };
	  }
	  complex.object = object;
	  return complex;
	}

	var hasRequiredUtil;
	function requireUtil() {
	  if (hasRequiredUtil) return util$6;
	  hasRequiredUtil = 1;
	  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = {
	        enumerable: true,
	        get: function () {
	          return m[k];
	        }
	      };
	    }
	    Object.defineProperty(o, k2, desc);
	  } : function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	  });
	  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
	    Object.defineProperty(o, "default", {
	      enumerable: true,
	      value: v
	    });
	  } : function (o, v) {
	    o["default"] = v;
	  });
	  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	  };
	  Object.defineProperty(util$6, "__esModule", {
	    value: true
	  });
	  util$6.requiredPropertiesRefinement = util$6.toConcreteTypes = util$6.assertValidOneOf = util$6.validateOneOf = util$6.toLexUri = void 0;
	  const ComplexValidators = __importStar(requireComplex());
	  const types_1 = requireTypes();
	  const zod_1 = lib$1;
	  function toLexUri(str, baseUri) {
	    if (str.split('#').length > 2) {
	      throw new Error('Uri can only have one hash segment');
	    }
	    if (str.startsWith('lex:')) {
	      return str;
	    }
	    if (str.startsWith('#')) {
	      if (!baseUri) {
	        throw new Error(`Unable to resolve uri without anchor: ${str}`);
	      }
	      return `${baseUri}${str}`;
	    }
	    return `lex:${str}`;
	  }
	  util$6.toLexUri = toLexUri;
	  function validateOneOf(lexicons, path, def, value, mustBeObj = false) {
	    let error;
	    let concreteDefs;
	    if (def.type === 'union') {
	      if (!(0, types_1.isDiscriminatedObject)(value)) {
	        return {
	          success: false,
	          error: new types_1.ValidationError(`${path} must be an object which includes the "$type" property`)
	        };
	      }
	      if (!refsContainType(def.refs, value.$type)) {
	        if (def.closed) {
	          return {
	            success: false,
	            error: new types_1.ValidationError(`${path} $type must be one of ${def.refs.join(', ')}`)
	          };
	        }
	        return {
	          success: true,
	          value
	        };
	      } else {
	        concreteDefs = toConcreteTypes(lexicons, {
	          type: 'ref',
	          ref: value.$type
	        });
	      }
	    } else {
	      concreteDefs = toConcreteTypes(lexicons, def);
	    }
	    for (const concreteDef of concreteDefs) {
	      const result = mustBeObj ? ComplexValidators.object(lexicons, path, concreteDef, value) : ComplexValidators.validate(lexicons, path, concreteDef, value);
	      if (result.success) {
	        return result;
	      }
	      error ?? (error = result.error);
	    }
	    if (concreteDefs.length > 1) {
	      return {
	        success: false,
	        error: new types_1.ValidationError(`${path} did not match any of the expected definitions`)
	      };
	    }
	    return {
	      success: false,
	      error
	    };
	  }
	  util$6.validateOneOf = validateOneOf;
	  function assertValidOneOf(lexicons, path, def, value, mustBeObj = false) {
	    const res = validateOneOf(lexicons, path, def, value, mustBeObj);
	    if (!res.success) throw res.error;
	    return res.value;
	  }
	  util$6.assertValidOneOf = assertValidOneOf;
	  function toConcreteTypes(lexicons, def) {
	    if (def.type === 'ref') {
	      return [lexicons.getDefOrThrow(def.ref)];
	    } else if (def.type === 'union') {
	      return def.refs.map(ref => lexicons.getDefOrThrow(ref)).flat();
	    } else {
	      return [def];
	    }
	  }
	  util$6.toConcreteTypes = toConcreteTypes;
	  function requiredPropertiesRefinement(object, ctx) {
	    // Required fields check
	    if (object.required === undefined) {
	      return;
	    }
	    if (!Array.isArray(object.required)) {
	      ctx.addIssue({
	        code: zod_1.z.ZodIssueCode.invalid_type,
	        received: typeof object.required,
	        expected: 'array'
	      });
	      return;
	    }
	    if (object.properties === undefined) {
	      if (object.required.length > 0) {
	        ctx.addIssue({
	          code: zod_1.z.ZodIssueCode.custom,
	          message: `Required fields defined but no properties defined`
	        });
	      }
	      return;
	    }
	    for (const field of object.required) {
	      if (object.properties[field] === undefined) {
	        ctx.addIssue({
	          code: zod_1.z.ZodIssueCode.custom,
	          message: `Required field "${field}" not defined`
	        });
	      }
	    }
	  }
	  util$6.requiredPropertiesRefinement = requiredPropertiesRefinement;
	  // to avoid bugs like #0189 this needs to handle both
	  // explicit and implicit #main
	  const refsContainType = (refs, type) => {
	    const lexUri = toLexUri(type);
	    if (refs.includes(lexUri)) {
	      return true;
	    }
	    if (lexUri.endsWith('#main')) {
	      return refs.includes(lexUri.replace('#main', ''));
	    } else {
	      return refs.includes(lexUri + '#main');
	    }
	  };
	  return util$6;
	}

	var hasRequiredTypes;
	function requireTypes() {
	  if (hasRequiredTypes) return types$5;
	  hasRequiredTypes = 1;
	  (function (exports) {

	    Object.defineProperty(exports, "__esModule", {
	      value: true
	    });
	    exports.LexiconDefNotFoundError = exports.InvalidLexiconError = exports.ValidationError = exports.parseLexiconDoc = exports.isDiscriminatedObject = exports.discriminatedObject = exports.hasProp = exports.isObj = exports.isValidLexiconDoc = exports.lexiconDoc = exports.lexUserType = exports.lexRecord = exports.lexXrpcSubscription = exports.lexXrpcProcedure = exports.lexXrpcQuery = exports.lexXrpcError = exports.lexXrpcSubscriptionMessage = exports.lexXrpcBody = exports.lexXrpcParameters = exports.lexObject = exports.lexToken = exports.lexPrimitiveArray = exports.lexArray = exports.lexBlob = exports.lexRefVariant = exports.lexRefUnion = exports.lexRef = exports.lexIpldType = exports.lexCidLink = exports.lexBytes = exports.lexPrimitive = exports.lexUnknown = exports.lexString = exports.lexStringFormat = exports.lexInteger = exports.lexBoolean = void 0;
	    const zod_1 = lib$1;
	    const syntax_1 = dist$4;
	    const util_1 = requireUtil();
	    // primitives
	    // =
	    exports.lexBoolean = zod_1.z.object({
	      type: zod_1.z.literal('boolean'),
	      description: zod_1.z.string().optional(),
	      default: zod_1.z.boolean().optional(),
	      const: zod_1.z.boolean().optional()
	    }).strict();
	    exports.lexInteger = zod_1.z.object({
	      type: zod_1.z.literal('integer'),
	      description: zod_1.z.string().optional(),
	      default: zod_1.z.number().int().optional(),
	      minimum: zod_1.z.number().int().optional(),
	      maximum: zod_1.z.number().int().optional(),
	      enum: zod_1.z.number().int().array().optional(),
	      const: zod_1.z.number().int().optional()
	    }).strict();
	    exports.lexStringFormat = zod_1.z.enum(['datetime', 'uri', 'at-uri', 'did', 'handle', 'at-identifier', 'nsid', 'cid', 'language']);
	    exports.lexString = zod_1.z.object({
	      type: zod_1.z.literal('string'),
	      format: exports.lexStringFormat.optional(),
	      description: zod_1.z.string().optional(),
	      default: zod_1.z.string().optional(),
	      minLength: zod_1.z.number().int().optional(),
	      maxLength: zod_1.z.number().int().optional(),
	      minGraphemes: zod_1.z.number().int().optional(),
	      maxGraphemes: zod_1.z.number().int().optional(),
	      enum: zod_1.z.string().array().optional(),
	      const: zod_1.z.string().optional(),
	      knownValues: zod_1.z.string().array().optional()
	    }).strict();
	    exports.lexUnknown = zod_1.z.object({
	      type: zod_1.z.literal('unknown'),
	      description: zod_1.z.string().optional()
	    }).strict();
	    exports.lexPrimitive = zod_1.z.discriminatedUnion('type', [exports.lexBoolean, exports.lexInteger, exports.lexString, exports.lexUnknown]);
	    // ipld types
	    // =
	    exports.lexBytes = zod_1.z.object({
	      type: zod_1.z.literal('bytes'),
	      description: zod_1.z.string().optional(),
	      maxLength: zod_1.z.number().optional(),
	      minLength: zod_1.z.number().optional()
	    }).strict();
	    exports.lexCidLink = zod_1.z.object({
	      type: zod_1.z.literal('cid-link'),
	      description: zod_1.z.string().optional()
	    }).strict();
	    exports.lexIpldType = zod_1.z.discriminatedUnion('type', [exports.lexBytes, exports.lexCidLink]);
	    // references
	    // =
	    exports.lexRef = zod_1.z.object({
	      type: zod_1.z.literal('ref'),
	      description: zod_1.z.string().optional(),
	      ref: zod_1.z.string()
	    }).strict();
	    exports.lexRefUnion = zod_1.z.object({
	      type: zod_1.z.literal('union'),
	      description: zod_1.z.string().optional(),
	      refs: zod_1.z.string().array(),
	      closed: zod_1.z.boolean().optional()
	    }).strict();
	    exports.lexRefVariant = zod_1.z.discriminatedUnion('type', [exports.lexRef, exports.lexRefUnion]);
	    // blobs
	    // =
	    exports.lexBlob = zod_1.z.object({
	      type: zod_1.z.literal('blob'),
	      description: zod_1.z.string().optional(),
	      accept: zod_1.z.string().array().optional(),
	      maxSize: zod_1.z.number().optional()
	    }).strict();
	    // complex types
	    // =
	    exports.lexArray = zod_1.z.object({
	      type: zod_1.z.literal('array'),
	      description: zod_1.z.string().optional(),
	      items: zod_1.z.union([exports.lexPrimitive, exports.lexIpldType, exports.lexBlob, exports.lexRefVariant]),
	      minLength: zod_1.z.number().int().optional(),
	      maxLength: zod_1.z.number().int().optional()
	    }).strict();
	    exports.lexPrimitiveArray = exports.lexArray.merge(zod_1.z.object({
	      items: exports.lexPrimitive
	    }).strict());
	    exports.lexToken = zod_1.z.object({
	      type: zod_1.z.literal('token'),
	      description: zod_1.z.string().optional()
	    }).strict();
	    exports.lexObject = zod_1.z.object({
	      type: zod_1.z.literal('object'),
	      description: zod_1.z.string().optional(),
	      required: zod_1.z.string().array().optional(),
	      nullable: zod_1.z.string().array().optional(),
	      properties: zod_1.z.record(zod_1.z.union([exports.lexRefVariant, exports.lexIpldType, exports.lexArray, exports.lexBlob, exports.lexPrimitive]))
	    }).strict().superRefine(util_1.requiredPropertiesRefinement);
	    // xrpc
	    // =
	    exports.lexXrpcParameters = zod_1.z.object({
	      type: zod_1.z.literal('params'),
	      description: zod_1.z.string().optional(),
	      required: zod_1.z.string().array().optional(),
	      properties: zod_1.z.record(zod_1.z.union([exports.lexPrimitive, exports.lexPrimitiveArray]))
	    }).strict().superRefine(util_1.requiredPropertiesRefinement);
	    exports.lexXrpcBody = zod_1.z.object({
	      description: zod_1.z.string().optional(),
	      encoding: zod_1.z.string(),
	      schema: zod_1.z.union([exports.lexRefVariant, exports.lexObject]).optional()
	    }).strict();
	    exports.lexXrpcSubscriptionMessage = zod_1.z.object({
	      description: zod_1.z.string().optional(),
	      schema: zod_1.z.union([exports.lexRefVariant, exports.lexObject]).optional()
	    }).strict();
	    exports.lexXrpcError = zod_1.z.object({
	      name: zod_1.z.string(),
	      description: zod_1.z.string().optional()
	    }).strict();
	    exports.lexXrpcQuery = zod_1.z.object({
	      type: zod_1.z.literal('query'),
	      description: zod_1.z.string().optional(),
	      parameters: exports.lexXrpcParameters.optional(),
	      output: exports.lexXrpcBody.optional(),
	      errors: exports.lexXrpcError.array().optional()
	    }).strict();
	    exports.lexXrpcProcedure = zod_1.z.object({
	      type: zod_1.z.literal('procedure'),
	      description: zod_1.z.string().optional(),
	      parameters: exports.lexXrpcParameters.optional(),
	      input: exports.lexXrpcBody.optional(),
	      output: exports.lexXrpcBody.optional(),
	      errors: exports.lexXrpcError.array().optional()
	    }).strict();
	    exports.lexXrpcSubscription = zod_1.z.object({
	      type: zod_1.z.literal('subscription'),
	      description: zod_1.z.string().optional(),
	      parameters: exports.lexXrpcParameters.optional(),
	      message: exports.lexXrpcSubscriptionMessage.optional(),
	      errors: exports.lexXrpcError.array().optional()
	    }).strict();
	    // database
	    // =
	    exports.lexRecord = zod_1.z.object({
	      type: zod_1.z.literal('record'),
	      description: zod_1.z.string().optional(),
	      key: zod_1.z.string().optional(),
	      record: exports.lexObject
	    }).strict();
	    // core
	    // =
	    // We need to use `z.custom` here because
	    // lexXrpcProperty and lexObject are refined
	    // `z.union` would work, but it's too slow
	    // see #915 for details
	    exports.lexUserType = zod_1.z.custom(val => {
	      if (!val || typeof val !== 'object') {
	        return;
	      }
	      if (val['type'] === undefined) {
	        return;
	      }
	      switch (val['type']) {
	        case 'record':
	          return exports.lexRecord.parse(val);
	        case 'query':
	          return exports.lexXrpcQuery.parse(val);
	        case 'procedure':
	          return exports.lexXrpcProcedure.parse(val);
	        case 'subscription':
	          return exports.lexXrpcSubscription.parse(val);
	        case 'blob':
	          return exports.lexBlob.parse(val);
	        case 'array':
	          return exports.lexArray.parse(val);
	        case 'token':
	          return exports.lexToken.parse(val);
	        case 'object':
	          return exports.lexObject.parse(val);
	        case 'boolean':
	          return exports.lexBoolean.parse(val);
	        case 'integer':
	          return exports.lexInteger.parse(val);
	        case 'string':
	          return exports.lexString.parse(val);
	        case 'bytes':
	          return exports.lexBytes.parse(val);
	        case 'cid-link':
	          return exports.lexCidLink.parse(val);
	        case 'unknown':
	          return exports.lexUnknown.parse(val);
	      }
	    }, val => {
	      if (!val || typeof val !== 'object') {
	        return {
	          message: 'Must be an object',
	          fatal: true
	        };
	      }
	      if (val['type'] === undefined) {
	        return {
	          message: 'Must have a type',
	          fatal: true
	        };
	      }
	      return {
	        message: `Invalid type: ${val['type']} must be one of: record, query, procedure, subscription, blob, array, token, object, boolean, integer, string, bytes, cid-link, unknown`,
	        fatal: true
	      };
	    });
	    exports.lexiconDoc = zod_1.z.object({
	      lexicon: zod_1.z.literal(1),
	      id: zod_1.z.string().refine(v => syntax_1.NSID.isValid(v), {
	        message: 'Must be a valid NSID'
	      }),
	      revision: zod_1.z.number().optional(),
	      description: zod_1.z.string().optional(),
	      defs: zod_1.z.record(exports.lexUserType)
	    }).strict().superRefine((doc, ctx) => {
	      for (const defId in doc.defs) {
	        const def = doc.defs[defId];
	        if (defId !== 'main' && (def.type === 'record' || def.type === 'procedure' || def.type === 'query' || def.type === 'subscription')) {
	          ctx.addIssue({
	            code: zod_1.z.ZodIssueCode.custom,
	            message: `Records, procedures, queries, and subscriptions must be the main definition.`
	          });
	        }
	      }
	    });
	    // helpers
	    // =
	    function isValidLexiconDoc(v) {
	      return exports.lexiconDoc.safeParse(v).success;
	    }
	    exports.isValidLexiconDoc = isValidLexiconDoc;
	    function isObj(obj) {
	      return obj !== null && typeof obj === 'object';
	    }
	    exports.isObj = isObj;
	    function hasProp(data, prop) {
	      return prop in data;
	    }
	    exports.hasProp = hasProp;
	    exports.discriminatedObject = zod_1.z.object({
	      $type: zod_1.z.string()
	    });
	    function isDiscriminatedObject(value) {
	      return exports.discriminatedObject.safeParse(value).success;
	    }
	    exports.isDiscriminatedObject = isDiscriminatedObject;
	    function parseLexiconDoc(v) {
	      exports.lexiconDoc.parse(v);
	      return v;
	    }
	    exports.parseLexiconDoc = parseLexiconDoc;
	    class ValidationError extends Error {}
	    exports.ValidationError = ValidationError;
	    class InvalidLexiconError extends Error {}
	    exports.InvalidLexiconError = InvalidLexiconError;
	    class LexiconDefNotFoundError extends Error {}
	    exports.LexiconDefNotFoundError = LexiconDefNotFoundError;
	  })(types$5);
	  return types$5;
	}

	var lexicons$1 = {};

	var validation = {};

	var xrpc = {};

	var __createBinding$3 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  var desc = Object.getOwnPropertyDescriptor(m, k);
	  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	    desc = {
	      enumerable: true,
	      get: function () {
	        return m[k];
	      }
	    };
	  }
	  Object.defineProperty(o, k2, desc);
	} : function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  o[k2] = m[k];
	});
	var __setModuleDefault$3 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
	  Object.defineProperty(o, "default", {
	    enumerable: true,
	    value: v
	  });
	} : function (o, v) {
	  o["default"] = v;
	});
	var __importStar$3 = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
	  if (mod && mod.__esModule) return mod;
	  var result = {};
	  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$3(result, mod, k);
	  __setModuleDefault$3(result, mod);
	  return result;
	};
	Object.defineProperty(xrpc, "__esModule", {
	  value: true
	});
	xrpc.params = void 0;
	const types_1$4 = requireTypes();
	const PrimitiveValidators = __importStar$3(requirePrimitives());
	const complex_1 = requireComplex();
	function params(lexicons, path, def, val) {
	  // type
	  const value = val && typeof val === 'object' ? val : {};
	  const requiredProps = new Set(def.required ?? []);
	  // properties
	  let resultValue = value;
	  if (typeof def.properties === 'object') {
	    for (const key in def.properties) {
	      const propDef = def.properties[key];
	      const validated = propDef.type === 'array' ? (0, complex_1.array)(lexicons, key, propDef, value[key]) : PrimitiveValidators.validate(lexicons, key, propDef, value[key]);
	      const propValue = validated.success ? validated.value : value[key];
	      const propIsUndefined = typeof propValue === 'undefined';
	      // Return error for bad validation, giving required rule precedence
	      if (propIsUndefined && requiredProps.has(key)) {
	        return {
	          success: false,
	          error: new types_1$4.ValidationError(`${path} must have the property "${key}"`)
	        };
	      } else if (!propIsUndefined && !validated.success) {
	        return validated;
	      }
	      // Adjust value based on e.g. applied defaults, cloning shallowly if there was a changed value
	      if (propValue !== value[key]) {
	        if (resultValue === value) {
	          // Lazy shallow clone
	          resultValue = {
	            ...value
	          };
	        }
	        resultValue[key] = propValue;
	      }
	    }
	  }
	  return {
	    success: true,
	    value: resultValue
	  };
	}
	xrpc.params = params;

	var __createBinding$2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  var desc = Object.getOwnPropertyDescriptor(m, k);
	  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	    desc = {
	      enumerable: true,
	      get: function () {
	        return m[k];
	      }
	    };
	  }
	  Object.defineProperty(o, k2, desc);
	} : function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  o[k2] = m[k];
	});
	var __setModuleDefault$2 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
	  Object.defineProperty(o, "default", {
	    enumerable: true,
	    value: v
	  });
	} : function (o, v) {
	  o["default"] = v;
	});
	var __importStar$2 = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
	  if (mod && mod.__esModule) return mod;
	  var result = {};
	  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$2(result, mod, k);
	  __setModuleDefault$2(result, mod);
	  return result;
	};
	Object.defineProperty(validation, "__esModule", {
	  value: true
	});
	validation.assertValidXrpcMessage = validation.assertValidXrpcOutput = validation.assertValidXrpcInput = validation.assertValidXrpcParams = validation.assertValidRecord = void 0;
	const util_1$K = requireUtil();
	const ComplexValidators$1 = __importStar$2(requireComplex());
	const XrpcValidators = __importStar$2(xrpc);
	function assertValidRecord(lexicons, def, value) {
	  const res = ComplexValidators$1.object(lexicons, 'Record', def.record, value);
	  if (!res.success) throw res.error;
	  return res.value;
	}
	validation.assertValidRecord = assertValidRecord;
	function assertValidXrpcParams(lexicons, def, value) {
	  if (def.parameters) {
	    const res = XrpcValidators.params(lexicons, 'Params', def.parameters, value);
	    if (!res.success) throw res.error;
	    return res.value;
	  }
	}
	validation.assertValidXrpcParams = assertValidXrpcParams;
	function assertValidXrpcInput(lexicons, def, value) {
	  if (def.input?.schema) {
	    // loop: all input schema definitions
	    return (0, util_1$K.assertValidOneOf)(lexicons, 'Input', def.input.schema, value, true);
	  }
	}
	validation.assertValidXrpcInput = assertValidXrpcInput;
	function assertValidXrpcOutput(lexicons, def, value) {
	  if (def.output?.schema) {
	    // loop: all output schema definitions
	    return (0, util_1$K.assertValidOneOf)(lexicons, 'Output', def.output.schema, value, true);
	  }
	}
	validation.assertValidXrpcOutput = assertValidXrpcOutput;
	function assertValidXrpcMessage(lexicons, def, value) {
	  if (def.message?.schema) {
	    // loop: all output schema definitions
	    return (0, util_1$K.assertValidOneOf)(lexicons, 'Message', def.message.schema, value, true);
	  }
	}
	validation.assertValidXrpcMessage = assertValidXrpcMessage;

	var __createBinding$1 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  var desc = Object.getOwnPropertyDescriptor(m, k);
	  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	    desc = {
	      enumerable: true,
	      get: function () {
	        return m[k];
	      }
	    };
	  }
	  Object.defineProperty(o, k2, desc);
	} : function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  o[k2] = m[k];
	});
	var __setModuleDefault$1 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
	  Object.defineProperty(o, "default", {
	    enumerable: true,
	    value: v
	  });
	} : function (o, v) {
	  o["default"] = v;
	});
	var __importStar$1 = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
	  if (mod && mod.__esModule) return mod;
	  var result = {};
	  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$1(result, mod, k);
	  __setModuleDefault$1(result, mod);
	  return result;
	};
	Object.defineProperty(lexicons$1, "__esModule", {
	  value: true
	});
	lexicons$1.Lexicons = void 0;
	const types_1$3 = requireTypes();
	const validation_1 = validation;
	const util_1$J = requireUtil();
	const ComplexValidators = __importStar$1(requireComplex());
	/**
	 * A collection of compiled lexicons.
	 */
	class Lexicons {
	  constructor(docs) {
	    Object.defineProperty(this, "docs", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: new Map()
	    });
	    Object.defineProperty(this, "defs", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: new Map()
	    });
	    if (docs?.length) {
	      for (const doc of docs) {
	        this.add(doc);
	      }
	    }
	  }
	  /**
	   * Add a lexicon doc.
	   */
	  add(doc) {
	    const uri = (0, util_1$J.toLexUri)(doc.id);
	    if (this.docs.has(uri)) {
	      throw new Error(`${uri} has already been registered`);
	    }
	    // WARNING
	    // mutates the object
	    // -prf
	    resolveRefUris(doc, uri);
	    this.docs.set(uri, doc);
	    for (const [defUri, def] of iterDefs(doc)) {
	      this.defs.set(defUri, def);
	    }
	  }
	  /**
	   * Remove a lexicon doc.
	   */
	  remove(uri) {
	    uri = (0, util_1$J.toLexUri)(uri);
	    const doc = this.docs.get(uri);
	    if (!doc) {
	      throw new Error(`Unable to remove "${uri}": does not exist`);
	    }
	    for (const [defUri, _def] of iterDefs(doc)) {
	      this.defs.delete(defUri);
	    }
	    this.docs.delete(uri);
	  }
	  /**
	   * Get a lexicon doc.
	   */
	  get(uri) {
	    uri = (0, util_1$J.toLexUri)(uri);
	    return this.docs.get(uri);
	  }
	  /**
	   * Get a definition.
	   */
	  getDef(uri) {
	    uri = (0, util_1$J.toLexUri)(uri);
	    return this.defs.get(uri);
	  }
	  getDefOrThrow(uri, types) {
	    const def = this.getDef(uri);
	    if (!def) {
	      throw new types_1$3.LexiconDefNotFoundError(`Lexicon not found: ${uri}`);
	    }
	    if (types && !types.includes(def.type)) {
	      throw new types_1$3.InvalidLexiconError(`Not a ${types.join(' or ')} lexicon: ${uri}`);
	    }
	    return def;
	  }
	  /**
	   * Validate a record or object.
	   */
	  validate(lexUri, value) {
	    lexUri = (0, util_1$J.toLexUri)(lexUri);
	    const def = this.getDefOrThrow(lexUri, ['record', 'object']);
	    if (!(0, types_1$3.isObj)(value)) {
	      throw new types_1$3.ValidationError(`Value must be an object`);
	    }
	    if (def.type === 'record') {
	      return ComplexValidators.object(this, 'Record', def.record, value);
	    } else if (def.type === 'object') {
	      return ComplexValidators.object(this, 'Object', def, value);
	    } else {
	      // shouldn't happen
	      throw new types_1$3.InvalidLexiconError('Definition must be a record or object');
	    }
	  }
	  /**
	   * Validate a record and throw on any error.
	   */
	  assertValidRecord(lexUri, value) {
	    lexUri = (0, util_1$J.toLexUri)(lexUri);
	    const def = this.getDefOrThrow(lexUri, ['record']);
	    if (!(0, types_1$3.isObj)(value)) {
	      throw new types_1$3.ValidationError(`Record must be an object`);
	    }
	    if (!(0, types_1$3.hasProp)(value, '$type') || typeof value.$type !== 'string') {
	      throw new types_1$3.ValidationError(`Record/$type must be a string`);
	    }
	    const $type = value.$type || '';
	    if ((0, util_1$J.toLexUri)($type) !== lexUri) {
	      throw new types_1$3.ValidationError(`Invalid $type: must be ${lexUri}, got ${$type}`);
	    }
	    return (0, validation_1.assertValidRecord)(this, def, value);
	  }
	  /**
	   * Validate xrpc query params and throw on any error.
	   */
	  assertValidXrpcParams(lexUri, value) {
	    lexUri = (0, util_1$J.toLexUri)(lexUri);
	    const def = this.getDefOrThrow(lexUri, ['query', 'procedure', 'subscription']);
	    return (0, validation_1.assertValidXrpcParams)(this, def, value);
	  }
	  /**
	   * Validate xrpc input body and throw on any error.
	   */
	  assertValidXrpcInput(lexUri, value) {
	    lexUri = (0, util_1$J.toLexUri)(lexUri);
	    const def = this.getDefOrThrow(lexUri, ['procedure']);
	    return (0, validation_1.assertValidXrpcInput)(this, def, value);
	  }
	  /**
	   * Validate xrpc output body and throw on any error.
	   */
	  assertValidXrpcOutput(lexUri, value) {
	    lexUri = (0, util_1$J.toLexUri)(lexUri);
	    const def = this.getDefOrThrow(lexUri, ['query', 'procedure']);
	    return (0, validation_1.assertValidXrpcOutput)(this, def, value);
	  }
	  /**
	   * Validate xrpc subscription message and throw on any error.
	   */
	  assertValidXrpcMessage(lexUri, value) {
	    lexUri = (0, util_1$J.toLexUri)(lexUri);
	    const def = this.getDefOrThrow(lexUri, ['subscription']);
	    return (0, validation_1.assertValidXrpcMessage)(this, def, value);
	  }
	  /**
	   * Resolve a lex uri given a ref
	   */
	  resolveLexUri(lexUri, ref) {
	    lexUri = (0, util_1$J.toLexUri)(lexUri);
	    return (0, util_1$J.toLexUri)(ref, lexUri);
	  }
	}
	lexicons$1.Lexicons = Lexicons;
	function* iterDefs(doc) {
	  for (const defId in doc.defs) {
	    yield [`lex:${doc.id}#${defId}`, doc.defs[defId]];
	    if (defId === 'main') {
	      yield [`lex:${doc.id}`, doc.defs[defId]];
	    }
	  }
	}
	// WARNING
	// this method mutates objects
	// -prf
	function resolveRefUris(obj, baseUri) {
	  for (const k in obj) {
	    if (obj.type === 'ref') {
	      obj.ref = (0, util_1$J.toLexUri)(obj.ref, baseUri);
	    } else if (obj.type === 'union') {
	      obj.refs = obj.refs.map(ref => (0, util_1$J.toLexUri)(ref, baseUri));
	    } else if (Array.isArray(obj[k])) {
	      obj[k] = obj[k].map(item => {
	        if (typeof item === 'string') {
	          return item.startsWith('#') ? (0, util_1$J.toLexUri)(item, baseUri) : item;
	        } else if (item && typeof item === 'object') {
	          return resolveRefUris(item, baseUri);
	        }
	        return item;
	      });
	    } else if (obj[k] && typeof obj[k] === 'object') {
	      obj[k] = resolveRefUris(obj[k], baseUri);
	    }
	  }
	  return obj;
	}

	var serialize = {};

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.jsonStringToLex = exports.jsonToLex = exports.stringifyLex = exports.lexToJson = exports.ipldToLex = exports.lexToIpld = void 0;
	  const common_web_1 = dist$2;
	  const cid_1 = cid$2;
	  const blob_refs_1 = blobRefs;
	  // @NOTE avoiding use of check.is() here only because it makes
	  // these implementations slow, and they often live in hot paths.
	  const lexToIpld = val => {
	    // walk arrays
	    if (Array.isArray(val)) {
	      return val.map(item => (0, exports.lexToIpld)(item));
	    }
	    // objects
	    if (val && typeof val === 'object') {
	      // convert blobs, leaving the original encoding so that we don't change CIDs on re-encode
	      if (val instanceof blob_refs_1.BlobRef) {
	        return val.original;
	      }
	      // retain cids & bytes
	      if (cid_1.CID.asCID(val) || val instanceof Uint8Array) {
	        return val;
	      }
	      // walk plain objects
	      const toReturn = {};
	      for (const key of Object.keys(val)) {
	        toReturn[key] = (0, exports.lexToIpld)(val[key]);
	      }
	      return toReturn;
	    }
	    // pass through
	    return val;
	  };
	  exports.lexToIpld = lexToIpld;
	  const ipldToLex = val => {
	    // map arrays
	    if (Array.isArray(val)) {
	      return val.map(item => (0, exports.ipldToLex)(item));
	    }
	    // objects
	    if (val && typeof val === 'object') {
	      // convert blobs, using hints to avoid expensive is() check
	      if ((val['$type'] === 'blob' || typeof val['cid'] === 'string' && typeof val['mimeType'] === 'string') && common_web_1.check.is(val, blob_refs_1.jsonBlobRef)) {
	        return blob_refs_1.BlobRef.fromJsonRef(val);
	      }
	      // retain cids, bytes
	      if (cid_1.CID.asCID(val) || val instanceof Uint8Array) {
	        return val;
	      }
	      // map plain objects
	      const toReturn = {};
	      for (const key of Object.keys(val)) {
	        toReturn[key] = (0, exports.ipldToLex)(val[key]);
	      }
	      return toReturn;
	    }
	    // pass through
	    return val;
	  };
	  exports.ipldToLex = ipldToLex;
	  const lexToJson = val => {
	    return (0, common_web_1.ipldToJson)((0, exports.lexToIpld)(val));
	  };
	  exports.lexToJson = lexToJson;
	  const stringifyLex = val => {
	    return JSON.stringify((0, exports.lexToJson)(val));
	  };
	  exports.stringifyLex = stringifyLex;
	  const jsonToLex = val => {
	    return (0, exports.ipldToLex)((0, common_web_1.jsonToIpld)(val));
	  };
	  exports.jsonToLex = jsonToLex;
	  const jsonStringToLex = val => {
	    return (0, exports.jsonToLex)(JSON.parse(val));
	  };
	  exports.jsonStringToLex = jsonStringToLex;
	})(serialize);

	(function (exports) {

	  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = {
	        enumerable: true,
	        get: function () {
	          return m[k];
	        }
	      };
	    }
	    Object.defineProperty(o, k2, desc);
	  } : function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	  });
	  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function (m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	  };
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  __exportStar(requireTypes(), exports);
	  __exportStar(lexicons$1, exports);
	  __exportStar(blobRefs, exports);
	  __exportStar(serialize, exports);
	})(dist$3);

	var types$2 = {};

	Object.defineProperty(types$2, "__esModule", {
	  value: true
	});

	var _const = {};

	Object.defineProperty(_const, "__esModule", {
	  value: true
	});
	_const.BSKY_LABELER_DID = void 0;
	_const.BSKY_LABELER_DID = 'did:plc:ar7c4by46qjdydhdevvrndac';

	var util$4 = {};

	Object.defineProperty(util$4, "__esModule", {
	  value: true
	});
	util$4.validateSavedFeed = util$4.getSavedFeedType = util$4.savedFeedsToUriArrays = util$4.sanitizeMutedWordValue = void 0;
	const syntax_1$2 = dist$4;
	const common_web_1$3 = dist$2;
	function sanitizeMutedWordValue(value) {
	  return value.trim().replace(/^#(?!\ufe0f)/, '').replace(/[\r\n\u00AD\u2060\u200D\u200C\u200B]+/, '');
	}
	util$4.sanitizeMutedWordValue = sanitizeMutedWordValue;
	function savedFeedsToUriArrays(savedFeeds) {
	  const pinned = [];
	  const saved = [];
	  for (const feed of savedFeeds) {
	    if (feed.pinned) {
	      pinned.push(feed.value);
	      // saved in v1 includes pinned
	      saved.push(feed.value);
	    } else {
	      saved.push(feed.value);
	    }
	  }
	  return {
	    pinned,
	    saved
	  };
	}
	util$4.savedFeedsToUriArrays = savedFeedsToUriArrays;
	/**
	 * Get the type of a saved feed, used by deprecated methods for backwards
	 * compat. Should not be used moving forward. *Invalid URIs will throw.*
	 *
	 * @param uri - The AT URI of the saved feed
	 */
	function getSavedFeedType(uri) {
	  const urip = new syntax_1$2.AtUri(uri);
	  switch (urip.collection) {
	    case 'app.bsky.feed.generator':
	      return 'feed';
	    case 'app.bsky.graph.list':
	      return 'list';
	    default:
	      return 'unknown';
	  }
	}
	util$4.getSavedFeedType = getSavedFeedType;
	function validateSavedFeed$1(savedFeed) {
	  new common_web_1$3.TID(savedFeed.id);
	  if (['feed', 'list'].includes(savedFeed.type)) {
	    const uri = new syntax_1$2.AtUri(savedFeed.value);
	    const isFeed = uri.collection === 'app.bsky.feed.generator';
	    const isList = uri.collection === 'app.bsky.graph.list';
	    if (savedFeed.type === 'feed' && !isFeed) {
	      throw new Error(`Saved feed of type 'feed' must be a feed, got ${uri.collection}`);
	    }
	    if (savedFeed.type === 'list' && !isList) {
	      throw new Error(`Saved feed of type 'list' must be a list, got ${uri.collection}`);
	    }
	  }
	}
	util$4.validateSavedFeed = validateSavedFeed$1;

	var client$1 = {};

	var dist = {};

	var types$1 = {};

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.XRPCInvalidResponseError = exports.XRPCError = exports.XRPCResponse = exports.ResponseTypeStrings = exports.ResponseTypeNames = exports.ResponseType = exports.errorResponseBody = void 0;
	  const zod_1 = lib$1;
	  exports.errorResponseBody = zod_1.z.object({
	    error: zod_1.z.string().optional(),
	    message: zod_1.z.string().optional()
	  });
	  var ResponseType;
	  (function (ResponseType) {
	    ResponseType[ResponseType["Unknown"] = 1] = "Unknown";
	    ResponseType[ResponseType["InvalidResponse"] = 2] = "InvalidResponse";
	    ResponseType[ResponseType["Success"] = 200] = "Success";
	    ResponseType[ResponseType["InvalidRequest"] = 400] = "InvalidRequest";
	    ResponseType[ResponseType["AuthRequired"] = 401] = "AuthRequired";
	    ResponseType[ResponseType["Forbidden"] = 403] = "Forbidden";
	    ResponseType[ResponseType["XRPCNotSupported"] = 404] = "XRPCNotSupported";
	    ResponseType[ResponseType["PayloadTooLarge"] = 413] = "PayloadTooLarge";
	    ResponseType[ResponseType["RateLimitExceeded"] = 429] = "RateLimitExceeded";
	    ResponseType[ResponseType["InternalServerError"] = 500] = "InternalServerError";
	    ResponseType[ResponseType["MethodNotImplemented"] = 501] = "MethodNotImplemented";
	    ResponseType[ResponseType["UpstreamFailure"] = 502] = "UpstreamFailure";
	    ResponseType[ResponseType["NotEnoughResources"] = 503] = "NotEnoughResources";
	    ResponseType[ResponseType["UpstreamTimeout"] = 504] = "UpstreamTimeout";
	  })(ResponseType || (exports.ResponseType = ResponseType = {}));
	  exports.ResponseTypeNames = {
	    [ResponseType.InvalidResponse]: 'InvalidResponse',
	    [ResponseType.Success]: 'Success',
	    [ResponseType.InvalidRequest]: 'InvalidRequest',
	    [ResponseType.AuthRequired]: 'AuthenticationRequired',
	    [ResponseType.Forbidden]: 'Forbidden',
	    [ResponseType.XRPCNotSupported]: 'XRPCNotSupported',
	    [ResponseType.PayloadTooLarge]: 'PayloadTooLarge',
	    [ResponseType.RateLimitExceeded]: 'RateLimitExceeded',
	    [ResponseType.InternalServerError]: 'InternalServerError',
	    [ResponseType.MethodNotImplemented]: 'MethodNotImplemented',
	    [ResponseType.UpstreamFailure]: 'UpstreamFailure',
	    [ResponseType.NotEnoughResources]: 'NotEnoughResources',
	    [ResponseType.UpstreamTimeout]: 'UpstreamTimeout'
	  };
	  exports.ResponseTypeStrings = {
	    [ResponseType.InvalidResponse]: 'Invalid Response',
	    [ResponseType.Success]: 'Success',
	    [ResponseType.InvalidRequest]: 'Invalid Request',
	    [ResponseType.AuthRequired]: 'Authentication Required',
	    [ResponseType.Forbidden]: 'Forbidden',
	    [ResponseType.XRPCNotSupported]: 'XRPC Not Supported',
	    [ResponseType.PayloadTooLarge]: 'Payload Too Large',
	    [ResponseType.RateLimitExceeded]: 'Rate Limit Exceeded',
	    [ResponseType.InternalServerError]: 'Internal Server Error',
	    [ResponseType.MethodNotImplemented]: 'Method Not Implemented',
	    [ResponseType.UpstreamFailure]: 'Upstream Failure',
	    [ResponseType.NotEnoughResources]: 'Not Enough Resources',
	    [ResponseType.UpstreamTimeout]: 'Upstream Timeout'
	  };
	  class XRPCResponse {
	    constructor(data, headers) {
	      Object.defineProperty(this, "data", {
	        enumerable: true,
	        configurable: true,
	        writable: true,
	        value: data
	      });
	      Object.defineProperty(this, "headers", {
	        enumerable: true,
	        configurable: true,
	        writable: true,
	        value: headers
	      });
	      Object.defineProperty(this, "success", {
	        enumerable: true,
	        configurable: true,
	        writable: true,
	        value: true
	      });
	    }
	  }
	  exports.XRPCResponse = XRPCResponse;
	  class XRPCError extends Error {
	    constructor(status, error, message, headers) {
	      super(message || error || exports.ResponseTypeStrings[status]);
	      Object.defineProperty(this, "status", {
	        enumerable: true,
	        configurable: true,
	        writable: true,
	        value: status
	      });
	      Object.defineProperty(this, "error", {
	        enumerable: true,
	        configurable: true,
	        writable: true,
	        value: error
	      });
	      Object.defineProperty(this, "success", {
	        enumerable: true,
	        configurable: true,
	        writable: true,
	        value: false
	      });
	      Object.defineProperty(this, "headers", {
	        enumerable: true,
	        configurable: true,
	        writable: true,
	        value: void 0
	      });
	      if (!this.error) {
	        this.error = exports.ResponseTypeNames[status];
	      }
	      this.headers = headers;
	    }
	  }
	  exports.XRPCError = XRPCError;
	  class XRPCInvalidResponseError extends XRPCError {
	    constructor(lexiconNsid, validationError, responseBody) {
	      super(ResponseType.InvalidResponse, exports.ResponseTypeStrings[ResponseType.InvalidResponse], `The server gave an invalid response and may be out of date.`);
	      Object.defineProperty(this, "lexiconNsid", {
	        enumerable: true,
	        configurable: true,
	        writable: true,
	        value: lexiconNsid
	      });
	      Object.defineProperty(this, "validationError", {
	        enumerable: true,
	        configurable: true,
	        writable: true,
	        value: validationError
	      });
	      Object.defineProperty(this, "responseBody", {
	        enumerable: true,
	        configurable: true,
	        writable: true,
	        value: responseBody
	      });
	    }
	  }
	  exports.XRPCInvalidResponseError = XRPCInvalidResponseError;
	})(types$1);

	var client = {};

	var util$3 = {};

	Object.defineProperty(util$3, "__esModule", {
	  value: true
	});
	util$3.httpResponseBodyParse = util$3.httpResponseCodeToEnum = util$3.encodeMethodCallBody = util$3.constructMethodCallHeaders = util$3.normalizeHeaders = util$3.encodeQueryParam = util$3.constructMethodCallUri = util$3.getMethodSchemaHTTPMethod = void 0;
	const lexicon_1$1 = dist$3;
	const types_1$2 = types$1;
	function getMethodSchemaHTTPMethod(schema) {
	  if (schema.type === 'procedure') {
	    return 'post';
	  }
	  return 'get';
	}
	util$3.getMethodSchemaHTTPMethod = getMethodSchemaHTTPMethod;
	function constructMethodCallUri(nsid, schema, serviceUri, params) {
	  const uri = new URL(serviceUri);
	  uri.pathname = `/xrpc/${nsid}`;
	  // given parameters
	  if (params) {
	    for (const [key, value] of Object.entries(params)) {
	      const paramSchema = schema.parameters?.properties?.[key];
	      if (!paramSchema) {
	        throw new Error(`Invalid query parameter: ${key}`);
	      }
	      if (value !== undefined) {
	        if (paramSchema.type === 'array') {
	          const vals = [];
	          vals.concat(value).forEach(val => {
	            uri.searchParams.append(key, encodeQueryParam(paramSchema.items.type, val));
	          });
	        } else {
	          uri.searchParams.set(key, encodeQueryParam(paramSchema.type, value));
	        }
	      }
	    }
	  }
	  return uri.toString();
	}
	util$3.constructMethodCallUri = constructMethodCallUri;
	function encodeQueryParam(type, value) {
	  if (type === 'string' || type === 'unknown') {
	    return String(value);
	  }
	  if (type === 'float') {
	    return String(Number(value));
	  } else if (type === 'integer') {
	    return String(Number(value) | 0);
	  } else if (type === 'boolean') {
	    return value ? 'true' : 'false';
	  } else if (type === 'datetime') {
	    if (value instanceof Date) {
	      return value.toISOString();
	    }
	    return String(value);
	  }
	  throw new Error(`Unsupported query param type: ${type}`);
	}
	util$3.encodeQueryParam = encodeQueryParam;
	function normalizeHeaders(headers) {
	  const normalized = {};
	  for (const [header, value] of Object.entries(headers)) {
	    normalized[header.toLowerCase()] = value;
	  }
	  return normalized;
	}
	util$3.normalizeHeaders = normalizeHeaders;
	function constructMethodCallHeaders(schema, data, opts) {
	  const headers = opts?.headers || {};
	  if (schema.type === 'procedure') {
	    if (opts?.encoding) {
	      headers['Content-Type'] = opts.encoding;
	    }
	    if (data && typeof data === 'object') {
	      if (!headers['Content-Type']) {
	        headers['Content-Type'] = 'application/json';
	      }
	    }
	  }
	  return headers;
	}
	util$3.constructMethodCallHeaders = constructMethodCallHeaders;
	function encodeMethodCallBody(headers, data) {
	  if (!headers['content-type'] || typeof data === 'undefined') {
	    return undefined;
	  }
	  if (data instanceof ArrayBuffer) {
	    return data;
	  }
	  if (headers['content-type'].startsWith('text/')) {
	    return new TextEncoder().encode(data.toString());
	  }
	  if (headers['content-type'].startsWith('application/json')) {
	    return new TextEncoder().encode((0, lexicon_1$1.stringifyLex)(data));
	  }
	  return data;
	}
	util$3.encodeMethodCallBody = encodeMethodCallBody;
	function httpResponseCodeToEnum(status) {
	  let resCode;
	  if (status in types_1$2.ResponseType) {
	    resCode = status;
	  } else if (status >= 100 && status < 200) {
	    resCode = types_1$2.ResponseType.XRPCNotSupported;
	  } else if (status >= 200 && status < 300) {
	    resCode = types_1$2.ResponseType.Success;
	  } else if (status >= 300 && status < 400) {
	    resCode = types_1$2.ResponseType.XRPCNotSupported;
	  } else if (status >= 400 && status < 500) {
	    resCode = types_1$2.ResponseType.InvalidRequest;
	  } else {
	    resCode = types_1$2.ResponseType.InternalServerError;
	  }
	  return resCode;
	}
	util$3.httpResponseCodeToEnum = httpResponseCodeToEnum;
	function httpResponseBodyParse(mimeType, data) {
	  if (mimeType) {
	    if (mimeType.includes('application/json') && data?.byteLength) {
	      try {
	        const str = new TextDecoder().decode(data);
	        return (0, lexicon_1$1.jsonStringToLex)(str);
	      } catch (e) {
	        throw new types_1$2.XRPCError(types_1$2.ResponseType.InvalidResponse, `Failed to parse response body: ${String(e)}`);
	      }
	    }
	    if (mimeType.startsWith('text/') && data?.byteLength) {
	      try {
	        return new TextDecoder().decode(data);
	      } catch (e) {
	        throw new types_1$2.XRPCError(types_1$2.ResponseType.InvalidResponse, `Failed to parse response body: ${String(e)}`);
	      }
	    }
	  }
	  if (data instanceof ArrayBuffer) {
	    return new Uint8Array(data);
	  }
	  return data;
	}
	util$3.httpResponseBodyParse = httpResponseBodyParse;

	Object.defineProperty(client, "__esModule", {
	  value: true
	});
	client.defaultFetchHandler = client.ServiceClient = client.Client = void 0;
	const lexicon_1 = dist$3;
	const util_1$I = util$3;
	const types_1$1 = types$1;
	class Client {
	  constructor() {
	    Object.defineProperty(this, "fetch", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: defaultFetchHandler
	    });
	    Object.defineProperty(this, "lex", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: new lexicon_1.Lexicons()
	    });
	  }
	  // method calls
	  //
	  async call(serviceUri, methodNsid, params, data, opts) {
	    return this.service(serviceUri).call(methodNsid, params, data, opts);
	  }
	  service(serviceUri) {
	    return new ServiceClient(this, serviceUri);
	  }
	  // schemas
	  // =
	  addLexicon(doc) {
	    this.lex.add(doc);
	  }
	  addLexicons(docs) {
	    for (const doc of docs) {
	      this.addLexicon(doc);
	    }
	  }
	  removeLexicon(uri) {
	    this.lex.remove(uri);
	  }
	}
	client.Client = Client;
	class ServiceClient {
	  constructor(baseClient, serviceUri) {
	    Object.defineProperty(this, "baseClient", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "uri", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "headers", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: {}
	    });
	    this.baseClient = baseClient;
	    this.uri = typeof serviceUri === 'string' ? new URL(serviceUri) : serviceUri;
	  }
	  setHeader(key, value) {
	    this.headers[key] = value;
	  }
	  unsetHeader(key) {
	    delete this.headers[key];
	  }
	  async call(methodNsid, params, data, opts) {
	    const def = this.baseClient.lex.getDefOrThrow(methodNsid);
	    if (!def || def.type !== 'query' && def.type !== 'procedure') {
	      throw new Error(`Invalid lexicon: ${methodNsid}. Must be a query or procedure.`);
	    }
	    const httpMethod = (0, util_1$I.getMethodSchemaHTTPMethod)(def);
	    const httpUri = (0, util_1$I.constructMethodCallUri)(methodNsid, def, this.uri, params);
	    const httpHeaders = (0, util_1$I.constructMethodCallHeaders)(def, data, {
	      headers: {
	        ...this.headers,
	        ...opts?.headers
	      },
	      encoding: opts?.encoding
	    });
	    const res = await this.baseClient.fetch(httpUri, httpMethod, httpHeaders, data);
	    const resCode = (0, util_1$I.httpResponseCodeToEnum)(res.status);
	    if (resCode === types_1$1.ResponseType.Success) {
	      try {
	        this.baseClient.lex.assertValidXrpcOutput(methodNsid, res.body);
	      } catch (e) {
	        if (e instanceof lexicon_1.ValidationError) {
	          throw new types_1$1.XRPCInvalidResponseError(methodNsid, e, res.body);
	        } else {
	          throw e;
	        }
	      }
	      return new types_1$1.XRPCResponse(res.body, res.headers);
	    } else {
	      if (res.body && isErrorResponseBody(res.body)) {
	        throw new types_1$1.XRPCError(resCode, res.body.error, res.body.message, res.headers);
	      } else {
	        throw new types_1$1.XRPCError(resCode);
	      }
	    }
	  }
	}
	client.ServiceClient = ServiceClient;
	async function defaultFetchHandler(httpUri, httpMethod, httpHeaders, httpReqBody) {
	  try {
	    // The duplex field is now required for streaming bodies, but not yet reflected
	    // anywhere in docs or types. See whatwg/fetch#1438, nodejs/node#46221.
	    const headers = (0, util_1$I.normalizeHeaders)(httpHeaders);
	    const reqInit = {
	      method: httpMethod,
	      headers,
	      body: (0, util_1$I.encodeMethodCallBody)(headers, httpReqBody),
	      duplex: 'half'
	    };
	    const res = await fetch(httpUri, reqInit);
	    const resBody = await res.arrayBuffer();
	    return {
	      status: res.status,
	      headers: Object.fromEntries(res.headers.entries()),
	      body: (0, util_1$I.httpResponseBodyParse)(res.headers.get('content-type'), resBody)
	    };
	  } catch (e) {
	    throw new types_1$1.XRPCError(types_1$1.ResponseType.Unknown, String(e));
	  }
	}
	client.defaultFetchHandler = defaultFetchHandler;
	function isErrorResponseBody(v) {
	  return types_1$1.errorResponseBody.safeParse(v).success;
	}

	(function (exports) {

	  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = {
	        enumerable: true,
	        get: function () {
	          return m[k];
	        }
	      };
	    }
	    Object.defineProperty(o, k2, desc);
	  } : function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	  });
	  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function (m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	  };
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  __exportStar(types$1, exports);
	  __exportStar(client, exports);
	  const client_1 = client;
	  const defaultInst = new client_1.Client();
	  exports.default = defaultInst;
	})(dist);

	var lexicons = {};

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.ids = exports.lexicons = exports.schemas = exports.schemaDict = void 0;
	  /**
	   * GENERATED CODE - DO NOT MODIFY
	   */
	  const lexicon_1 = dist$3;
	  exports.schemaDict = {
	    ComAtprotoAdminDefs: {
	      lexicon: 1,
	      id: 'com.atproto.admin.defs',
	      defs: {
	        statusAttr: {
	          type: 'object',
	          required: ['applied'],
	          properties: {
	            applied: {
	              type: 'boolean'
	            },
	            ref: {
	              type: 'string'
	            }
	          }
	        },
	        accountView: {
	          type: 'object',
	          required: ['did', 'handle', 'indexedAt'],
	          properties: {
	            did: {
	              type: 'string',
	              format: 'did'
	            },
	            handle: {
	              type: 'string',
	              format: 'handle'
	            },
	            email: {
	              type: 'string'
	            },
	            relatedRecords: {
	              type: 'array',
	              items: {
	                type: 'unknown'
	              }
	            },
	            indexedAt: {
	              type: 'string',
	              format: 'datetime'
	            },
	            invitedBy: {
	              type: 'ref',
	              ref: 'lex:com.atproto.server.defs#inviteCode'
	            },
	            invites: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:com.atproto.server.defs#inviteCode'
	              }
	            },
	            invitesDisabled: {
	              type: 'boolean'
	            },
	            emailConfirmedAt: {
	              type: 'string',
	              format: 'datetime'
	            },
	            inviteNote: {
	              type: 'string'
	            }
	          }
	        },
	        repoRef: {
	          type: 'object',
	          required: ['did'],
	          properties: {
	            did: {
	              type: 'string',
	              format: 'did'
	            }
	          }
	        },
	        repoBlobRef: {
	          type: 'object',
	          required: ['did', 'cid'],
	          properties: {
	            did: {
	              type: 'string',
	              format: 'did'
	            },
	            cid: {
	              type: 'string',
	              format: 'cid'
	            },
	            recordUri: {
	              type: 'string',
	              format: 'at-uri'
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoAdminDeleteAccount: {
	      lexicon: 1,
	      id: 'com.atproto.admin.deleteAccount',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Delete a user account as an administrator.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['did'],
	              properties: {
	                did: {
	                  type: 'string',
	                  format: 'did'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoAdminDisableAccountInvites: {
	      lexicon: 1,
	      id: 'com.atproto.admin.disableAccountInvites',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Disable an account from receiving new invite codes, but does not invalidate existing codes.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['account'],
	              properties: {
	                account: {
	                  type: 'string',
	                  format: 'did'
	                },
	                note: {
	                  type: 'string',
	                  description: 'Optional reason for disabled invites.'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoAdminDisableInviteCodes: {
	      lexicon: 1,
	      id: 'com.atproto.admin.disableInviteCodes',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Disable some set of codes and/or all codes associated with a set of users.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              properties: {
	                codes: {
	                  type: 'array',
	                  items: {
	                    type: 'string'
	                  }
	                },
	                accounts: {
	                  type: 'array',
	                  items: {
	                    type: 'string'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoAdminEnableAccountInvites: {
	      lexicon: 1,
	      id: 'com.atproto.admin.enableAccountInvites',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: "Re-enable an account's ability to receive invite codes.",
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['account'],
	              properties: {
	                account: {
	                  type: 'string',
	                  format: 'did'
	                },
	                note: {
	                  type: 'string',
	                  description: 'Optional reason for enabled invites.'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoAdminGetAccountInfo: {
	      lexicon: 1,
	      id: 'com.atproto.admin.getAccountInfo',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get details about an account.',
	          parameters: {
	            type: 'params',
	            required: ['did'],
	            properties: {
	              did: {
	                type: 'string',
	                format: 'did'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'ref',
	              ref: 'lex:com.atproto.admin.defs#accountView'
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoAdminGetAccountInfos: {
	      lexicon: 1,
	      id: 'com.atproto.admin.getAccountInfos',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get details about some accounts.',
	          parameters: {
	            type: 'params',
	            required: ['dids'],
	            properties: {
	              dids: {
	                type: 'array',
	                items: {
	                  type: 'string',
	                  format: 'did'
	                }
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['infos'],
	              properties: {
	                infos: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:com.atproto.admin.defs#accountView'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoAdminGetInviteCodes: {
	      lexicon: 1,
	      id: 'com.atproto.admin.getInviteCodes',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get an admin view of invite codes.',
	          parameters: {
	            type: 'params',
	            properties: {
	              sort: {
	                type: 'string',
	                knownValues: ['recent', 'usage'],
	                default: 'recent'
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 500,
	                default: 100
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['codes'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                codes: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:com.atproto.server.defs#inviteCode'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoAdminGetSubjectStatus: {
	      lexicon: 1,
	      id: 'com.atproto.admin.getSubjectStatus',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get the service-specific admin status of a subject (account, record, or blob).',
	          parameters: {
	            type: 'params',
	            properties: {
	              did: {
	                type: 'string',
	                format: 'did'
	              },
	              uri: {
	                type: 'string',
	                format: 'at-uri'
	              },
	              blob: {
	                type: 'string',
	                format: 'cid'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['subject'],
	              properties: {
	                subject: {
	                  type: 'union',
	                  refs: ['lex:com.atproto.admin.defs#repoRef', 'lex:com.atproto.repo.strongRef', 'lex:com.atproto.admin.defs#repoBlobRef']
	                },
	                takedown: {
	                  type: 'ref',
	                  ref: 'lex:com.atproto.admin.defs#statusAttr'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoAdminSendEmail: {
	      lexicon: 1,
	      id: 'com.atproto.admin.sendEmail',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: "Send email to a user's account email address.",
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['recipientDid', 'content', 'senderDid'],
	              properties: {
	                recipientDid: {
	                  type: 'string',
	                  format: 'did'
	                },
	                content: {
	                  type: 'string'
	                },
	                subject: {
	                  type: 'string'
	                },
	                senderDid: {
	                  type: 'string',
	                  format: 'did'
	                },
	                comment: {
	                  type: 'string',
	                  description: "Additional comment by the sender that won't be used in the email itself but helpful to provide more context for moderators/reviewers"
	                }
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['sent'],
	              properties: {
	                sent: {
	                  type: 'boolean'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoAdminUpdateAccountEmail: {
	      lexicon: 1,
	      id: 'com.atproto.admin.updateAccountEmail',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: "Administrative action to update an account's email.",
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['account', 'email'],
	              properties: {
	                account: {
	                  type: 'string',
	                  format: 'at-identifier',
	                  description: 'The handle or DID of the repo.'
	                },
	                email: {
	                  type: 'string'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoAdminUpdateAccountHandle: {
	      lexicon: 1,
	      id: 'com.atproto.admin.updateAccountHandle',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: "Administrative action to update an account's handle.",
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['did', 'handle'],
	              properties: {
	                did: {
	                  type: 'string',
	                  format: 'did'
	                },
	                handle: {
	                  type: 'string',
	                  format: 'handle'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoAdminUpdateAccountPassword: {
	      lexicon: 1,
	      id: 'com.atproto.admin.updateAccountPassword',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Update the password for a user account as an administrator.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['did', 'password'],
	              properties: {
	                did: {
	                  type: 'string',
	                  format: 'did'
	                },
	                password: {
	                  type: 'string'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoAdminUpdateSubjectStatus: {
	      lexicon: 1,
	      id: 'com.atproto.admin.updateSubjectStatus',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Update the service-specific admin status of a subject (account, record, or blob).',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['subject'],
	              properties: {
	                subject: {
	                  type: 'union',
	                  refs: ['lex:com.atproto.admin.defs#repoRef', 'lex:com.atproto.repo.strongRef', 'lex:com.atproto.admin.defs#repoBlobRef']
	                },
	                takedown: {
	                  type: 'ref',
	                  ref: 'lex:com.atproto.admin.defs#statusAttr'
	                }
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['subject'],
	              properties: {
	                subject: {
	                  type: 'union',
	                  refs: ['lex:com.atproto.admin.defs#repoRef', 'lex:com.atproto.repo.strongRef', 'lex:com.atproto.admin.defs#repoBlobRef']
	                },
	                takedown: {
	                  type: 'ref',
	                  ref: 'lex:com.atproto.admin.defs#statusAttr'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoIdentityGetRecommendedDidCredentials: {
	      lexicon: 1,
	      id: 'com.atproto.identity.getRecommendedDidCredentials',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Describe the credentials that should be included in the DID doc of an account that is migrating to this service.',
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              properties: {
	                rotationKeys: {
	                  description: 'Recommended rotation keys for PLC dids. Should be undefined (or ignored) for did:webs.',
	                  type: 'array',
	                  items: {
	                    type: 'string'
	                  }
	                },
	                alsoKnownAs: {
	                  type: 'array',
	                  items: {
	                    type: 'string'
	                  }
	                },
	                verificationMethods: {
	                  type: 'unknown'
	                },
	                services: {
	                  type: 'unknown'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoIdentityRequestPlcOperationSignature: {
	      lexicon: 1,
	      id: 'com.atproto.identity.requestPlcOperationSignature',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Request an email with a code to in order to request a signed PLC operation. Requires Auth.'
	        }
	      }
	    },
	    ComAtprotoIdentityResolveHandle: {
	      lexicon: 1,
	      id: 'com.atproto.identity.resolveHandle',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Resolves a handle (domain name) to a DID.',
	          parameters: {
	            type: 'params',
	            required: ['handle'],
	            properties: {
	              handle: {
	                type: 'string',
	                format: 'handle',
	                description: 'The handle to resolve.'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['did'],
	              properties: {
	                did: {
	                  type: 'string',
	                  format: 'did'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoIdentitySignPlcOperation: {
	      lexicon: 1,
	      id: 'com.atproto.identity.signPlcOperation',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: "Signs a PLC operation to update some value(s) in the requesting DID's document.",
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              properties: {
	                token: {
	                  description: 'A token received through com.atproto.identity.requestPlcOperationSignature',
	                  type: 'string'
	                },
	                rotationKeys: {
	                  type: 'array',
	                  items: {
	                    type: 'string'
	                  }
	                },
	                alsoKnownAs: {
	                  type: 'array',
	                  items: {
	                    type: 'string'
	                  }
	                },
	                verificationMethods: {
	                  type: 'unknown'
	                },
	                services: {
	                  type: 'unknown'
	                }
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['operation'],
	              properties: {
	                operation: {
	                  type: 'unknown',
	                  description: 'A signed DID PLC operation.'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoIdentitySubmitPlcOperation: {
	      lexicon: 1,
	      id: 'com.atproto.identity.submitPlcOperation',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: "Validates a PLC operation to ensure that it doesn't violate a service's constraints or get the identity into a bad state, then submits it to the PLC registry",
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['operation'],
	              properties: {
	                operation: {
	                  type: 'unknown'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoIdentityUpdateHandle: {
	      lexicon: 1,
	      id: 'com.atproto.identity.updateHandle',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: "Updates the current account's handle. Verifies handle validity, and updates did:plc document if necessary. Implemented by PDS, and requires auth.",
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['handle'],
	              properties: {
	                handle: {
	                  type: 'string',
	                  format: 'handle',
	                  description: 'The new handle.'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoLabelDefs: {
	      lexicon: 1,
	      id: 'com.atproto.label.defs',
	      defs: {
	        label: {
	          type: 'object',
	          description: 'Metadata tag on an atproto resource (eg, repo or record).',
	          required: ['src', 'uri', 'val', 'cts'],
	          properties: {
	            ver: {
	              type: 'integer',
	              description: 'The AT Protocol version of the label object.'
	            },
	            src: {
	              type: 'string',
	              format: 'did',
	              description: 'DID of the actor who created this label.'
	            },
	            uri: {
	              type: 'string',
	              format: 'uri',
	              description: 'AT URI of the record, repository (account), or other resource that this label applies to.'
	            },
	            cid: {
	              type: 'string',
	              format: 'cid',
	              description: "Optionally, CID specifying the specific version of 'uri' resource this label applies to."
	            },
	            val: {
	              type: 'string',
	              maxLength: 128,
	              description: 'The short string name of the value or type of this label.'
	            },
	            neg: {
	              type: 'boolean',
	              description: 'If true, this is a negation label, overwriting a previous label.'
	            },
	            cts: {
	              type: 'string',
	              format: 'datetime',
	              description: 'Timestamp when this label was created.'
	            },
	            exp: {
	              type: 'string',
	              format: 'datetime',
	              description: 'Timestamp at which this label expires (no longer applies).'
	            },
	            sig: {
	              type: 'bytes',
	              description: 'Signature of dag-cbor encoded label.'
	            }
	          }
	        },
	        selfLabels: {
	          type: 'object',
	          description: 'Metadata tags on an atproto record, published by the author within the record.',
	          required: ['values'],
	          properties: {
	            values: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:com.atproto.label.defs#selfLabel'
	              },
	              maxLength: 10
	            }
	          }
	        },
	        selfLabel: {
	          type: 'object',
	          description: 'Metadata tag on an atproto record, published by the author within the record. Note that schemas should use #selfLabels, not #selfLabel.',
	          required: ['val'],
	          properties: {
	            val: {
	              type: 'string',
	              maxLength: 128,
	              description: 'The short string name of the value or type of this label.'
	            }
	          }
	        },
	        labelValueDefinition: {
	          type: 'object',
	          description: 'Declares a label value and its expected interpertations and behaviors.',
	          required: ['identifier', 'severity', 'blurs', 'locales'],
	          properties: {
	            identifier: {
	              type: 'string',
	              description: "The value of the label being defined. Must only include lowercase ascii and the '-' character ([a-z-]+).",
	              maxLength: 100,
	              maxGraphemes: 100
	            },
	            severity: {
	              type: 'string',
	              description: "How should a client visually convey this label? 'inform' means neutral and informational; 'alert' means negative and warning; 'none' means show nothing.",
	              knownValues: ['inform', 'alert', 'none']
	            },
	            blurs: {
	              type: 'string',
	              description: "What should this label hide in the UI, if applied? 'content' hides all of the target; 'media' hides the images/video/audio; 'none' hides nothing.",
	              knownValues: ['content', 'media', 'none']
	            },
	            defaultSetting: {
	              type: 'string',
	              description: 'The default setting for this label.',
	              knownValues: ['ignore', 'warn', 'hide'],
	              default: 'warn'
	            },
	            adultOnly: {
	              type: 'boolean',
	              description: 'Does the user need to have adult content enabled in order to configure this label?'
	            },
	            locales: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:com.atproto.label.defs#labelValueDefinitionStrings'
	              }
	            }
	          }
	        },
	        labelValueDefinitionStrings: {
	          type: 'object',
	          description: 'Strings which describe the label in the UI, localized into a specific language.',
	          required: ['lang', 'name', 'description'],
	          properties: {
	            lang: {
	              type: 'string',
	              description: 'The code of the language these strings are written in.',
	              format: 'language'
	            },
	            name: {
	              type: 'string',
	              description: 'A short human-readable name for the label.',
	              maxGraphemes: 64,
	              maxLength: 640
	            },
	            description: {
	              type: 'string',
	              description: 'A longer description of what the label means and why it might be applied.',
	              maxGraphemes: 10000,
	              maxLength: 100000
	            }
	          }
	        },
	        labelValue: {
	          type: 'string',
	          knownValues: ['!hide', '!no-promote', '!warn', '!no-unauthenticated', 'dmca-violation', 'doxxing', 'porn', 'sexual', 'nudity', 'nsfl', 'gore']
	        }
	      }
	    },
	    ComAtprotoLabelQueryLabels: {
	      lexicon: 1,
	      id: 'com.atproto.label.queryLabels',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Find labels relevant to the provided AT-URI patterns. Public endpoint for moderation services, though may return different or additional results with auth.',
	          parameters: {
	            type: 'params',
	            required: ['uriPatterns'],
	            properties: {
	              uriPatterns: {
	                type: 'array',
	                items: {
	                  type: 'string'
	                },
	                description: "List of AT URI patterns to match (boolean 'OR'). Each may be a prefix (ending with '*'; will match inclusive of the string leading to '*'), or a full URI."
	              },
	              sources: {
	                type: 'array',
	                items: {
	                  type: 'string',
	                  format: 'did'
	                },
	                description: 'Optional list of label sources (DIDs) to filter on.'
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 250,
	                default: 50
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['labels'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                labels: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:com.atproto.label.defs#label'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoLabelSubscribeLabels: {
	      lexicon: 1,
	      id: 'com.atproto.label.subscribeLabels',
	      defs: {
	        main: {
	          type: 'subscription',
	          description: 'Subscribe to stream of labels (and negations). Public endpoint implemented by mod services. Uses same sequencing scheme as repo event stream.',
	          parameters: {
	            type: 'params',
	            properties: {
	              cursor: {
	                type: 'integer',
	                description: 'The last known event seq number to backfill from.'
	              }
	            }
	          },
	          message: {
	            schema: {
	              type: 'union',
	              refs: ['lex:com.atproto.label.subscribeLabels#labels', 'lex:com.atproto.label.subscribeLabels#info']
	            }
	          },
	          errors: [{
	            name: 'FutureCursor'
	          }]
	        },
	        labels: {
	          type: 'object',
	          required: ['seq', 'labels'],
	          properties: {
	            seq: {
	              type: 'integer'
	            },
	            labels: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:com.atproto.label.defs#label'
	              }
	            }
	          }
	        },
	        info: {
	          type: 'object',
	          required: ['name'],
	          properties: {
	            name: {
	              type: 'string',
	              knownValues: ['OutdatedCursor']
	            },
	            message: {
	              type: 'string'
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoModerationCreateReport: {
	      lexicon: 1,
	      id: 'com.atproto.moderation.createReport',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Submit a moderation report regarding an atproto account or record. Implemented by moderation services (with PDS proxying), and requires auth.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['reasonType', 'subject'],
	              properties: {
	                reasonType: {
	                  type: 'ref',
	                  description: 'Indicates the broad category of violation the report is for.',
	                  ref: 'lex:com.atproto.moderation.defs#reasonType'
	                },
	                reason: {
	                  type: 'string',
	                  maxGraphemes: 2000,
	                  maxLength: 20000,
	                  description: 'Additional context about the content and violation.'
	                },
	                subject: {
	                  type: 'union',
	                  refs: ['lex:com.atproto.admin.defs#repoRef', 'lex:com.atproto.repo.strongRef']
	                }
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['id', 'reasonType', 'subject', 'reportedBy', 'createdAt'],
	              properties: {
	                id: {
	                  type: 'integer'
	                },
	                reasonType: {
	                  type: 'ref',
	                  ref: 'lex:com.atproto.moderation.defs#reasonType'
	                },
	                reason: {
	                  type: 'string',
	                  maxGraphemes: 2000,
	                  maxLength: 20000
	                },
	                subject: {
	                  type: 'union',
	                  refs: ['lex:com.atproto.admin.defs#repoRef', 'lex:com.atproto.repo.strongRef']
	                },
	                reportedBy: {
	                  type: 'string',
	                  format: 'did'
	                },
	                createdAt: {
	                  type: 'string',
	                  format: 'datetime'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoModerationDefs: {
	      lexicon: 1,
	      id: 'com.atproto.moderation.defs',
	      defs: {
	        reasonType: {
	          type: 'string',
	          knownValues: ['com.atproto.moderation.defs#reasonSpam', 'com.atproto.moderation.defs#reasonViolation', 'com.atproto.moderation.defs#reasonMisleading', 'com.atproto.moderation.defs#reasonSexual', 'com.atproto.moderation.defs#reasonRude', 'com.atproto.moderation.defs#reasonOther', 'com.atproto.moderation.defs#reasonAppeal']
	        },
	        reasonSpam: {
	          type: 'token',
	          description: 'Spam: frequent unwanted promotion, replies, mentions'
	        },
	        reasonViolation: {
	          type: 'token',
	          description: 'Direct violation of server rules, laws, terms of service'
	        },
	        reasonMisleading: {
	          type: 'token',
	          description: 'Misleading identity, affiliation, or content'
	        },
	        reasonSexual: {
	          type: 'token',
	          description: 'Unwanted or mislabeled sexual content'
	        },
	        reasonRude: {
	          type: 'token',
	          description: 'Rude, harassing, explicit, or otherwise unwelcoming behavior'
	        },
	        reasonOther: {
	          type: 'token',
	          description: 'Other: reports not falling under another report category'
	        },
	        reasonAppeal: {
	          type: 'token',
	          description: 'Appeal: appeal a previously taken moderation action'
	        }
	      }
	    },
	    ComAtprotoRepoApplyWrites: {
	      lexicon: 1,
	      id: 'com.atproto.repo.applyWrites',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Apply a batch transaction of repository creates, updates, and deletes. Requires auth, implemented by PDS.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['repo', 'writes'],
	              properties: {
	                repo: {
	                  type: 'string',
	                  format: 'at-identifier',
	                  description: 'The handle or DID of the repo (aka, current account).'
	                },
	                validate: {
	                  type: 'boolean',
	                  default: true,
	                  description: "Can be set to 'false' to skip Lexicon schema validation of record data, for all operations."
	                },
	                writes: {
	                  type: 'array',
	                  items: {
	                    type: 'union',
	                    refs: ['lex:com.atproto.repo.applyWrites#create', 'lex:com.atproto.repo.applyWrites#update', 'lex:com.atproto.repo.applyWrites#delete'],
	                    closed: true
	                  }
	                },
	                swapCommit: {
	                  type: 'string',
	                  description: 'If provided, the entire operation will fail if the current repo commit CID does not match this value. Used to prevent conflicting repo mutations.',
	                  format: 'cid'
	                }
	              }
	            }
	          },
	          errors: [{
	            name: 'InvalidSwap',
	            description: "Indicates that the 'swapCommit' parameter did not match current commit."
	          }]
	        },
	        create: {
	          type: 'object',
	          description: 'Operation which creates a new record.',
	          required: ['collection', 'value'],
	          properties: {
	            collection: {
	              type: 'string',
	              format: 'nsid'
	            },
	            rkey: {
	              type: 'string',
	              maxLength: 15
	            },
	            value: {
	              type: 'unknown'
	            }
	          }
	        },
	        update: {
	          type: 'object',
	          description: 'Operation which updates an existing record.',
	          required: ['collection', 'rkey', 'value'],
	          properties: {
	            collection: {
	              type: 'string',
	              format: 'nsid'
	            },
	            rkey: {
	              type: 'string'
	            },
	            value: {
	              type: 'unknown'
	            }
	          }
	        },
	        delete: {
	          type: 'object',
	          description: 'Operation which deletes an existing record.',
	          required: ['collection', 'rkey'],
	          properties: {
	            collection: {
	              type: 'string',
	              format: 'nsid'
	            },
	            rkey: {
	              type: 'string'
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoRepoCreateRecord: {
	      lexicon: 1,
	      id: 'com.atproto.repo.createRecord',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Create a single new repository record. Requires auth, implemented by PDS.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['repo', 'collection', 'record'],
	              properties: {
	                repo: {
	                  type: 'string',
	                  format: 'at-identifier',
	                  description: 'The handle or DID of the repo (aka, current account).'
	                },
	                collection: {
	                  type: 'string',
	                  format: 'nsid',
	                  description: 'The NSID of the record collection.'
	                },
	                rkey: {
	                  type: 'string',
	                  description: 'The Record Key.',
	                  maxLength: 15
	                },
	                validate: {
	                  type: 'boolean',
	                  default: true,
	                  description: "Can be set to 'false' to skip Lexicon schema validation of record data."
	                },
	                record: {
	                  type: 'unknown',
	                  description: 'The record itself. Must contain a $type field.'
	                },
	                swapCommit: {
	                  type: 'string',
	                  format: 'cid',
	                  description: 'Compare and swap with the previous commit by CID.'
	                }
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['uri', 'cid'],
	              properties: {
	                uri: {
	                  type: 'string',
	                  format: 'at-uri'
	                },
	                cid: {
	                  type: 'string',
	                  format: 'cid'
	                }
	              }
	            }
	          },
	          errors: [{
	            name: 'InvalidSwap',
	            description: "Indicates that 'swapCommit' didn't match current repo commit."
	          }]
	        }
	      }
	    },
	    ComAtprotoRepoDeleteRecord: {
	      lexicon: 1,
	      id: 'com.atproto.repo.deleteRecord',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: "Delete a repository record, or ensure it doesn't exist. Requires auth, implemented by PDS.",
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['repo', 'collection', 'rkey'],
	              properties: {
	                repo: {
	                  type: 'string',
	                  format: 'at-identifier',
	                  description: 'The handle or DID of the repo (aka, current account).'
	                },
	                collection: {
	                  type: 'string',
	                  format: 'nsid',
	                  description: 'The NSID of the record collection.'
	                },
	                rkey: {
	                  type: 'string',
	                  description: 'The Record Key.'
	                },
	                swapRecord: {
	                  type: 'string',
	                  format: 'cid',
	                  description: 'Compare and swap with the previous record by CID.'
	                },
	                swapCommit: {
	                  type: 'string',
	                  format: 'cid',
	                  description: 'Compare and swap with the previous commit by CID.'
	                }
	              }
	            }
	          },
	          errors: [{
	            name: 'InvalidSwap'
	          }]
	        }
	      }
	    },
	    ComAtprotoRepoDescribeRepo: {
	      lexicon: 1,
	      id: 'com.atproto.repo.describeRepo',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get information about an account and repository, including the list of collections. Does not require auth.',
	          parameters: {
	            type: 'params',
	            required: ['repo'],
	            properties: {
	              repo: {
	                type: 'string',
	                format: 'at-identifier',
	                description: 'The handle or DID of the repo.'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['handle', 'did', 'didDoc', 'collections', 'handleIsCorrect'],
	              properties: {
	                handle: {
	                  type: 'string',
	                  format: 'handle'
	                },
	                did: {
	                  type: 'string',
	                  format: 'did'
	                },
	                didDoc: {
	                  type: 'unknown',
	                  description: 'The complete DID document for this account.'
	                },
	                collections: {
	                  type: 'array',
	                  description: 'List of all the collections (NSIDs) for which this repo contains at least one record.',
	                  items: {
	                    type: 'string',
	                    format: 'nsid'
	                  }
	                },
	                handleIsCorrect: {
	                  type: 'boolean',
	                  description: 'Indicates if handle is currently valid (resolves bi-directionally)'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoRepoGetRecord: {
	      lexicon: 1,
	      id: 'com.atproto.repo.getRecord',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get a single record from a repository. Does not require auth.',
	          parameters: {
	            type: 'params',
	            required: ['repo', 'collection', 'rkey'],
	            properties: {
	              repo: {
	                type: 'string',
	                format: 'at-identifier',
	                description: 'The handle or DID of the repo.'
	              },
	              collection: {
	                type: 'string',
	                format: 'nsid',
	                description: 'The NSID of the record collection.'
	              },
	              rkey: {
	                type: 'string',
	                description: 'The Record Key.'
	              },
	              cid: {
	                type: 'string',
	                format: 'cid',
	                description: 'The CID of the version of the record. If not specified, then return the most recent version.'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['uri', 'value'],
	              properties: {
	                uri: {
	                  type: 'string',
	                  format: 'at-uri'
	                },
	                cid: {
	                  type: 'string',
	                  format: 'cid'
	                },
	                value: {
	                  type: 'unknown'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoRepoImportRepo: {
	      lexicon: 1,
	      id: 'com.atproto.repo.importRepo',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.',
	          input: {
	            encoding: 'application/vnd.ipld.car'
	          }
	        }
	      }
	    },
	    ComAtprotoRepoListMissingBlobs: {
	      lexicon: 1,
	      id: 'com.atproto.repo.listMissingBlobs',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Returns a list of missing blobs for the requesting account. Intended to be used in the account migration flow.',
	          parameters: {
	            type: 'params',
	            properties: {
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 1000,
	                default: 500
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['blobs'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                blobs: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:com.atproto.repo.listMissingBlobs#recordBlob'
	                  }
	                }
	              }
	            }
	          }
	        },
	        recordBlob: {
	          type: 'object',
	          required: ['cid', 'recordUri'],
	          properties: {
	            cid: {
	              type: 'string',
	              format: 'cid'
	            },
	            recordUri: {
	              type: 'string',
	              format: 'at-uri'
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoRepoListRecords: {
	      lexicon: 1,
	      id: 'com.atproto.repo.listRecords',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'List a range of records in a repository, matching a specific collection. Does not require auth.',
	          parameters: {
	            type: 'params',
	            required: ['repo', 'collection'],
	            properties: {
	              repo: {
	                type: 'string',
	                format: 'at-identifier',
	                description: 'The handle or DID of the repo.'
	              },
	              collection: {
	                type: 'string',
	                format: 'nsid',
	                description: 'The NSID of the record type.'
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50,
	                description: 'The number of records to return.'
	              },
	              cursor: {
	                type: 'string'
	              },
	              rkeyStart: {
	                type: 'string',
	                description: 'DEPRECATED: The lowest sort-ordered rkey to start from (exclusive)'
	              },
	              rkeyEnd: {
	                type: 'string',
	                description: 'DEPRECATED: The highest sort-ordered rkey to stop at (exclusive)'
	              },
	              reverse: {
	                type: 'boolean',
	                description: 'Flag to reverse the order of the returned records.'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['records'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                records: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:com.atproto.repo.listRecords#record'
	                  }
	                }
	              }
	            }
	          }
	        },
	        record: {
	          type: 'object',
	          required: ['uri', 'cid', 'value'],
	          properties: {
	            uri: {
	              type: 'string',
	              format: 'at-uri'
	            },
	            cid: {
	              type: 'string',
	              format: 'cid'
	            },
	            value: {
	              type: 'unknown'
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoRepoPutRecord: {
	      lexicon: 1,
	      id: 'com.atproto.repo.putRecord',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Write a repository record, creating or updating it as needed. Requires auth, implemented by PDS.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['repo', 'collection', 'rkey', 'record'],
	              nullable: ['swapRecord'],
	              properties: {
	                repo: {
	                  type: 'string',
	                  format: 'at-identifier',
	                  description: 'The handle or DID of the repo (aka, current account).'
	                },
	                collection: {
	                  type: 'string',
	                  format: 'nsid',
	                  description: 'The NSID of the record collection.'
	                },
	                rkey: {
	                  type: 'string',
	                  description: 'The Record Key.',
	                  maxLength: 15
	                },
	                validate: {
	                  type: 'boolean',
	                  default: true,
	                  description: "Can be set to 'false' to skip Lexicon schema validation of record data."
	                },
	                record: {
	                  type: 'unknown',
	                  description: 'The record to write.'
	                },
	                swapRecord: {
	                  type: 'string',
	                  format: 'cid',
	                  description: 'Compare and swap with the previous record by CID. WARNING: nullable and optional field; may cause problems with golang implementation'
	                },
	                swapCommit: {
	                  type: 'string',
	                  format: 'cid',
	                  description: 'Compare and swap with the previous commit by CID.'
	                }
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['uri', 'cid'],
	              properties: {
	                uri: {
	                  type: 'string',
	                  format: 'at-uri'
	                },
	                cid: {
	                  type: 'string',
	                  format: 'cid'
	                }
	              }
	            }
	          },
	          errors: [{
	            name: 'InvalidSwap'
	          }]
	        }
	      }
	    },
	    ComAtprotoRepoStrongRef: {
	      lexicon: 1,
	      id: 'com.atproto.repo.strongRef',
	      description: 'A URI with a content-hash fingerprint.',
	      defs: {
	        main: {
	          type: 'object',
	          required: ['uri', 'cid'],
	          properties: {
	            uri: {
	              type: 'string',
	              format: 'at-uri'
	            },
	            cid: {
	              type: 'string',
	              format: 'cid'
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoRepoUploadBlob: {
	      lexicon: 1,
	      id: 'com.atproto.repo.uploadBlob',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Upload a new blob, to be referenced from a repository record. The blob will be deleted if it is not referenced within a time window (eg, minutes). Blob restrictions (mimetype, size, etc) are enforced when the reference is created. Requires auth, implemented by PDS.',
	          input: {
	            encoding: '*/*'
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['blob'],
	              properties: {
	                blob: {
	                  type: 'blob'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoServerActivateAccount: {
	      lexicon: 1,
	      id: 'com.atproto.server.activateAccount',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: "Activates a currently deactivated account. Used to finalize account migration after the account's repo is imported and identity is setup."
	        }
	      }
	    },
	    ComAtprotoServerCheckAccountStatus: {
	      lexicon: 1,
	      id: 'com.atproto.server.checkAccountStatus',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.',
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['activated', 'validDid', 'repoCommit', 'repoRev', 'repoBlocks', 'indexedRecords', 'privateStateValues', 'expectedBlobs', 'importedBlobs'],
	              properties: {
	                activated: {
	                  type: 'boolean'
	                },
	                validDid: {
	                  type: 'boolean'
	                },
	                repoCommit: {
	                  type: 'string',
	                  format: 'cid'
	                },
	                repoRev: {
	                  type: 'string'
	                },
	                repoBlocks: {
	                  type: 'integer'
	                },
	                indexedRecords: {
	                  type: 'integer'
	                },
	                privateStateValues: {
	                  type: 'integer'
	                },
	                expectedBlobs: {
	                  type: 'integer'
	                },
	                importedBlobs: {
	                  type: 'integer'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoServerConfirmEmail: {
	      lexicon: 1,
	      id: 'com.atproto.server.confirmEmail',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Confirm an email using a token from com.atproto.server.requestEmailConfirmation.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['email', 'token'],
	              properties: {
	                email: {
	                  type: 'string'
	                },
	                token: {
	                  type: 'string'
	                }
	              }
	            }
	          },
	          errors: [{
	            name: 'AccountNotFound'
	          }, {
	            name: 'ExpiredToken'
	          }, {
	            name: 'InvalidToken'
	          }, {
	            name: 'InvalidEmail'
	          }]
	        }
	      }
	    },
	    ComAtprotoServerCreateAccount: {
	      lexicon: 1,
	      id: 'com.atproto.server.createAccount',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Create an account. Implemented by PDS.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['handle'],
	              properties: {
	                email: {
	                  type: 'string'
	                },
	                handle: {
	                  type: 'string',
	                  format: 'handle',
	                  description: 'Requested handle for the account.'
	                },
	                did: {
	                  type: 'string',
	                  format: 'did',
	                  description: 'Pre-existing atproto DID, being imported to a new account.'
	                },
	                inviteCode: {
	                  type: 'string'
	                },
	                verificationCode: {
	                  type: 'string'
	                },
	                verificationPhone: {
	                  type: 'string'
	                },
	                password: {
	                  type: 'string',
	                  description: 'Initial account password. May need to meet instance-specific password strength requirements.'
	                },
	                recoveryKey: {
	                  type: 'string',
	                  description: 'DID PLC rotation key (aka, recovery key) to be included in PLC creation operation.'
	                },
	                plcOp: {
	                  type: 'unknown',
	                  description: 'A signed DID PLC operation to be submitted as part of importing an existing account to this instance. NOTE: this optional field may be updated when full account migration is implemented.'
	                }
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              description: 'Account login session returned on successful account creation.',
	              required: ['accessJwt', 'refreshJwt', 'handle', 'did'],
	              properties: {
	                accessJwt: {
	                  type: 'string'
	                },
	                refreshJwt: {
	                  type: 'string'
	                },
	                handle: {
	                  type: 'string',
	                  format: 'handle'
	                },
	                did: {
	                  type: 'string',
	                  format: 'did',
	                  description: 'The DID of the new account.'
	                },
	                didDoc: {
	                  type: 'unknown',
	                  description: 'Complete DID document.'
	                }
	              }
	            }
	          },
	          errors: [{
	            name: 'InvalidHandle'
	          }, {
	            name: 'InvalidPassword'
	          }, {
	            name: 'InvalidInviteCode'
	          }, {
	            name: 'HandleNotAvailable'
	          }, {
	            name: 'UnsupportedDomain'
	          }, {
	            name: 'UnresolvableDid'
	          }, {
	            name: 'IncompatibleDidDoc'
	          }]
	        }
	      }
	    },
	    ComAtprotoServerCreateAppPassword: {
	      lexicon: 1,
	      id: 'com.atproto.server.createAppPassword',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Create an App Password.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['name'],
	              properties: {
	                name: {
	                  type: 'string',
	                  description: 'A short name for the App Password, to help distinguish them.'
	                }
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'ref',
	              ref: 'lex:com.atproto.server.createAppPassword#appPassword'
	            }
	          },
	          errors: [{
	            name: 'AccountTakedown'
	          }]
	        },
	        appPassword: {
	          type: 'object',
	          required: ['name', 'password', 'createdAt'],
	          properties: {
	            name: {
	              type: 'string'
	            },
	            password: {
	              type: 'string'
	            },
	            createdAt: {
	              type: 'string',
	              format: 'datetime'
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoServerCreateInviteCode: {
	      lexicon: 1,
	      id: 'com.atproto.server.createInviteCode',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Create an invite code.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['useCount'],
	              properties: {
	                useCount: {
	                  type: 'integer'
	                },
	                forAccount: {
	                  type: 'string',
	                  format: 'did'
	                }
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['code'],
	              properties: {
	                code: {
	                  type: 'string'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoServerCreateInviteCodes: {
	      lexicon: 1,
	      id: 'com.atproto.server.createInviteCodes',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Create invite codes.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['codeCount', 'useCount'],
	              properties: {
	                codeCount: {
	                  type: 'integer',
	                  default: 1
	                },
	                useCount: {
	                  type: 'integer'
	                },
	                forAccounts: {
	                  type: 'array',
	                  items: {
	                    type: 'string',
	                    format: 'did'
	                  }
	                }
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['codes'],
	              properties: {
	                codes: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:com.atproto.server.createInviteCodes#accountCodes'
	                  }
	                }
	              }
	            }
	          }
	        },
	        accountCodes: {
	          type: 'object',
	          required: ['account', 'codes'],
	          properties: {
	            account: {
	              type: 'string'
	            },
	            codes: {
	              type: 'array',
	              items: {
	                type: 'string'
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoServerCreateSession: {
	      lexicon: 1,
	      id: 'com.atproto.server.createSession',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Create an authentication session.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['identifier', 'password'],
	              properties: {
	                identifier: {
	                  type: 'string',
	                  description: 'Handle or other identifier supported by the server for the authenticating user.'
	                },
	                password: {
	                  type: 'string'
	                },
	                authFactorToken: {
	                  type: 'string'
	                }
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['accessJwt', 'refreshJwt', 'handle', 'did'],
	              properties: {
	                accessJwt: {
	                  type: 'string'
	                },
	                refreshJwt: {
	                  type: 'string'
	                },
	                handle: {
	                  type: 'string',
	                  format: 'handle'
	                },
	                did: {
	                  type: 'string',
	                  format: 'did'
	                },
	                didDoc: {
	                  type: 'unknown'
	                },
	                email: {
	                  type: 'string'
	                },
	                emailConfirmed: {
	                  type: 'boolean'
	                },
	                emailAuthFactor: {
	                  type: 'boolean'
	                }
	              }
	            }
	          },
	          errors: [{
	            name: 'AccountTakedown'
	          }, {
	            name: 'AuthFactorTokenRequired'
	          }]
	        }
	      }
	    },
	    ComAtprotoServerDeactivateAccount: {
	      lexicon: 1,
	      id: 'com.atproto.server.deactivateAccount',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Deactivates a currently active account. Stops serving of repo, and future writes to repo until reactivated. Used to finalize account migration with the old host after the account has been activated on the new host.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              properties: {
	                deleteAfter: {
	                  type: 'string',
	                  format: 'datetime',
	                  description: 'A recommendation to server as to how long they should hold onto the deactivated account before deleting.'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoServerDefs: {
	      lexicon: 1,
	      id: 'com.atproto.server.defs',
	      defs: {
	        inviteCode: {
	          type: 'object',
	          required: ['code', 'available', 'disabled', 'forAccount', 'createdBy', 'createdAt', 'uses'],
	          properties: {
	            code: {
	              type: 'string'
	            },
	            available: {
	              type: 'integer'
	            },
	            disabled: {
	              type: 'boolean'
	            },
	            forAccount: {
	              type: 'string'
	            },
	            createdBy: {
	              type: 'string'
	            },
	            createdAt: {
	              type: 'string',
	              format: 'datetime'
	            },
	            uses: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:com.atproto.server.defs#inviteCodeUse'
	              }
	            }
	          }
	        },
	        inviteCodeUse: {
	          type: 'object',
	          required: ['usedBy', 'usedAt'],
	          properties: {
	            usedBy: {
	              type: 'string',
	              format: 'did'
	            },
	            usedAt: {
	              type: 'string',
	              format: 'datetime'
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoServerDeleteAccount: {
	      lexicon: 1,
	      id: 'com.atproto.server.deleteAccount',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: "Delete an actor's account with a token and password. Can only be called after requesting a deletion token. Requires auth.",
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['did', 'password', 'token'],
	              properties: {
	                did: {
	                  type: 'string',
	                  format: 'did'
	                },
	                password: {
	                  type: 'string'
	                },
	                token: {
	                  type: 'string'
	                }
	              }
	            }
	          },
	          errors: [{
	            name: 'ExpiredToken'
	          }, {
	            name: 'InvalidToken'
	          }]
	        }
	      }
	    },
	    ComAtprotoServerDeleteSession: {
	      lexicon: 1,
	      id: 'com.atproto.server.deleteSession',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Delete the current session. Requires auth.'
	        }
	      }
	    },
	    ComAtprotoServerDescribeServer: {
	      lexicon: 1,
	      id: 'com.atproto.server.describeServer',
	      defs: {
	        main: {
	          type: 'query',
	          description: "Describes the server's account creation requirements and capabilities. Implemented by PDS.",
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['did', 'availableUserDomains'],
	              properties: {
	                inviteCodeRequired: {
	                  type: 'boolean',
	                  description: 'If true, an invite code must be supplied to create an account on this instance.'
	                },
	                phoneVerificationRequired: {
	                  type: 'boolean',
	                  description: 'If true, a phone verification token must be supplied to create an account on this instance.'
	                },
	                availableUserDomains: {
	                  type: 'array',
	                  description: 'List of domain suffixes that can be used in account handles.',
	                  items: {
	                    type: 'string'
	                  }
	                },
	                links: {
	                  type: 'ref',
	                  description: 'URLs of service policy documents.',
	                  ref: 'lex:com.atproto.server.describeServer#links'
	                },
	                contact: {
	                  type: 'ref',
	                  description: 'Contact information',
	                  ref: 'lex:com.atproto.server.describeServer#contact'
	                },
	                did: {
	                  type: 'string',
	                  format: 'did'
	                }
	              }
	            }
	          }
	        },
	        links: {
	          type: 'object',
	          properties: {
	            privacyPolicy: {
	              type: 'string',
	              format: 'uri'
	            },
	            termsOfService: {
	              type: 'string',
	              format: 'uri'
	            }
	          }
	        },
	        contact: {
	          type: 'object',
	          properties: {
	            email: {
	              type: 'string'
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoServerGetAccountInviteCodes: {
	      lexicon: 1,
	      id: 'com.atproto.server.getAccountInviteCodes',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get all invite codes for the current account. Requires auth.',
	          parameters: {
	            type: 'params',
	            properties: {
	              includeUsed: {
	                type: 'boolean',
	                default: true
	              },
	              createAvailable: {
	                type: 'boolean',
	                default: true,
	                description: "Controls whether any new 'earned' but not 'created' invites should be created."
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['codes'],
	              properties: {
	                codes: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:com.atproto.server.defs#inviteCode'
	                  }
	                }
	              }
	            }
	          },
	          errors: [{
	            name: 'DuplicateCreate'
	          }]
	        }
	      }
	    },
	    ComAtprotoServerGetServiceAuth: {
	      lexicon: 1,
	      id: 'com.atproto.server.getServiceAuth',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get a signed token on behalf of the requesting DID for the requested service.',
	          parameters: {
	            type: 'params',
	            required: ['aud'],
	            properties: {
	              aud: {
	                type: 'string',
	                format: 'did',
	                description: 'The DID of the service that the token will be used to authenticate with'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['token'],
	              properties: {
	                token: {
	                  type: 'string'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoServerGetSession: {
	      lexicon: 1,
	      id: 'com.atproto.server.getSession',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get information about the current auth session. Requires auth.',
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['handle', 'did'],
	              properties: {
	                handle: {
	                  type: 'string',
	                  format: 'handle'
	                },
	                did: {
	                  type: 'string',
	                  format: 'did'
	                },
	                email: {
	                  type: 'string'
	                },
	                emailConfirmed: {
	                  type: 'boolean'
	                },
	                emailAuthFactor: {
	                  type: 'boolean'
	                },
	                didDoc: {
	                  type: 'unknown'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoServerListAppPasswords: {
	      lexicon: 1,
	      id: 'com.atproto.server.listAppPasswords',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'List all App Passwords.',
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['passwords'],
	              properties: {
	                passwords: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:com.atproto.server.listAppPasswords#appPassword'
	                  }
	                }
	              }
	            }
	          },
	          errors: [{
	            name: 'AccountTakedown'
	          }]
	        },
	        appPassword: {
	          type: 'object',
	          required: ['name', 'createdAt'],
	          properties: {
	            name: {
	              type: 'string'
	            },
	            createdAt: {
	              type: 'string',
	              format: 'datetime'
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoServerRefreshSession: {
	      lexicon: 1,
	      id: 'com.atproto.server.refreshSession',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: "Refresh an authentication session. Requires auth using the 'refreshJwt' (not the 'accessJwt').",
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['accessJwt', 'refreshJwt', 'handle', 'did'],
	              properties: {
	                accessJwt: {
	                  type: 'string'
	                },
	                refreshJwt: {
	                  type: 'string'
	                },
	                handle: {
	                  type: 'string',
	                  format: 'handle'
	                },
	                did: {
	                  type: 'string',
	                  format: 'did'
	                },
	                didDoc: {
	                  type: 'unknown'
	                }
	              }
	            }
	          },
	          errors: [{
	            name: 'AccountTakedown'
	          }]
	        }
	      }
	    },
	    ComAtprotoServerRequestAccountDelete: {
	      lexicon: 1,
	      id: 'com.atproto.server.requestAccountDelete',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Initiate a user account deletion via email.'
	        }
	      }
	    },
	    ComAtprotoServerRequestEmailConfirmation: {
	      lexicon: 1,
	      id: 'com.atproto.server.requestEmailConfirmation',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Request an email with a code to confirm ownership of email.'
	        }
	      }
	    },
	    ComAtprotoServerRequestEmailUpdate: {
	      lexicon: 1,
	      id: 'com.atproto.server.requestEmailUpdate',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Request a token in order to update email.',
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['tokenRequired'],
	              properties: {
	                tokenRequired: {
	                  type: 'boolean'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoServerRequestPasswordReset: {
	      lexicon: 1,
	      id: 'com.atproto.server.requestPasswordReset',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Initiate a user account password reset via email.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['email'],
	              properties: {
	                email: {
	                  type: 'string'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoServerReserveSigningKey: {
	      lexicon: 1,
	      id: 'com.atproto.server.reserveSigningKey',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Reserve a repo signing key, for use with account creation. Necessary so that a DID PLC update operation can be constructed during an account migraiton. Public and does not require auth; implemented by PDS. NOTE: this endpoint may change when full account migration is implemented.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              properties: {
	                did: {
	                  type: 'string',
	                  format: 'did',
	                  description: 'The DID to reserve a key for.'
	                }
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['signingKey'],
	              properties: {
	                signingKey: {
	                  type: 'string',
	                  description: 'The public key for the reserved signing key, in did:key serialization.'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoServerResetPassword: {
	      lexicon: 1,
	      id: 'com.atproto.server.resetPassword',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Reset a user account password using a token.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['token', 'password'],
	              properties: {
	                token: {
	                  type: 'string'
	                },
	                password: {
	                  type: 'string'
	                }
	              }
	            }
	          },
	          errors: [{
	            name: 'ExpiredToken'
	          }, {
	            name: 'InvalidToken'
	          }]
	        }
	      }
	    },
	    ComAtprotoServerRevokeAppPassword: {
	      lexicon: 1,
	      id: 'com.atproto.server.revokeAppPassword',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Revoke an App Password by name.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['name'],
	              properties: {
	                name: {
	                  type: 'string'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoServerUpdateEmail: {
	      lexicon: 1,
	      id: 'com.atproto.server.updateEmail',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: "Update an account's email.",
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['email'],
	              properties: {
	                email: {
	                  type: 'string'
	                },
	                emailAuthFactor: {
	                  type: 'boolean'
	                },
	                token: {
	                  type: 'string',
	                  description: "Requires a token from com.atproto.sever.requestEmailUpdate if the account's email has been confirmed."
	                }
	              }
	            }
	          },
	          errors: [{
	            name: 'ExpiredToken'
	          }, {
	            name: 'InvalidToken'
	          }, {
	            name: 'TokenRequired'
	          }]
	        }
	      }
	    },
	    ComAtprotoSyncGetBlob: {
	      lexicon: 1,
	      id: 'com.atproto.sync.getBlob',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get a blob associated with a given account. Returns the full blob as originally uploaded. Does not require auth; implemented by PDS.',
	          parameters: {
	            type: 'params',
	            required: ['did', 'cid'],
	            properties: {
	              did: {
	                type: 'string',
	                format: 'did',
	                description: 'The DID of the account.'
	              },
	              cid: {
	                type: 'string',
	                format: 'cid',
	                description: 'The CID of the blob to fetch'
	              }
	            }
	          },
	          output: {
	            encoding: '*/*'
	          }
	        }
	      }
	    },
	    ComAtprotoSyncGetBlocks: {
	      lexicon: 1,
	      id: 'com.atproto.sync.getBlocks',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get data blocks from a given repo, by CID. For example, intermediate MST nodes, or records. Does not require auth; implemented by PDS.',
	          parameters: {
	            type: 'params',
	            required: ['did', 'cids'],
	            properties: {
	              did: {
	                type: 'string',
	                format: 'did',
	                description: 'The DID of the repo.'
	              },
	              cids: {
	                type: 'array',
	                items: {
	                  type: 'string',
	                  format: 'cid'
	                }
	              }
	            }
	          },
	          output: {
	            encoding: 'application/vnd.ipld.car'
	          }
	        }
	      }
	    },
	    ComAtprotoSyncGetCheckout: {
	      lexicon: 1,
	      id: 'com.atproto.sync.getCheckout',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'DEPRECATED - please use com.atproto.sync.getRepo instead',
	          parameters: {
	            type: 'params',
	            required: ['did'],
	            properties: {
	              did: {
	                type: 'string',
	                format: 'did',
	                description: 'The DID of the repo.'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/vnd.ipld.car'
	          }
	        }
	      }
	    },
	    ComAtprotoSyncGetHead: {
	      lexicon: 1,
	      id: 'com.atproto.sync.getHead',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'DEPRECATED - please use com.atproto.sync.getLatestCommit instead',
	          parameters: {
	            type: 'params',
	            required: ['did'],
	            properties: {
	              did: {
	                type: 'string',
	                format: 'did',
	                description: 'The DID of the repo.'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['root'],
	              properties: {
	                root: {
	                  type: 'string',
	                  format: 'cid'
	                }
	              }
	            }
	          },
	          errors: [{
	            name: 'HeadNotFound'
	          }]
	        }
	      }
	    },
	    ComAtprotoSyncGetLatestCommit: {
	      lexicon: 1,
	      id: 'com.atproto.sync.getLatestCommit',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get the current commit CID & revision of the specified repo. Does not require auth.',
	          parameters: {
	            type: 'params',
	            required: ['did'],
	            properties: {
	              did: {
	                type: 'string',
	                format: 'did',
	                description: 'The DID of the repo.'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['cid', 'rev'],
	              properties: {
	                cid: {
	                  type: 'string',
	                  format: 'cid'
	                },
	                rev: {
	                  type: 'string'
	                }
	              }
	            }
	          },
	          errors: [{
	            name: 'RepoNotFound'
	          }]
	        }
	      }
	    },
	    ComAtprotoSyncGetRecord: {
	      lexicon: 1,
	      id: 'com.atproto.sync.getRecord',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get data blocks needed to prove the existence or non-existence of record in the current version of repo. Does not require auth.',
	          parameters: {
	            type: 'params',
	            required: ['did', 'collection', 'rkey'],
	            properties: {
	              did: {
	                type: 'string',
	                format: 'did',
	                description: 'The DID of the repo.'
	              },
	              collection: {
	                type: 'string',
	                format: 'nsid'
	              },
	              rkey: {
	                type: 'string',
	                description: 'Record Key'
	              },
	              commit: {
	                type: 'string',
	                format: 'cid',
	                description: 'DEPRECATED: referenced a repo commit by CID, and retrieved record as of that commit'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/vnd.ipld.car'
	          }
	        }
	      }
	    },
	    ComAtprotoSyncGetRepo: {
	      lexicon: 1,
	      id: 'com.atproto.sync.getRepo',
	      defs: {
	        main: {
	          type: 'query',
	          description: "Download a repository export as CAR file. Optionally only a 'diff' since a previous revision. Does not require auth; implemented by PDS.",
	          parameters: {
	            type: 'params',
	            required: ['did'],
	            properties: {
	              did: {
	                type: 'string',
	                format: 'did',
	                description: 'The DID of the repo.'
	              },
	              since: {
	                type: 'string',
	                description: "The revision ('rev') of the repo to create a diff from."
	              }
	            }
	          },
	          output: {
	            encoding: 'application/vnd.ipld.car'
	          }
	        }
	      }
	    },
	    ComAtprotoSyncListBlobs: {
	      lexicon: 1,
	      id: 'com.atproto.sync.listBlobs',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'List blob CIDso for an account, since some repo revision. Does not require auth; implemented by PDS.',
	          parameters: {
	            type: 'params',
	            required: ['did'],
	            properties: {
	              did: {
	                type: 'string',
	                format: 'did',
	                description: 'The DID of the repo.'
	              },
	              since: {
	                type: 'string',
	                description: 'Optional revision of the repo to list blobs since.'
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 1000,
	                default: 500
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['cids'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                cids: {
	                  type: 'array',
	                  items: {
	                    type: 'string',
	                    format: 'cid'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoSyncListRepos: {
	      lexicon: 1,
	      id: 'com.atproto.sync.listRepos',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Enumerates all the DID, rev, and commit CID for all repos hosted by this service. Does not require auth; implemented by PDS and Relay.',
	          parameters: {
	            type: 'params',
	            properties: {
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 1000,
	                default: 500
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['repos'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                repos: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:com.atproto.sync.listRepos#repo'
	                  }
	                }
	              }
	            }
	          }
	        },
	        repo: {
	          type: 'object',
	          required: ['did', 'head', 'rev'],
	          properties: {
	            did: {
	              type: 'string',
	              format: 'did'
	            },
	            head: {
	              type: 'string',
	              format: 'cid',
	              description: 'Current repo commit CID'
	            },
	            rev: {
	              type: 'string'
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoSyncNotifyOfUpdate: {
	      lexicon: 1,
	      id: 'com.atproto.sync.notifyOfUpdate',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Notify a crawling service of a recent update, and that crawling should resume. Intended use is after a gap between repo stream events caused the crawling service to disconnect. Does not require auth; implemented by Relay.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['hostname'],
	              properties: {
	                hostname: {
	                  type: 'string',
	                  description: 'Hostname of the current service (usually a PDS) that is notifying of update.'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoSyncRequestCrawl: {
	      lexicon: 1,
	      id: 'com.atproto.sync.requestCrawl',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Request a service to persistently crawl hosted repos. Expected use is new PDS instances declaring their existence to Relays. Does not require auth.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['hostname'],
	              properties: {
	                hostname: {
	                  type: 'string',
	                  description: 'Hostname of the current service (eg, PDS) that is requesting to be crawled.'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoSyncSubscribeRepos: {
	      lexicon: 1,
	      id: 'com.atproto.sync.subscribeRepos',
	      defs: {
	        main: {
	          type: 'subscription',
	          description: 'Repository event stream, aka Firehose endpoint. Outputs repo commits with diff data, and identity update events, for all repositories on the current server. See the atproto specifications for details around stream sequencing, repo versioning, CAR diff format, and more. Public and does not require auth; implemented by PDS and Relay.',
	          parameters: {
	            type: 'params',
	            properties: {
	              cursor: {
	                type: 'integer',
	                description: 'The last known event seq number to backfill from.'
	              }
	            }
	          },
	          message: {
	            schema: {
	              type: 'union',
	              refs: ['lex:com.atproto.sync.subscribeRepos#commit', 'lex:com.atproto.sync.subscribeRepos#identity', 'lex:com.atproto.sync.subscribeRepos#handle', 'lex:com.atproto.sync.subscribeRepos#migrate', 'lex:com.atproto.sync.subscribeRepos#tombstone', 'lex:com.atproto.sync.subscribeRepos#info']
	            }
	          },
	          errors: [{
	            name: 'FutureCursor'
	          }, {
	            name: 'ConsumerTooSlow',
	            description: 'If the consumer of the stream can not keep up with events, and a backlog gets too large, the server will drop the connection.'
	          }]
	        },
	        commit: {
	          type: 'object',
	          description: 'Represents an update of repository state. Note that empty commits are allowed, which include no repo data changes, but an update to rev and signature.',
	          required: ['seq', 'rebase', 'tooBig', 'repo', 'commit', 'rev', 'since', 'blocks', 'ops', 'blobs', 'time'],
	          nullable: ['prev', 'since'],
	          properties: {
	            seq: {
	              type: 'integer',
	              description: 'The stream sequence number of this message.'
	            },
	            rebase: {
	              type: 'boolean',
	              description: 'DEPRECATED -- unused'
	            },
	            tooBig: {
	              type: 'boolean',
	              description: 'Indicates that this commit contained too many ops, or data size was too large. Consumers will need to make a separate request to get missing data.'
	            },
	            repo: {
	              type: 'string',
	              format: 'did',
	              description: 'The repo this event comes from.'
	            },
	            commit: {
	              type: 'cid-link',
	              description: 'Repo commit object CID.'
	            },
	            prev: {
	              type: 'cid-link',
	              description: 'DEPRECATED -- unused. WARNING -- nullable and optional; stick with optional to ensure golang interoperability.'
	            },
	            rev: {
	              type: 'string',
	              description: 'The rev of the emitted commit. Note that this information is also in the commit object included in blocks, unless this is a tooBig event.'
	            },
	            since: {
	              type: 'string',
	              description: 'The rev of the last emitted commit from this repo (if any).'
	            },
	            blocks: {
	              type: 'bytes',
	              description: 'CAR file containing relevant blocks, as a diff since the previous repo state.',
	              maxLength: 1000000
	            },
	            ops: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:com.atproto.sync.subscribeRepos#repoOp',
	                description: 'List of repo mutation operations in this commit (eg, records created, updated, or deleted).'
	              },
	              maxLength: 200
	            },
	            blobs: {
	              type: 'array',
	              items: {
	                type: 'cid-link',
	                description: 'List of new blobs (by CID) referenced by records in this commit.'
	              }
	            },
	            time: {
	              type: 'string',
	              format: 'datetime',
	              description: 'Timestamp of when this message was originally broadcast.'
	            }
	          }
	        },
	        identity: {
	          type: 'object',
	          description: "Represents a change to an account's identity. Could be an updated handle, signing key, or pds hosting endpoint. Serves as a prod to all downstream services to refresh their identity cache.",
	          required: ['seq', 'did', 'time'],
	          properties: {
	            seq: {
	              type: 'integer'
	            },
	            did: {
	              type: 'string',
	              format: 'did'
	            },
	            time: {
	              type: 'string',
	              format: 'datetime'
	            }
	          }
	        },
	        handle: {
	          type: 'object',
	          description: "Represents an update of the account's handle, or transition to/from invalid state. NOTE: Will be deprecated in favor of #identity.",
	          required: ['seq', 'did', 'handle', 'time'],
	          properties: {
	            seq: {
	              type: 'integer'
	            },
	            did: {
	              type: 'string',
	              format: 'did'
	            },
	            handle: {
	              type: 'string',
	              format: 'handle'
	            },
	            time: {
	              type: 'string',
	              format: 'datetime'
	            }
	          }
	        },
	        migrate: {
	          type: 'object',
	          description: 'Represents an account moving from one PDS instance to another. NOTE: not implemented; account migration uses #identity instead',
	          required: ['seq', 'did', 'migrateTo', 'time'],
	          nullable: ['migrateTo'],
	          properties: {
	            seq: {
	              type: 'integer'
	            },
	            did: {
	              type: 'string',
	              format: 'did'
	            },
	            migrateTo: {
	              type: 'string'
	            },
	            time: {
	              type: 'string',
	              format: 'datetime'
	            }
	          }
	        },
	        tombstone: {
	          type: 'object',
	          description: 'Indicates that an account has been deleted. NOTE: may be deprecated in favor of #identity or a future #account event',
	          required: ['seq', 'did', 'time'],
	          properties: {
	            seq: {
	              type: 'integer'
	            },
	            did: {
	              type: 'string',
	              format: 'did'
	            },
	            time: {
	              type: 'string',
	              format: 'datetime'
	            }
	          }
	        },
	        info: {
	          type: 'object',
	          required: ['name'],
	          properties: {
	            name: {
	              type: 'string',
	              knownValues: ['OutdatedCursor']
	            },
	            message: {
	              type: 'string'
	            }
	          }
	        },
	        repoOp: {
	          type: 'object',
	          description: 'A repo operation, ie a mutation of a single record.',
	          required: ['action', 'path', 'cid'],
	          nullable: ['cid'],
	          properties: {
	            action: {
	              type: 'string',
	              knownValues: ['create', 'update', 'delete']
	            },
	            path: {
	              type: 'string'
	            },
	            cid: {
	              type: 'cid-link',
	              description: 'For creates and updates, the new record CID. For deletions, null.'
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoTempCheckSignupQueue: {
	      lexicon: 1,
	      id: 'com.atproto.temp.checkSignupQueue',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Check accounts location in signup queue.',
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['activated'],
	              properties: {
	                activated: {
	                  type: 'boolean'
	                },
	                placeInQueue: {
	                  type: 'integer'
	                },
	                estimatedTimeMs: {
	                  type: 'integer'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoTempFetchLabels: {
	      lexicon: 1,
	      id: 'com.atproto.temp.fetchLabels',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'DEPRECATED: use queryLabels or subscribeLabels instead -- Fetch all labels from a labeler created after a certain date.',
	          parameters: {
	            type: 'params',
	            properties: {
	              since: {
	                type: 'integer'
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 250,
	                default: 50
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['labels'],
	              properties: {
	                labels: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:com.atproto.label.defs#label'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ComAtprotoTempRequestPhoneVerification: {
	      lexicon: 1,
	      id: 'com.atproto.temp.requestPhoneVerification',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Request a verification code to be sent to the supplied phone number',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['phoneNumber'],
	              properties: {
	                phoneNumber: {
	                  type: 'string'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyActorDefs: {
	      lexicon: 1,
	      id: 'app.bsky.actor.defs',
	      defs: {
	        profileViewBasic: {
	          type: 'object',
	          required: ['did', 'handle'],
	          properties: {
	            did: {
	              type: 'string',
	              format: 'did'
	            },
	            handle: {
	              type: 'string',
	              format: 'handle'
	            },
	            displayName: {
	              type: 'string',
	              maxGraphemes: 64,
	              maxLength: 640
	            },
	            avatar: {
	              type: 'string',
	              format: 'uri'
	            },
	            associated: {
	              type: 'ref',
	              ref: 'lex:app.bsky.actor.defs#profileAssociated'
	            },
	            viewer: {
	              type: 'ref',
	              ref: 'lex:app.bsky.actor.defs#viewerState'
	            },
	            labels: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:com.atproto.label.defs#label'
	              }
	            }
	          }
	        },
	        profileView: {
	          type: 'object',
	          required: ['did', 'handle'],
	          properties: {
	            did: {
	              type: 'string',
	              format: 'did'
	            },
	            handle: {
	              type: 'string',
	              format: 'handle'
	            },
	            displayName: {
	              type: 'string',
	              maxGraphemes: 64,
	              maxLength: 640
	            },
	            description: {
	              type: 'string',
	              maxGraphemes: 256,
	              maxLength: 2560
	            },
	            avatar: {
	              type: 'string',
	              format: 'uri'
	            },
	            associated: {
	              type: 'ref',
	              ref: 'lex:app.bsky.actor.defs#profileAssociated'
	            },
	            indexedAt: {
	              type: 'string',
	              format: 'datetime'
	            },
	            viewer: {
	              type: 'ref',
	              ref: 'lex:app.bsky.actor.defs#viewerState'
	            },
	            labels: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:com.atproto.label.defs#label'
	              }
	            }
	          }
	        },
	        profileViewDetailed: {
	          type: 'object',
	          required: ['did', 'handle'],
	          properties: {
	            did: {
	              type: 'string',
	              format: 'did'
	            },
	            handle: {
	              type: 'string',
	              format: 'handle'
	            },
	            displayName: {
	              type: 'string',
	              maxGraphemes: 64,
	              maxLength: 640
	            },
	            description: {
	              type: 'string',
	              maxGraphemes: 256,
	              maxLength: 2560
	            },
	            avatar: {
	              type: 'string',
	              format: 'uri'
	            },
	            banner: {
	              type: 'string',
	              format: 'uri'
	            },
	            followersCount: {
	              type: 'integer'
	            },
	            followsCount: {
	              type: 'integer'
	            },
	            postsCount: {
	              type: 'integer'
	            },
	            associated: {
	              type: 'ref',
	              ref: 'lex:app.bsky.actor.defs#profileAssociated'
	            },
	            indexedAt: {
	              type: 'string',
	              format: 'datetime'
	            },
	            viewer: {
	              type: 'ref',
	              ref: 'lex:app.bsky.actor.defs#viewerState'
	            },
	            labels: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:com.atproto.label.defs#label'
	              }
	            }
	          }
	        },
	        profileAssociated: {
	          type: 'object',
	          properties: {
	            lists: {
	              type: 'integer'
	            },
	            feedgens: {
	              type: 'integer'
	            },
	            labeler: {
	              type: 'boolean'
	            }
	          }
	        },
	        viewerState: {
	          type: 'object',
	          description: "Metadata about the requesting account's relationship with the subject account. Only has meaningful content for authed requests.",
	          properties: {
	            muted: {
	              type: 'boolean'
	            },
	            mutedByList: {
	              type: 'ref',
	              ref: 'lex:app.bsky.graph.defs#listViewBasic'
	            },
	            blockedBy: {
	              type: 'boolean'
	            },
	            blocking: {
	              type: 'string',
	              format: 'at-uri'
	            },
	            blockingByList: {
	              type: 'ref',
	              ref: 'lex:app.bsky.graph.defs#listViewBasic'
	            },
	            following: {
	              type: 'string',
	              format: 'at-uri'
	            },
	            followedBy: {
	              type: 'string',
	              format: 'at-uri'
	            }
	          }
	        },
	        preferences: {
	          type: 'array',
	          items: {
	            type: 'union',
	            refs: ['lex:app.bsky.actor.defs#adultContentPref', 'lex:app.bsky.actor.defs#contentLabelPref', 'lex:app.bsky.actor.defs#savedFeedsPref', 'lex:app.bsky.actor.defs#savedFeedsPrefV2', 'lex:app.bsky.actor.defs#personalDetailsPref', 'lex:app.bsky.actor.defs#feedViewPref', 'lex:app.bsky.actor.defs#threadViewPref', 'lex:app.bsky.actor.defs#interestsPref', 'lex:app.bsky.actor.defs#mutedWordsPref', 'lex:app.bsky.actor.defs#hiddenPostsPref']
	          }
	        },
	        adultContentPref: {
	          type: 'object',
	          required: ['enabled'],
	          properties: {
	            enabled: {
	              type: 'boolean',
	              default: false
	            }
	          }
	        },
	        contentLabelPref: {
	          type: 'object',
	          required: ['label', 'visibility'],
	          properties: {
	            labelerDid: {
	              type: 'string',
	              description: 'Which labeler does this preference apply to? If undefined, applies globally.',
	              format: 'did'
	            },
	            label: {
	              type: 'string'
	            },
	            visibility: {
	              type: 'string',
	              knownValues: ['ignore', 'show', 'warn', 'hide']
	            }
	          }
	        },
	        savedFeed: {
	          type: 'object',
	          required: ['id', 'type', 'value', 'pinned'],
	          properties: {
	            id: {
	              type: 'string'
	            },
	            type: {
	              type: 'string',
	              knownValues: ['feed', 'list', 'timeline']
	            },
	            value: {
	              type: 'string'
	            },
	            pinned: {
	              type: 'boolean'
	            }
	          }
	        },
	        savedFeedsPrefV2: {
	          type: 'object',
	          required: ['items'],
	          properties: {
	            items: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:app.bsky.actor.defs#savedFeed'
	              }
	            }
	          }
	        },
	        savedFeedsPref: {
	          type: 'object',
	          required: ['pinned', 'saved'],
	          properties: {
	            pinned: {
	              type: 'array',
	              items: {
	                type: 'string',
	                format: 'at-uri'
	              }
	            },
	            saved: {
	              type: 'array',
	              items: {
	                type: 'string',
	                format: 'at-uri'
	              }
	            },
	            timelineIndex: {
	              type: 'integer'
	            }
	          }
	        },
	        personalDetailsPref: {
	          type: 'object',
	          properties: {
	            birthDate: {
	              type: 'string',
	              format: 'datetime',
	              description: 'The birth date of account owner.'
	            }
	          }
	        },
	        feedViewPref: {
	          type: 'object',
	          required: ['feed'],
	          properties: {
	            feed: {
	              type: 'string',
	              description: 'The URI of the feed, or an identifier which describes the feed.'
	            },
	            hideReplies: {
	              type: 'boolean',
	              description: 'Hide replies in the feed.'
	            },
	            hideRepliesByUnfollowed: {
	              type: 'boolean',
	              description: 'Hide replies in the feed if they are not by followed users.',
	              default: true
	            },
	            hideRepliesByLikeCount: {
	              type: 'integer',
	              description: 'Hide replies in the feed if they do not have this number of likes.'
	            },
	            hideReposts: {
	              type: 'boolean',
	              description: 'Hide reposts in the feed.'
	            },
	            hideQuotePosts: {
	              type: 'boolean',
	              description: 'Hide quote posts in the feed.'
	            }
	          }
	        },
	        threadViewPref: {
	          type: 'object',
	          properties: {
	            sort: {
	              type: 'string',
	              description: 'Sorting mode for threads.',
	              knownValues: ['oldest', 'newest', 'most-likes', 'random']
	            },
	            prioritizeFollowedUsers: {
	              type: 'boolean',
	              description: 'Show followed users at the top of all replies.'
	            }
	          }
	        },
	        interestsPref: {
	          type: 'object',
	          required: ['tags'],
	          properties: {
	            tags: {
	              type: 'array',
	              maxLength: 100,
	              items: {
	                type: 'string',
	                maxLength: 640,
	                maxGraphemes: 64
	              },
	              description: "A list of tags which describe the account owner's interests gathered during onboarding."
	            }
	          }
	        },
	        mutedWordTarget: {
	          type: 'string',
	          knownValues: ['content', 'tag'],
	          maxLength: 640,
	          maxGraphemes: 64
	        },
	        mutedWord: {
	          type: 'object',
	          description: 'A word that the account owner has muted.',
	          required: ['value', 'targets'],
	          properties: {
	            value: {
	              type: 'string',
	              description: 'The muted word itself.',
	              maxLength: 10000,
	              maxGraphemes: 1000
	            },
	            targets: {
	              type: 'array',
	              description: 'The intended targets of the muted word.',
	              items: {
	                type: 'ref',
	                ref: 'lex:app.bsky.actor.defs#mutedWordTarget'
	              }
	            }
	          }
	        },
	        mutedWordsPref: {
	          type: 'object',
	          required: ['items'],
	          properties: {
	            items: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:app.bsky.actor.defs#mutedWord'
	              },
	              description: 'A list of words the account owner has muted.'
	            }
	          }
	        },
	        hiddenPostsPref: {
	          type: 'object',
	          required: ['items'],
	          properties: {
	            items: {
	              type: 'array',
	              items: {
	                type: 'string',
	                format: 'at-uri'
	              },
	              description: 'A list of URIs of posts the account owner has hidden.'
	            }
	          }
	        },
	        labelersPref: {
	          type: 'object',
	          required: ['labelers'],
	          properties: {
	            labelers: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:app.bsky.actor.defs#labelerPrefItem'
	              }
	            }
	          }
	        },
	        labelerPrefItem: {
	          type: 'object',
	          required: ['did'],
	          properties: {
	            did: {
	              type: 'string',
	              format: 'did'
	            }
	          }
	        }
	      }
	    },
	    AppBskyActorGetPreferences: {
	      lexicon: 1,
	      id: 'app.bsky.actor.getPreferences',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get private preferences attached to the current account. Expected use is synchronization between multiple devices, and import/export during account migration. Requires auth.',
	          parameters: {
	            type: 'params',
	            properties: {}
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['preferences'],
	              properties: {
	                preferences: {
	                  type: 'ref',
	                  ref: 'lex:app.bsky.actor.defs#preferences'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyActorGetProfile: {
	      lexicon: 1,
	      id: 'app.bsky.actor.getProfile',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get detailed profile view of an actor. Does not require auth, but contains relevant metadata with auth.',
	          parameters: {
	            type: 'params',
	            required: ['actor'],
	            properties: {
	              actor: {
	                type: 'string',
	                format: 'at-identifier',
	                description: 'Handle or DID of account to fetch profile of.'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'ref',
	              ref: 'lex:app.bsky.actor.defs#profileViewDetailed'
	            }
	          }
	        }
	      }
	    },
	    AppBskyActorGetProfiles: {
	      lexicon: 1,
	      id: 'app.bsky.actor.getProfiles',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get detailed profile views of multiple actors.',
	          parameters: {
	            type: 'params',
	            required: ['actors'],
	            properties: {
	              actors: {
	                type: 'array',
	                items: {
	                  type: 'string',
	                  format: 'at-identifier'
	                },
	                maxLength: 25
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['profiles'],
	              properties: {
	                profiles: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.actor.defs#profileViewDetailed'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyActorGetSuggestions: {
	      lexicon: 1,
	      id: 'app.bsky.actor.getSuggestions',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get a list of suggested actors. Expected use is discovery of accounts to follow during new account onboarding.',
	          parameters: {
	            type: 'params',
	            properties: {
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['actors'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                actors: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.actor.defs#profileView'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyActorProfile: {
	      lexicon: 1,
	      id: 'app.bsky.actor.profile',
	      defs: {
	        main: {
	          type: 'record',
	          description: 'A declaration of a Bluesky account profile.',
	          key: 'literal:self',
	          record: {
	            type: 'object',
	            properties: {
	              displayName: {
	                type: 'string',
	                maxGraphemes: 64,
	                maxLength: 640
	              },
	              description: {
	                type: 'string',
	                description: 'Free-form profile description text.',
	                maxGraphemes: 256,
	                maxLength: 2560
	              },
	              avatar: {
	                type: 'blob',
	                description: "Small image to be displayed next to posts from account. AKA, 'profile picture'",
	                accept: ['image/png', 'image/jpeg'],
	                maxSize: 1000000
	              },
	              banner: {
	                type: 'blob',
	                description: 'Larger horizontal image to display behind profile view.',
	                accept: ['image/png', 'image/jpeg'],
	                maxSize: 1000000
	              },
	              labels: {
	                type: 'union',
	                description: 'Self-label values, specific to the Bluesky application, on the overall account.',
	                refs: ['lex:com.atproto.label.defs#selfLabels']
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyActorPutPreferences: {
	      lexicon: 1,
	      id: 'app.bsky.actor.putPreferences',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Set the private preferences attached to the account.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['preferences'],
	              properties: {
	                preferences: {
	                  type: 'ref',
	                  ref: 'lex:app.bsky.actor.defs#preferences'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyActorSearchActors: {
	      lexicon: 1,
	      id: 'app.bsky.actor.searchActors',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Find actors (profiles) matching search criteria. Does not require auth.',
	          parameters: {
	            type: 'params',
	            properties: {
	              term: {
	                type: 'string',
	                description: "DEPRECATED: use 'q' instead."
	              },
	              q: {
	                type: 'string',
	                description: 'Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.'
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 25
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['actors'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                actors: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.actor.defs#profileView'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyActorSearchActorsTypeahead: {
	      lexicon: 1,
	      id: 'app.bsky.actor.searchActorsTypeahead',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Find actor suggestions for a prefix search term. Expected use is for auto-completion during text field entry. Does not require auth.',
	          parameters: {
	            type: 'params',
	            properties: {
	              term: {
	                type: 'string',
	                description: "DEPRECATED: use 'q' instead."
	              },
	              q: {
	                type: 'string',
	                description: 'Search query prefix; not a full query string.'
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 10
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['actors'],
	              properties: {
	                actors: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.actor.defs#profileViewBasic'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyEmbedExternal: {
	      lexicon: 1,
	      id: 'app.bsky.embed.external',
	      defs: {
	        main: {
	          type: 'object',
	          description: "A representation of some externally linked content (eg, a URL and 'card'), embedded in a Bluesky record (eg, a post).",
	          required: ['external'],
	          properties: {
	            external: {
	              type: 'ref',
	              ref: 'lex:app.bsky.embed.external#external'
	            }
	          }
	        },
	        external: {
	          type: 'object',
	          required: ['uri', 'title', 'description'],
	          properties: {
	            uri: {
	              type: 'string',
	              format: 'uri'
	            },
	            title: {
	              type: 'string'
	            },
	            description: {
	              type: 'string'
	            },
	            thumb: {
	              type: 'blob',
	              accept: ['image/*'],
	              maxSize: 1000000
	            }
	          }
	        },
	        view: {
	          type: 'object',
	          required: ['external'],
	          properties: {
	            external: {
	              type: 'ref',
	              ref: 'lex:app.bsky.embed.external#viewExternal'
	            }
	          }
	        },
	        viewExternal: {
	          type: 'object',
	          required: ['uri', 'title', 'description'],
	          properties: {
	            uri: {
	              type: 'string',
	              format: 'uri'
	            },
	            title: {
	              type: 'string'
	            },
	            description: {
	              type: 'string'
	            },
	            thumb: {
	              type: 'string',
	              format: 'uri'
	            }
	          }
	        }
	      }
	    },
	    AppBskyEmbedImages: {
	      lexicon: 1,
	      id: 'app.bsky.embed.images',
	      description: 'A set of images embedded in a Bluesky record (eg, a post).',
	      defs: {
	        main: {
	          type: 'object',
	          required: ['images'],
	          properties: {
	            images: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:app.bsky.embed.images#image'
	              },
	              maxLength: 4
	            }
	          }
	        },
	        image: {
	          type: 'object',
	          required: ['image', 'alt'],
	          properties: {
	            image: {
	              type: 'blob',
	              accept: ['image/*'],
	              maxSize: 1000000
	            },
	            alt: {
	              type: 'string',
	              description: 'Alt text description of the image, for accessibility.'
	            },
	            aspectRatio: {
	              type: 'ref',
	              ref: 'lex:app.bsky.embed.images#aspectRatio'
	            }
	          }
	        },
	        aspectRatio: {
	          type: 'object',
	          description: 'width:height represents an aspect ratio. It may be approximate, and may not correspond to absolute dimensions in any given unit.',
	          required: ['width', 'height'],
	          properties: {
	            width: {
	              type: 'integer',
	              minimum: 1
	            },
	            height: {
	              type: 'integer',
	              minimum: 1
	            }
	          }
	        },
	        view: {
	          type: 'object',
	          required: ['images'],
	          properties: {
	            images: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:app.bsky.embed.images#viewImage'
	              },
	              maxLength: 4
	            }
	          }
	        },
	        viewImage: {
	          type: 'object',
	          required: ['thumb', 'fullsize', 'alt'],
	          properties: {
	            thumb: {
	              type: 'string',
	              format: 'uri',
	              description: 'Fully-qualified URL where a thumbnail of the image can be fetched. For example, CDN location provided by the App View.'
	            },
	            fullsize: {
	              type: 'string',
	              format: 'uri',
	              description: 'Fully-qualified URL where a large version of the image can be fetched. May or may not be the exact original blob. For example, CDN location provided by the App View.'
	            },
	            alt: {
	              type: 'string',
	              description: 'Alt text description of the image, for accessibility.'
	            },
	            aspectRatio: {
	              type: 'ref',
	              ref: 'lex:app.bsky.embed.images#aspectRatio'
	            }
	          }
	        }
	      }
	    },
	    AppBskyEmbedRecord: {
	      lexicon: 1,
	      id: 'app.bsky.embed.record',
	      description: 'A representation of a record embedded in a Bluesky record (eg, a post). For example, a quote-post, or sharing a feed generator record.',
	      defs: {
	        main: {
	          type: 'object',
	          required: ['record'],
	          properties: {
	            record: {
	              type: 'ref',
	              ref: 'lex:com.atproto.repo.strongRef'
	            }
	          }
	        },
	        view: {
	          type: 'object',
	          required: ['record'],
	          properties: {
	            record: {
	              type: 'union',
	              refs: ['lex:app.bsky.embed.record#viewRecord', 'lex:app.bsky.embed.record#viewNotFound', 'lex:app.bsky.embed.record#viewBlocked', 'lex:app.bsky.feed.defs#generatorView', 'lex:app.bsky.graph.defs#listView', 'lex:app.bsky.labeler.defs#labelerView']
	            }
	          }
	        },
	        viewRecord: {
	          type: 'object',
	          required: ['uri', 'cid', 'author', 'value', 'indexedAt'],
	          properties: {
	            uri: {
	              type: 'string',
	              format: 'at-uri'
	            },
	            cid: {
	              type: 'string',
	              format: 'cid'
	            },
	            author: {
	              type: 'ref',
	              ref: 'lex:app.bsky.actor.defs#profileViewBasic'
	            },
	            value: {
	              type: 'unknown',
	              description: 'The record data itself.'
	            },
	            labels: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:com.atproto.label.defs#label'
	              }
	            },
	            replyCount: {
	              type: 'integer'
	            },
	            repostCount: {
	              type: 'integer'
	            },
	            likeCount: {
	              type: 'integer'
	            },
	            embeds: {
	              type: 'array',
	              items: {
	                type: 'union',
	                refs: ['lex:app.bsky.embed.images#view', 'lex:app.bsky.embed.external#view', 'lex:app.bsky.embed.record#view', 'lex:app.bsky.embed.recordWithMedia#view']
	              }
	            },
	            indexedAt: {
	              type: 'string',
	              format: 'datetime'
	            }
	          }
	        },
	        viewNotFound: {
	          type: 'object',
	          required: ['uri', 'notFound'],
	          properties: {
	            uri: {
	              type: 'string',
	              format: 'at-uri'
	            },
	            notFound: {
	              type: 'boolean',
	              const: true
	            }
	          }
	        },
	        viewBlocked: {
	          type: 'object',
	          required: ['uri', 'blocked', 'author'],
	          properties: {
	            uri: {
	              type: 'string',
	              format: 'at-uri'
	            },
	            blocked: {
	              type: 'boolean',
	              const: true
	            },
	            author: {
	              type: 'ref',
	              ref: 'lex:app.bsky.feed.defs#blockedAuthor'
	            }
	          }
	        }
	      }
	    },
	    AppBskyEmbedRecordWithMedia: {
	      lexicon: 1,
	      id: 'app.bsky.embed.recordWithMedia',
	      description: 'A representation of a record embedded in a Bluesky record (eg, a post), alongside other compatible embeds. For example, a quote post and image, or a quote post and external URL card.',
	      defs: {
	        main: {
	          type: 'object',
	          required: ['record', 'media'],
	          properties: {
	            record: {
	              type: 'ref',
	              ref: 'lex:app.bsky.embed.record'
	            },
	            media: {
	              type: 'union',
	              refs: ['lex:app.bsky.embed.images', 'lex:app.bsky.embed.external']
	            }
	          }
	        },
	        view: {
	          type: 'object',
	          required: ['record', 'media'],
	          properties: {
	            record: {
	              type: 'ref',
	              ref: 'lex:app.bsky.embed.record#view'
	            },
	            media: {
	              type: 'union',
	              refs: ['lex:app.bsky.embed.images#view', 'lex:app.bsky.embed.external#view']
	            }
	          }
	        }
	      }
	    },
	    AppBskyFeedDefs: {
	      lexicon: 1,
	      id: 'app.bsky.feed.defs',
	      defs: {
	        postView: {
	          type: 'object',
	          required: ['uri', 'cid', 'author', 'record', 'indexedAt'],
	          properties: {
	            uri: {
	              type: 'string',
	              format: 'at-uri'
	            },
	            cid: {
	              type: 'string',
	              format: 'cid'
	            },
	            author: {
	              type: 'ref',
	              ref: 'lex:app.bsky.actor.defs#profileViewBasic'
	            },
	            record: {
	              type: 'unknown'
	            },
	            embed: {
	              type: 'union',
	              refs: ['lex:app.bsky.embed.images#view', 'lex:app.bsky.embed.external#view', 'lex:app.bsky.embed.record#view', 'lex:app.bsky.embed.recordWithMedia#view']
	            },
	            replyCount: {
	              type: 'integer'
	            },
	            repostCount: {
	              type: 'integer'
	            },
	            likeCount: {
	              type: 'integer'
	            },
	            indexedAt: {
	              type: 'string',
	              format: 'datetime'
	            },
	            viewer: {
	              type: 'ref',
	              ref: 'lex:app.bsky.feed.defs#viewerState'
	            },
	            labels: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:com.atproto.label.defs#label'
	              }
	            },
	            threadgate: {
	              type: 'ref',
	              ref: 'lex:app.bsky.feed.defs#threadgateView'
	            }
	          }
	        },
	        viewerState: {
	          type: 'object',
	          description: "Metadata about the requesting account's relationship with the subject content. Only has meaningful content for authed requests.",
	          properties: {
	            repost: {
	              type: 'string',
	              format: 'at-uri'
	            },
	            like: {
	              type: 'string',
	              format: 'at-uri'
	            },
	            replyDisabled: {
	              type: 'boolean'
	            }
	          }
	        },
	        feedViewPost: {
	          type: 'object',
	          required: ['post'],
	          properties: {
	            post: {
	              type: 'ref',
	              ref: 'lex:app.bsky.feed.defs#postView'
	            },
	            reply: {
	              type: 'ref',
	              ref: 'lex:app.bsky.feed.defs#replyRef'
	            },
	            reason: {
	              type: 'union',
	              refs: ['lex:app.bsky.feed.defs#reasonRepost']
	            },
	            feedContext: {
	              type: 'string',
	              description: 'Context provided by feed generator that may be passed back alongside interactions.',
	              maxLength: 2000
	            }
	          }
	        },
	        replyRef: {
	          type: 'object',
	          required: ['root', 'parent'],
	          properties: {
	            root: {
	              type: 'union',
	              refs: ['lex:app.bsky.feed.defs#postView', 'lex:app.bsky.feed.defs#notFoundPost', 'lex:app.bsky.feed.defs#blockedPost']
	            },
	            parent: {
	              type: 'union',
	              refs: ['lex:app.bsky.feed.defs#postView', 'lex:app.bsky.feed.defs#notFoundPost', 'lex:app.bsky.feed.defs#blockedPost']
	            }
	          }
	        },
	        reasonRepost: {
	          type: 'object',
	          required: ['by', 'indexedAt'],
	          properties: {
	            by: {
	              type: 'ref',
	              ref: 'lex:app.bsky.actor.defs#profileViewBasic'
	            },
	            indexedAt: {
	              type: 'string',
	              format: 'datetime'
	            }
	          }
	        },
	        threadViewPost: {
	          type: 'object',
	          required: ['post'],
	          properties: {
	            post: {
	              type: 'ref',
	              ref: 'lex:app.bsky.feed.defs#postView'
	            },
	            parent: {
	              type: 'union',
	              refs: ['lex:app.bsky.feed.defs#threadViewPost', 'lex:app.bsky.feed.defs#notFoundPost', 'lex:app.bsky.feed.defs#blockedPost']
	            },
	            replies: {
	              type: 'array',
	              items: {
	                type: 'union',
	                refs: ['lex:app.bsky.feed.defs#threadViewPost', 'lex:app.bsky.feed.defs#notFoundPost', 'lex:app.bsky.feed.defs#blockedPost']
	              }
	            }
	          }
	        },
	        notFoundPost: {
	          type: 'object',
	          required: ['uri', 'notFound'],
	          properties: {
	            uri: {
	              type: 'string',
	              format: 'at-uri'
	            },
	            notFound: {
	              type: 'boolean',
	              const: true
	            }
	          }
	        },
	        blockedPost: {
	          type: 'object',
	          required: ['uri', 'blocked', 'author'],
	          properties: {
	            uri: {
	              type: 'string',
	              format: 'at-uri'
	            },
	            blocked: {
	              type: 'boolean',
	              const: true
	            },
	            author: {
	              type: 'ref',
	              ref: 'lex:app.bsky.feed.defs#blockedAuthor'
	            }
	          }
	        },
	        blockedAuthor: {
	          type: 'object',
	          required: ['did'],
	          properties: {
	            did: {
	              type: 'string',
	              format: 'did'
	            },
	            viewer: {
	              type: 'ref',
	              ref: 'lex:app.bsky.actor.defs#viewerState'
	            }
	          }
	        },
	        generatorView: {
	          type: 'object',
	          required: ['uri', 'cid', 'did', 'creator', 'displayName', 'indexedAt'],
	          properties: {
	            uri: {
	              type: 'string',
	              format: 'at-uri'
	            },
	            cid: {
	              type: 'string',
	              format: 'cid'
	            },
	            did: {
	              type: 'string',
	              format: 'did'
	            },
	            creator: {
	              type: 'ref',
	              ref: 'lex:app.bsky.actor.defs#profileView'
	            },
	            displayName: {
	              type: 'string'
	            },
	            description: {
	              type: 'string',
	              maxGraphemes: 300,
	              maxLength: 3000
	            },
	            descriptionFacets: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:app.bsky.richtext.facet'
	              }
	            },
	            avatar: {
	              type: 'string',
	              format: 'uri'
	            },
	            likeCount: {
	              type: 'integer',
	              minimum: 0
	            },
	            acceptsInteractions: {
	              type: 'boolean'
	            },
	            labels: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:com.atproto.label.defs#label'
	              }
	            },
	            viewer: {
	              type: 'ref',
	              ref: 'lex:app.bsky.feed.defs#generatorViewerState'
	            },
	            indexedAt: {
	              type: 'string',
	              format: 'datetime'
	            }
	          }
	        },
	        generatorViewerState: {
	          type: 'object',
	          properties: {
	            like: {
	              type: 'string',
	              format: 'at-uri'
	            }
	          }
	        },
	        skeletonFeedPost: {
	          type: 'object',
	          required: ['post'],
	          properties: {
	            post: {
	              type: 'string',
	              format: 'at-uri'
	            },
	            reason: {
	              type: 'union',
	              refs: ['lex:app.bsky.feed.defs#skeletonReasonRepost']
	            },
	            feedContext: {
	              type: 'string',
	              description: 'Context that will be passed through to client and may be passed to feed generator back alongside interactions.',
	              maxLength: 2000
	            }
	          }
	        },
	        skeletonReasonRepost: {
	          type: 'object',
	          required: ['repost'],
	          properties: {
	            repost: {
	              type: 'string',
	              format: 'at-uri'
	            }
	          }
	        },
	        threadgateView: {
	          type: 'object',
	          properties: {
	            uri: {
	              type: 'string',
	              format: 'at-uri'
	            },
	            cid: {
	              type: 'string',
	              format: 'cid'
	            },
	            record: {
	              type: 'unknown'
	            },
	            lists: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:app.bsky.graph.defs#listViewBasic'
	              }
	            }
	          }
	        },
	        interaction: {
	          type: 'object',
	          properties: {
	            item: {
	              type: 'string',
	              format: 'at-uri'
	            },
	            event: {
	              type: 'string',
	              knownValues: ['app.bsky.feed.defs#requestLess', 'app.bsky.feed.defs#requestMore', 'app.bsky.feed.defs#clickthroughItem', 'app.bsky.feed.defs#clickthroughAuthor', 'app.bsky.feed.defs#clickthroughReposter', 'app.bsky.feed.defs#clickthroughEmbed', 'app.bsky.feed.defs#interactionSeen', 'app.bsky.feed.defs#interactionLike', 'app.bsky.feed.defs#interactionRepost', 'app.bsky.feed.defs#interactionReply', 'app.bsky.feed.defs#interactionQuote', 'app.bsky.feed.defs#interactionShare']
	            },
	            feedContext: {
	              type: 'string',
	              description: 'Context on a feed item that was orginally supplied by the feed generator on getFeedSkeleton.',
	              maxLength: 2000
	            }
	          }
	        },
	        requestLess: {
	          type: 'token',
	          description: 'Request that less content like the given feed item be shown in the feed'
	        },
	        requestMore: {
	          type: 'token',
	          description: 'Request that more content like the given feed item be shown in the feed'
	        },
	        clickthroughItem: {
	          type: 'token',
	          description: 'User clicked through to the feed item'
	        },
	        clickthroughAuthor: {
	          type: 'token',
	          description: 'User clicked through to the author of the feed item'
	        },
	        clickthroughReposter: {
	          type: 'token',
	          description: 'User clicked through to the reposter of the feed item'
	        },
	        clickthroughEmbed: {
	          type: 'token',
	          description: 'User clicked through to the embedded content of the feed item'
	        },
	        interactionSeen: {
	          type: 'token',
	          description: 'Feed item was seen by user'
	        },
	        interactionLike: {
	          type: 'token',
	          description: 'User liked the feed item'
	        },
	        interactionRepost: {
	          type: 'token',
	          description: 'User reposted the feed item'
	        },
	        interactionReply: {
	          type: 'token',
	          description: 'User replied to the feed item'
	        },
	        interactionQuote: {
	          type: 'token',
	          description: 'User quoted the feed item'
	        },
	        interactionShare: {
	          type: 'token',
	          description: 'User shared the feed item'
	        }
	      }
	    },
	    AppBskyFeedDescribeFeedGenerator: {
	      lexicon: 1,
	      id: 'app.bsky.feed.describeFeedGenerator',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get information about a feed generator, including policies and offered feed URIs. Does not require auth; implemented by Feed Generator services (not App View).',
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['did', 'feeds'],
	              properties: {
	                did: {
	                  type: 'string',
	                  format: 'did'
	                },
	                feeds: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.feed.describeFeedGenerator#feed'
	                  }
	                },
	                links: {
	                  type: 'ref',
	                  ref: 'lex:app.bsky.feed.describeFeedGenerator#links'
	                }
	              }
	            }
	          }
	        },
	        feed: {
	          type: 'object',
	          required: ['uri'],
	          properties: {
	            uri: {
	              type: 'string',
	              format: 'at-uri'
	            }
	          }
	        },
	        links: {
	          type: 'object',
	          properties: {
	            privacyPolicy: {
	              type: 'string'
	            },
	            termsOfService: {
	              type: 'string'
	            }
	          }
	        }
	      }
	    },
	    AppBskyFeedGenerator: {
	      lexicon: 1,
	      id: 'app.bsky.feed.generator',
	      defs: {
	        main: {
	          type: 'record',
	          description: 'Record declaring of the existence of a feed generator, and containing metadata about it. The record can exist in any repository.',
	          key: 'any',
	          record: {
	            type: 'object',
	            required: ['did', 'displayName', 'createdAt'],
	            properties: {
	              did: {
	                type: 'string',
	                format: 'did'
	              },
	              displayName: {
	                type: 'string',
	                maxGraphemes: 24,
	                maxLength: 240
	              },
	              description: {
	                type: 'string',
	                maxGraphemes: 300,
	                maxLength: 3000
	              },
	              descriptionFacets: {
	                type: 'array',
	                items: {
	                  type: 'ref',
	                  ref: 'lex:app.bsky.richtext.facet'
	                }
	              },
	              avatar: {
	                type: 'blob',
	                accept: ['image/png', 'image/jpeg'],
	                maxSize: 1000000
	              },
	              acceptsInteractions: {
	                type: 'boolean',
	                description: 'Declaration that a feed accepts feedback interactions from a client through app.bsky.feed.sendInteractions'
	              },
	              labels: {
	                type: 'union',
	                description: 'Self-label values',
	                refs: ['lex:com.atproto.label.defs#selfLabels']
	              },
	              createdAt: {
	                type: 'string',
	                format: 'datetime'
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyFeedGetActorFeeds: {
	      lexicon: 1,
	      id: 'app.bsky.feed.getActorFeeds',
	      defs: {
	        main: {
	          type: 'query',
	          description: "Get a list of feeds (feed generator records) created by the actor (in the actor's repo).",
	          parameters: {
	            type: 'params',
	            required: ['actor'],
	            properties: {
	              actor: {
	                type: 'string',
	                format: 'at-identifier'
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['feeds'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                feeds: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.feed.defs#generatorView'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyFeedGetActorLikes: {
	      lexicon: 1,
	      id: 'app.bsky.feed.getActorLikes',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get a list of posts liked by an actor. Does not require auth.',
	          parameters: {
	            type: 'params',
	            required: ['actor'],
	            properties: {
	              actor: {
	                type: 'string',
	                format: 'at-identifier'
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['feed'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                feed: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.feed.defs#feedViewPost'
	                  }
	                }
	              }
	            }
	          },
	          errors: [{
	            name: 'BlockedActor'
	          }, {
	            name: 'BlockedByActor'
	          }]
	        }
	      }
	    },
	    AppBskyFeedGetAuthorFeed: {
	      lexicon: 1,
	      id: 'app.bsky.feed.getAuthorFeed',
	      defs: {
	        main: {
	          type: 'query',
	          description: "Get a view of an actor's 'author feed' (post and reposts by the author). Does not require auth.",
	          parameters: {
	            type: 'params',
	            required: ['actor'],
	            properties: {
	              actor: {
	                type: 'string',
	                format: 'at-identifier'
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50
	              },
	              cursor: {
	                type: 'string'
	              },
	              filter: {
	                type: 'string',
	                description: 'Combinations of post/repost types to include in response.',
	                knownValues: ['posts_with_replies', 'posts_no_replies', 'posts_with_media', 'posts_and_author_threads'],
	                default: 'posts_with_replies'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['feed'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                feed: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.feed.defs#feedViewPost'
	                  }
	                }
	              }
	            }
	          },
	          errors: [{
	            name: 'BlockedActor'
	          }, {
	            name: 'BlockedByActor'
	          }]
	        }
	      }
	    },
	    AppBskyFeedGetFeed: {
	      lexicon: 1,
	      id: 'app.bsky.feed.getFeed',
	      defs: {
	        main: {
	          type: 'query',
	          description: "Get a hydrated feed from an actor's selected feed generator. Implemented by App View.",
	          parameters: {
	            type: 'params',
	            required: ['feed'],
	            properties: {
	              feed: {
	                type: 'string',
	                format: 'at-uri'
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['feed'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                feed: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.feed.defs#feedViewPost'
	                  }
	                }
	              }
	            }
	          },
	          errors: [{
	            name: 'UnknownFeed'
	          }]
	        }
	      }
	    },
	    AppBskyFeedGetFeedGenerator: {
	      lexicon: 1,
	      id: 'app.bsky.feed.getFeedGenerator',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get information about a feed generator. Implemented by AppView.',
	          parameters: {
	            type: 'params',
	            required: ['feed'],
	            properties: {
	              feed: {
	                type: 'string',
	                format: 'at-uri',
	                description: 'AT-URI of the feed generator record.'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['view', 'isOnline', 'isValid'],
	              properties: {
	                view: {
	                  type: 'ref',
	                  ref: 'lex:app.bsky.feed.defs#generatorView'
	                },
	                isOnline: {
	                  type: 'boolean',
	                  description: 'Indicates whether the feed generator service has been online recently, or else seems to be inactive.'
	                },
	                isValid: {
	                  type: 'boolean',
	                  description: 'Indicates whether the feed generator service is compatible with the record declaration.'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyFeedGetFeedGenerators: {
	      lexicon: 1,
	      id: 'app.bsky.feed.getFeedGenerators',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get information about a list of feed generators.',
	          parameters: {
	            type: 'params',
	            required: ['feeds'],
	            properties: {
	              feeds: {
	                type: 'array',
	                items: {
	                  type: 'string',
	                  format: 'at-uri'
	                }
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['feeds'],
	              properties: {
	                feeds: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.feed.defs#generatorView'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyFeedGetFeedSkeleton: {
	      lexicon: 1,
	      id: 'app.bsky.feed.getFeedSkeleton',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get a skeleton of a feed provided by a feed generator. Auth is optional, depending on provider requirements, and provides the DID of the requester. Implemented by Feed Generator Service.',
	          parameters: {
	            type: 'params',
	            required: ['feed'],
	            properties: {
	              feed: {
	                type: 'string',
	                format: 'at-uri',
	                description: 'Reference to feed generator record describing the specific feed being requested.'
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['feed'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                feed: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.feed.defs#skeletonFeedPost'
	                  }
	                }
	              }
	            }
	          },
	          errors: [{
	            name: 'UnknownFeed'
	          }]
	        }
	      }
	    },
	    AppBskyFeedGetLikes: {
	      lexicon: 1,
	      id: 'app.bsky.feed.getLikes',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get like records which reference a subject (by AT-URI and CID).',
	          parameters: {
	            type: 'params',
	            required: ['uri'],
	            properties: {
	              uri: {
	                type: 'string',
	                format: 'at-uri',
	                description: 'AT-URI of the subject (eg, a post record).'
	              },
	              cid: {
	                type: 'string',
	                format: 'cid',
	                description: 'CID of the subject record (aka, specific version of record), to filter likes.'
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['uri', 'likes'],
	              properties: {
	                uri: {
	                  type: 'string',
	                  format: 'at-uri'
	                },
	                cid: {
	                  type: 'string',
	                  format: 'cid'
	                },
	                cursor: {
	                  type: 'string'
	                },
	                likes: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.feed.getLikes#like'
	                  }
	                }
	              }
	            }
	          }
	        },
	        like: {
	          type: 'object',
	          required: ['indexedAt', 'createdAt', 'actor'],
	          properties: {
	            indexedAt: {
	              type: 'string',
	              format: 'datetime'
	            },
	            createdAt: {
	              type: 'string',
	              format: 'datetime'
	            },
	            actor: {
	              type: 'ref',
	              ref: 'lex:app.bsky.actor.defs#profileView'
	            }
	          }
	        }
	      }
	    },
	    AppBskyFeedGetListFeed: {
	      lexicon: 1,
	      id: 'app.bsky.feed.getListFeed',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.',
	          parameters: {
	            type: 'params',
	            required: ['list'],
	            properties: {
	              list: {
	                type: 'string',
	                format: 'at-uri',
	                description: 'Reference (AT-URI) to the list record.'
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['feed'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                feed: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.feed.defs#feedViewPost'
	                  }
	                }
	              }
	            }
	          },
	          errors: [{
	            name: 'UnknownList'
	          }]
	        }
	      }
	    },
	    AppBskyFeedGetPostThread: {
	      lexicon: 1,
	      id: 'app.bsky.feed.getPostThread',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.',
	          parameters: {
	            type: 'params',
	            required: ['uri'],
	            properties: {
	              uri: {
	                type: 'string',
	                format: 'at-uri',
	                description: 'Reference (AT-URI) to post record.'
	              },
	              depth: {
	                type: 'integer',
	                description: 'How many levels of reply depth should be included in response.',
	                default: 6,
	                minimum: 0,
	                maximum: 1000
	              },
	              parentHeight: {
	                type: 'integer',
	                description: 'How many levels of parent (and grandparent, etc) post to include.',
	                default: 80,
	                minimum: 0,
	                maximum: 1000
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['thread'],
	              properties: {
	                thread: {
	                  type: 'union',
	                  refs: ['lex:app.bsky.feed.defs#threadViewPost', 'lex:app.bsky.feed.defs#notFoundPost', 'lex:app.bsky.feed.defs#blockedPost']
	                }
	              }
	            }
	          },
	          errors: [{
	            name: 'NotFound'
	          }]
	        }
	      }
	    },
	    AppBskyFeedGetPosts: {
	      lexicon: 1,
	      id: 'app.bsky.feed.getPosts',
	      defs: {
	        main: {
	          type: 'query',
	          description: "Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as 'hydrating' a 'feed skeleton'.",
	          parameters: {
	            type: 'params',
	            required: ['uris'],
	            properties: {
	              uris: {
	                type: 'array',
	                description: 'List of post AT-URIs to return hydrated views for.',
	                items: {
	                  type: 'string',
	                  format: 'at-uri'
	                },
	                maxLength: 25
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['posts'],
	              properties: {
	                posts: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.feed.defs#postView'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyFeedGetRepostedBy: {
	      lexicon: 1,
	      id: 'app.bsky.feed.getRepostedBy',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get a list of reposts for a given post.',
	          parameters: {
	            type: 'params',
	            required: ['uri'],
	            properties: {
	              uri: {
	                type: 'string',
	                format: 'at-uri',
	                description: 'Reference (AT-URI) of post record'
	              },
	              cid: {
	                type: 'string',
	                format: 'cid',
	                description: 'If supplied, filters to reposts of specific version (by CID) of the post record.'
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['uri', 'repostedBy'],
	              properties: {
	                uri: {
	                  type: 'string',
	                  format: 'at-uri'
	                },
	                cid: {
	                  type: 'string',
	                  format: 'cid'
	                },
	                cursor: {
	                  type: 'string'
	                },
	                repostedBy: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.actor.defs#profileView'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyFeedGetSuggestedFeeds: {
	      lexicon: 1,
	      id: 'app.bsky.feed.getSuggestedFeeds',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get a list of suggested feeds (feed generators) for the requesting account.',
	          parameters: {
	            type: 'params',
	            properties: {
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['feeds'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                feeds: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.feed.defs#generatorView'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyFeedGetTimeline: {
	      lexicon: 1,
	      id: 'app.bsky.feed.getTimeline',
	      defs: {
	        main: {
	          type: 'query',
	          description: "Get a view of the requesting account's home timeline. This is expected to be some form of reverse-chronological feed.",
	          parameters: {
	            type: 'params',
	            properties: {
	              algorithm: {
	                type: 'string',
	                description: "Variant 'algorithm' for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism."
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['feed'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                feed: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.feed.defs#feedViewPost'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyFeedLike: {
	      lexicon: 1,
	      id: 'app.bsky.feed.like',
	      defs: {
	        main: {
	          type: 'record',
	          description: "Record declaring a 'like' of a piece of subject content.",
	          key: 'tid',
	          record: {
	            type: 'object',
	            required: ['subject', 'createdAt'],
	            properties: {
	              subject: {
	                type: 'ref',
	                ref: 'lex:com.atproto.repo.strongRef'
	              },
	              createdAt: {
	                type: 'string',
	                format: 'datetime'
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyFeedPost: {
	      lexicon: 1,
	      id: 'app.bsky.feed.post',
	      defs: {
	        main: {
	          type: 'record',
	          description: 'Record containing a Bluesky post.',
	          key: 'tid',
	          record: {
	            type: 'object',
	            required: ['text', 'createdAt'],
	            properties: {
	              text: {
	                type: 'string',
	                maxLength: 3000,
	                maxGraphemes: 300,
	                description: 'The primary post content. May be an empty string, if there are embeds.'
	              },
	              entities: {
	                type: 'array',
	                description: 'DEPRECATED: replaced by app.bsky.richtext.facet.',
	                items: {
	                  type: 'ref',
	                  ref: 'lex:app.bsky.feed.post#entity'
	                }
	              },
	              facets: {
	                type: 'array',
	                description: 'Annotations of text (mentions, URLs, hashtags, etc)',
	                items: {
	                  type: 'ref',
	                  ref: 'lex:app.bsky.richtext.facet'
	                }
	              },
	              reply: {
	                type: 'ref',
	                ref: 'lex:app.bsky.feed.post#replyRef'
	              },
	              embed: {
	                type: 'union',
	                refs: ['lex:app.bsky.embed.images', 'lex:app.bsky.embed.external', 'lex:app.bsky.embed.record', 'lex:app.bsky.embed.recordWithMedia']
	              },
	              langs: {
	                type: 'array',
	                description: 'Indicates human language of post primary text content.',
	                maxLength: 3,
	                items: {
	                  type: 'string',
	                  format: 'language'
	                }
	              },
	              labels: {
	                type: 'union',
	                description: 'Self-label values for this post. Effectively content warnings.',
	                refs: ['lex:com.atproto.label.defs#selfLabels']
	              },
	              tags: {
	                type: 'array',
	                description: 'Additional hashtags, in addition to any included in post text and facets.',
	                maxLength: 8,
	                items: {
	                  type: 'string',
	                  maxLength: 640,
	                  maxGraphemes: 64
	                }
	              },
	              createdAt: {
	                type: 'string',
	                format: 'datetime',
	                description: 'Client-declared timestamp when this post was originally created.'
	              }
	            }
	          }
	        },
	        replyRef: {
	          type: 'object',
	          required: ['root', 'parent'],
	          properties: {
	            root: {
	              type: 'ref',
	              ref: 'lex:com.atproto.repo.strongRef'
	            },
	            parent: {
	              type: 'ref',
	              ref: 'lex:com.atproto.repo.strongRef'
	            }
	          }
	        },
	        entity: {
	          type: 'object',
	          description: 'Deprecated: use facets instead.',
	          required: ['index', 'type', 'value'],
	          properties: {
	            index: {
	              type: 'ref',
	              ref: 'lex:app.bsky.feed.post#textSlice'
	            },
	            type: {
	              type: 'string',
	              description: "Expected values are 'mention' and 'link'."
	            },
	            value: {
	              type: 'string'
	            }
	          }
	        },
	        textSlice: {
	          type: 'object',
	          description: 'Deprecated. Use app.bsky.richtext instead -- A text segment. Start is inclusive, end is exclusive. Indices are for utf16-encoded strings.',
	          required: ['start', 'end'],
	          properties: {
	            start: {
	              type: 'integer',
	              minimum: 0
	            },
	            end: {
	              type: 'integer',
	              minimum: 0
	            }
	          }
	        }
	      }
	    },
	    AppBskyFeedRepost: {
	      lexicon: 1,
	      id: 'app.bsky.feed.repost',
	      defs: {
	        main: {
	          description: "Record representing a 'repost' of an existing Bluesky post.",
	          type: 'record',
	          key: 'tid',
	          record: {
	            type: 'object',
	            required: ['subject', 'createdAt'],
	            properties: {
	              subject: {
	                type: 'ref',
	                ref: 'lex:com.atproto.repo.strongRef'
	              },
	              createdAt: {
	                type: 'string',
	                format: 'datetime'
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyFeedSearchPosts: {
	      lexicon: 1,
	      id: 'app.bsky.feed.searchPosts',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Find posts matching search criteria, returning views of those posts.',
	          parameters: {
	            type: 'params',
	            required: ['q'],
	            properties: {
	              q: {
	                type: 'string',
	                description: 'Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.'
	              },
	              sort: {
	                type: 'string',
	                knownValues: ['top', 'latest'],
	                default: 'latest',
	                description: 'Specifies the ranking order of results.'
	              },
	              since: {
	                type: 'string',
	                description: "Filter results for posts after the indicated datetime (inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYYY-MM-DD)."
	              },
	              until: {
	                type: 'string',
	                description: "Filter results for posts before the indicated datetime (not inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYY-MM-DD)."
	              },
	              mentions: {
	                type: 'string',
	                format: 'at-identifier',
	                description: 'Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions.'
	              },
	              author: {
	                type: 'string',
	                format: 'at-identifier',
	                description: 'Filter to posts by the given account. Handles are resolved to DID before query-time.'
	              },
	              lang: {
	                type: 'string',
	                format: 'language',
	                description: 'Filter to posts in the given language. Expected to be based on post language field, though server may override language detection.'
	              },
	              domain: {
	                type: 'string',
	                description: 'Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization.'
	              },
	              url: {
	                type: 'string',
	                format: 'uri',
	                description: 'Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching.'
	              },
	              tag: {
	                type: 'array',
	                items: {
	                  type: 'string',
	                  maxLength: 640,
	                  maxGraphemes: 64
	                },
	                description: "Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with 'AND' matching."
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 25
	              },
	              cursor: {
	                type: 'string',
	                description: 'Optional pagination mechanism; may not necessarily allow scrolling through entire result set.'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['posts'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                hitsTotal: {
	                  type: 'integer',
	                  description: 'Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.'
	                },
	                posts: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.feed.defs#postView'
	                  }
	                }
	              }
	            }
	          },
	          errors: [{
	            name: 'BadQueryString'
	          }]
	        }
	      }
	    },
	    AppBskyFeedSendInteractions: {
	      lexicon: 1,
	      id: 'app.bsky.feed.sendInteractions',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Send information about interactions with feed items back to the feed generator that served them.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['interactions'],
	              properties: {
	                interactions: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.feed.defs#interaction'
	                  }
	                }
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              properties: {}
	            }
	          }
	        }
	      }
	    },
	    AppBskyFeedThreadgate: {
	      lexicon: 1,
	      id: 'app.bsky.feed.threadgate',
	      defs: {
	        main: {
	          type: 'record',
	          key: 'tid',
	          description: "Record defining interaction gating rules for a thread (aka, reply controls). The record key (rkey) of the threadgate record must match the record key of the thread's root post, and that record must be in the same repository..",
	          record: {
	            type: 'object',
	            required: ['post', 'createdAt'],
	            properties: {
	              post: {
	                type: 'string',
	                format: 'at-uri',
	                description: 'Reference (AT-URI) to the post record.'
	              },
	              allow: {
	                type: 'array',
	                maxLength: 5,
	                items: {
	                  type: 'union',
	                  refs: ['lex:app.bsky.feed.threadgate#mentionRule', 'lex:app.bsky.feed.threadgate#followingRule', 'lex:app.bsky.feed.threadgate#listRule']
	                }
	              },
	              createdAt: {
	                type: 'string',
	                format: 'datetime'
	              }
	            }
	          }
	        },
	        mentionRule: {
	          type: 'object',
	          description: 'Allow replies from actors mentioned in your post.',
	          properties: {}
	        },
	        followingRule: {
	          type: 'object',
	          description: 'Allow replies from actors you follow.',
	          properties: {}
	        },
	        listRule: {
	          type: 'object',
	          description: 'Allow replies from actors on a list.',
	          required: ['list'],
	          properties: {
	            list: {
	              type: 'string',
	              format: 'at-uri'
	            }
	          }
	        }
	      }
	    },
	    AppBskyGraphBlock: {
	      lexicon: 1,
	      id: 'app.bsky.graph.block',
	      defs: {
	        main: {
	          type: 'record',
	          description: "Record declaring a 'block' relationship against another account. NOTE: blocks are public in Bluesky; see blog posts for details.",
	          key: 'tid',
	          record: {
	            type: 'object',
	            required: ['subject', 'createdAt'],
	            properties: {
	              subject: {
	                type: 'string',
	                format: 'did',
	                description: 'DID of the account to be blocked.'
	              },
	              createdAt: {
	                type: 'string',
	                format: 'datetime'
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyGraphDefs: {
	      lexicon: 1,
	      id: 'app.bsky.graph.defs',
	      defs: {
	        listViewBasic: {
	          type: 'object',
	          required: ['uri', 'cid', 'name', 'purpose'],
	          properties: {
	            uri: {
	              type: 'string',
	              format: 'at-uri'
	            },
	            cid: {
	              type: 'string',
	              format: 'cid'
	            },
	            name: {
	              type: 'string',
	              maxLength: 64,
	              minLength: 1
	            },
	            purpose: {
	              type: 'ref',
	              ref: 'lex:app.bsky.graph.defs#listPurpose'
	            },
	            avatar: {
	              type: 'string',
	              format: 'uri'
	            },
	            labels: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:com.atproto.label.defs#label'
	              }
	            },
	            viewer: {
	              type: 'ref',
	              ref: 'lex:app.bsky.graph.defs#listViewerState'
	            },
	            indexedAt: {
	              type: 'string',
	              format: 'datetime'
	            }
	          }
	        },
	        listView: {
	          type: 'object',
	          required: ['uri', 'cid', 'creator', 'name', 'purpose', 'indexedAt'],
	          properties: {
	            uri: {
	              type: 'string',
	              format: 'at-uri'
	            },
	            cid: {
	              type: 'string',
	              format: 'cid'
	            },
	            creator: {
	              type: 'ref',
	              ref: 'lex:app.bsky.actor.defs#profileView'
	            },
	            name: {
	              type: 'string',
	              maxLength: 64,
	              minLength: 1
	            },
	            purpose: {
	              type: 'ref',
	              ref: 'lex:app.bsky.graph.defs#listPurpose'
	            },
	            description: {
	              type: 'string',
	              maxGraphemes: 300,
	              maxLength: 3000
	            },
	            descriptionFacets: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:app.bsky.richtext.facet'
	              }
	            },
	            avatar: {
	              type: 'string',
	              format: 'uri'
	            },
	            labels: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:com.atproto.label.defs#label'
	              }
	            },
	            viewer: {
	              type: 'ref',
	              ref: 'lex:app.bsky.graph.defs#listViewerState'
	            },
	            indexedAt: {
	              type: 'string',
	              format: 'datetime'
	            }
	          }
	        },
	        listItemView: {
	          type: 'object',
	          required: ['uri', 'subject'],
	          properties: {
	            uri: {
	              type: 'string',
	              format: 'at-uri'
	            },
	            subject: {
	              type: 'ref',
	              ref: 'lex:app.bsky.actor.defs#profileView'
	            }
	          }
	        },
	        listPurpose: {
	          type: 'string',
	          knownValues: ['app.bsky.graph.defs#modlist', 'app.bsky.graph.defs#curatelist']
	        },
	        modlist: {
	          type: 'token',
	          description: 'A list of actors to apply an aggregate moderation action (mute/block) on.'
	        },
	        curatelist: {
	          type: 'token',
	          description: 'A list of actors used for curation purposes such as list feeds or interaction gating.'
	        },
	        listViewerState: {
	          type: 'object',
	          properties: {
	            muted: {
	              type: 'boolean'
	            },
	            blocked: {
	              type: 'string',
	              format: 'at-uri'
	            }
	          }
	        },
	        notFoundActor: {
	          type: 'object',
	          description: 'indicates that a handle or DID could not be resolved',
	          required: ['actor', 'notFound'],
	          properties: {
	            actor: {
	              type: 'string',
	              format: 'at-identifier'
	            },
	            notFound: {
	              type: 'boolean',
	              const: true
	            }
	          }
	        },
	        relationship: {
	          type: 'object',
	          description: 'lists the bi-directional graph relationships between one actor (not indicated in the object), and the target actors (the DID included in the object)',
	          required: ['did'],
	          properties: {
	            did: {
	              type: 'string',
	              format: 'did'
	            },
	            following: {
	              type: 'string',
	              format: 'at-uri',
	              description: 'if the actor follows this DID, this is the AT-URI of the follow record'
	            },
	            followedBy: {
	              type: 'string',
	              format: 'at-uri',
	              description: 'if the actor is followed by this DID, contains the AT-URI of the follow record'
	            }
	          }
	        }
	      }
	    },
	    AppBskyGraphFollow: {
	      lexicon: 1,
	      id: 'app.bsky.graph.follow',
	      defs: {
	        main: {
	          type: 'record',
	          description: "Record declaring a social 'follow' relationship of another account. Duplicate follows will be ignored by the AppView.",
	          key: 'tid',
	          record: {
	            type: 'object',
	            required: ['subject', 'createdAt'],
	            properties: {
	              subject: {
	                type: 'string',
	                format: 'did'
	              },
	              createdAt: {
	                type: 'string',
	                format: 'datetime'
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyGraphGetBlocks: {
	      lexicon: 1,
	      id: 'app.bsky.graph.getBlocks',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Enumerates which accounts the requesting account is currently blocking. Requires auth.',
	          parameters: {
	            type: 'params',
	            properties: {
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['blocks'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                blocks: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.actor.defs#profileView'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyGraphGetFollowers: {
	      lexicon: 1,
	      id: 'app.bsky.graph.getFollowers',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Enumerates accounts which follow a specified account (actor).',
	          parameters: {
	            type: 'params',
	            required: ['actor'],
	            properties: {
	              actor: {
	                type: 'string',
	                format: 'at-identifier'
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['subject', 'followers'],
	              properties: {
	                subject: {
	                  type: 'ref',
	                  ref: 'lex:app.bsky.actor.defs#profileView'
	                },
	                cursor: {
	                  type: 'string'
	                },
	                followers: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.actor.defs#profileView'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyGraphGetFollows: {
	      lexicon: 1,
	      id: 'app.bsky.graph.getFollows',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Enumerates accounts which a specified account (actor) follows.',
	          parameters: {
	            type: 'params',
	            required: ['actor'],
	            properties: {
	              actor: {
	                type: 'string',
	                format: 'at-identifier'
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['subject', 'follows'],
	              properties: {
	                subject: {
	                  type: 'ref',
	                  ref: 'lex:app.bsky.actor.defs#profileView'
	                },
	                cursor: {
	                  type: 'string'
	                },
	                follows: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.actor.defs#profileView'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyGraphGetList: {
	      lexicon: 1,
	      id: 'app.bsky.graph.getList',
	      defs: {
	        main: {
	          type: 'query',
	          description: "Gets a 'view' (with additional context) of a specified list.",
	          parameters: {
	            type: 'params',
	            required: ['list'],
	            properties: {
	              list: {
	                type: 'string',
	                format: 'at-uri',
	                description: 'Reference (AT-URI) of the list record to hydrate.'
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['list', 'items'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                list: {
	                  type: 'ref',
	                  ref: 'lex:app.bsky.graph.defs#listView'
	                },
	                items: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.graph.defs#listItemView'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyGraphGetListBlocks: {
	      lexicon: 1,
	      id: 'app.bsky.graph.getListBlocks',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get mod lists that the requesting account (actor) is blocking. Requires auth.',
	          parameters: {
	            type: 'params',
	            properties: {
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['lists'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                lists: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.graph.defs#listView'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyGraphGetListMutes: {
	      lexicon: 1,
	      id: 'app.bsky.graph.getListMutes',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Enumerates mod lists that the requesting account (actor) currently has muted. Requires auth.',
	          parameters: {
	            type: 'params',
	            properties: {
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['lists'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                lists: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.graph.defs#listView'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyGraphGetLists: {
	      lexicon: 1,
	      id: 'app.bsky.graph.getLists',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Enumerates the lists created by a specified account (actor).',
	          parameters: {
	            type: 'params',
	            required: ['actor'],
	            properties: {
	              actor: {
	                type: 'string',
	                format: 'at-identifier',
	                description: 'The account (actor) to enumerate lists from.'
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['lists'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                lists: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.graph.defs#listView'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyGraphGetMutes: {
	      lexicon: 1,
	      id: 'app.bsky.graph.getMutes',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Enumerates accounts that the requesting account (actor) currently has muted. Requires auth.',
	          parameters: {
	            type: 'params',
	            properties: {
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['mutes'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                mutes: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.actor.defs#profileView'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyGraphGetRelationships: {
	      lexicon: 1,
	      id: 'app.bsky.graph.getRelationships',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Enumerates public relationships between one account, and a list of other accounts. Does not require auth.',
	          parameters: {
	            type: 'params',
	            required: ['actor'],
	            properties: {
	              actor: {
	                type: 'string',
	                format: 'at-identifier',
	                description: 'Primary account requesting relationships for.'
	              },
	              others: {
	                type: 'array',
	                description: "List of 'other' accounts to be related back to the primary.",
	                maxLength: 30,
	                items: {
	                  type: 'string',
	                  format: 'at-identifier'
	                }
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['relationships'],
	              properties: {
	                actor: {
	                  type: 'string',
	                  format: 'did'
	                },
	                relationships: {
	                  type: 'array',
	                  items: {
	                    type: 'union',
	                    refs: ['lex:app.bsky.graph.defs#relationship', 'lex:app.bsky.graph.defs#notFoundActor']
	                  }
	                }
	              }
	            }
	          },
	          errors: [{
	            name: 'ActorNotFound',
	            description: 'the primary actor at-identifier could not be resolved'
	          }]
	        }
	      }
	    },
	    AppBskyGraphGetSuggestedFollowsByActor: {
	      lexicon: 1,
	      id: 'app.bsky.graph.getSuggestedFollowsByActor',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Enumerates follows similar to a given account (actor). Expected use is to recommend additional accounts immediately after following one account.',
	          parameters: {
	            type: 'params',
	            required: ['actor'],
	            properties: {
	              actor: {
	                type: 'string',
	                format: 'at-identifier'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['suggestions'],
	              properties: {
	                suggestions: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.actor.defs#profileView'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyGraphList: {
	      lexicon: 1,
	      id: 'app.bsky.graph.list',
	      defs: {
	        main: {
	          type: 'record',
	          description: 'Record representing a list of accounts (actors). Scope includes both moderation-oriented lists and curration-oriented lists.',
	          key: 'tid',
	          record: {
	            type: 'object',
	            required: ['name', 'purpose', 'createdAt'],
	            properties: {
	              purpose: {
	                type: 'ref',
	                description: 'Defines the purpose of the list (aka, moderation-oriented or curration-oriented)',
	                ref: 'lex:app.bsky.graph.defs#listPurpose'
	              },
	              name: {
	                type: 'string',
	                maxLength: 64,
	                minLength: 1,
	                description: 'Display name for list; can not be empty.'
	              },
	              description: {
	                type: 'string',
	                maxGraphemes: 300,
	                maxLength: 3000
	              },
	              descriptionFacets: {
	                type: 'array',
	                items: {
	                  type: 'ref',
	                  ref: 'lex:app.bsky.richtext.facet'
	                }
	              },
	              avatar: {
	                type: 'blob',
	                accept: ['image/png', 'image/jpeg'],
	                maxSize: 1000000
	              },
	              labels: {
	                type: 'union',
	                refs: ['lex:com.atproto.label.defs#selfLabels']
	              },
	              createdAt: {
	                type: 'string',
	                format: 'datetime'
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyGraphListblock: {
	      lexicon: 1,
	      id: 'app.bsky.graph.listblock',
	      defs: {
	        main: {
	          type: 'record',
	          description: 'Record representing a block relationship against an entire an entire list of accounts (actors).',
	          key: 'tid',
	          record: {
	            type: 'object',
	            required: ['subject', 'createdAt'],
	            properties: {
	              subject: {
	                type: 'string',
	                format: 'at-uri',
	                description: 'Reference (AT-URI) to the mod list record.'
	              },
	              createdAt: {
	                type: 'string',
	                format: 'datetime'
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyGraphListitem: {
	      lexicon: 1,
	      id: 'app.bsky.graph.listitem',
	      defs: {
	        main: {
	          type: 'record',
	          description: "Record representing an account's inclusion on a specific list. The AppView will ignore duplicate listitem records.",
	          key: 'tid',
	          record: {
	            type: 'object',
	            required: ['subject', 'list', 'createdAt'],
	            properties: {
	              subject: {
	                type: 'string',
	                format: 'did',
	                description: 'The account which is included on the list.'
	              },
	              list: {
	                type: 'string',
	                format: 'at-uri',
	                description: 'Reference (AT-URI) to the list record (app.bsky.graph.list).'
	              },
	              createdAt: {
	                type: 'string',
	                format: 'datetime'
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyGraphMuteActor: {
	      lexicon: 1,
	      id: 'app.bsky.graph.muteActor',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Creates a mute relationship for the specified account. Mutes are private in Bluesky. Requires auth.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['actor'],
	              properties: {
	                actor: {
	                  type: 'string',
	                  format: 'at-identifier'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyGraphMuteActorList: {
	      lexicon: 1,
	      id: 'app.bsky.graph.muteActorList',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Creates a mute relationship for the specified list of accounts. Mutes are private in Bluesky. Requires auth.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['list'],
	              properties: {
	                list: {
	                  type: 'string',
	                  format: 'at-uri'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyGraphUnmuteActor: {
	      lexicon: 1,
	      id: 'app.bsky.graph.unmuteActor',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Unmutes the specified account. Requires auth.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['actor'],
	              properties: {
	                actor: {
	                  type: 'string',
	                  format: 'at-identifier'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyGraphUnmuteActorList: {
	      lexicon: 1,
	      id: 'app.bsky.graph.unmuteActorList',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Unmutes the specified list of accounts. Requires auth.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['list'],
	              properties: {
	                list: {
	                  type: 'string',
	                  format: 'at-uri'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyLabelerDefs: {
	      lexicon: 1,
	      id: 'app.bsky.labeler.defs',
	      defs: {
	        labelerView: {
	          type: 'object',
	          required: ['uri', 'cid', 'creator', 'indexedAt'],
	          properties: {
	            uri: {
	              type: 'string',
	              format: 'at-uri'
	            },
	            cid: {
	              type: 'string',
	              format: 'cid'
	            },
	            creator: {
	              type: 'ref',
	              ref: 'lex:app.bsky.actor.defs#profileView'
	            },
	            likeCount: {
	              type: 'integer',
	              minimum: 0
	            },
	            viewer: {
	              type: 'ref',
	              ref: 'lex:app.bsky.labeler.defs#labelerViewerState'
	            },
	            indexedAt: {
	              type: 'string',
	              format: 'datetime'
	            },
	            labels: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:com.atproto.label.defs#label'
	              }
	            }
	          }
	        },
	        labelerViewDetailed: {
	          type: 'object',
	          required: ['uri', 'cid', 'creator', 'policies', 'indexedAt'],
	          properties: {
	            uri: {
	              type: 'string',
	              format: 'at-uri'
	            },
	            cid: {
	              type: 'string',
	              format: 'cid'
	            },
	            creator: {
	              type: 'ref',
	              ref: 'lex:app.bsky.actor.defs#profileView'
	            },
	            policies: {
	              type: 'ref',
	              ref: 'lex:app.bsky.labeler.defs#labelerPolicies'
	            },
	            likeCount: {
	              type: 'integer',
	              minimum: 0
	            },
	            viewer: {
	              type: 'ref',
	              ref: 'lex:app.bsky.labeler.defs#labelerViewerState'
	            },
	            indexedAt: {
	              type: 'string',
	              format: 'datetime'
	            },
	            labels: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:com.atproto.label.defs#label'
	              }
	            }
	          }
	        },
	        labelerViewerState: {
	          type: 'object',
	          properties: {
	            like: {
	              type: 'string',
	              format: 'at-uri'
	            }
	          }
	        },
	        labelerPolicies: {
	          type: 'object',
	          required: ['labelValues'],
	          properties: {
	            labelValues: {
	              type: 'array',
	              description: 'The label values which this labeler publishes. May include global or custom labels.',
	              items: {
	                type: 'ref',
	                ref: 'lex:com.atproto.label.defs#labelValue'
	              }
	            },
	            labelValueDefinitions: {
	              type: 'array',
	              description: 'Label values created by this labeler and scoped exclusively to it. Labels defined here will override global label definitions for this labeler.',
	              items: {
	                type: 'ref',
	                ref: 'lex:com.atproto.label.defs#labelValueDefinition'
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyLabelerGetServices: {
	      lexicon: 1,
	      id: 'app.bsky.labeler.getServices',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get information about a list of labeler services.',
	          parameters: {
	            type: 'params',
	            required: ['dids'],
	            properties: {
	              dids: {
	                type: 'array',
	                items: {
	                  type: 'string',
	                  format: 'did'
	                }
	              },
	              detailed: {
	                type: 'boolean',
	                default: false
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['views'],
	              properties: {
	                views: {
	                  type: 'array',
	                  items: {
	                    type: 'union',
	                    refs: ['lex:app.bsky.labeler.defs#labelerView', 'lex:app.bsky.labeler.defs#labelerViewDetailed']
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyLabelerService: {
	      lexicon: 1,
	      id: 'app.bsky.labeler.service',
	      defs: {
	        main: {
	          type: 'record',
	          description: 'A declaration of the existence of labeler service.',
	          key: 'literal:self',
	          record: {
	            type: 'object',
	            required: ['policies', 'createdAt'],
	            properties: {
	              policies: {
	                type: 'ref',
	                ref: 'lex:app.bsky.labeler.defs#labelerPolicies'
	              },
	              labels: {
	                type: 'union',
	                refs: ['lex:com.atproto.label.defs#selfLabels']
	              },
	              createdAt: {
	                type: 'string',
	                format: 'datetime'
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyNotificationGetUnreadCount: {
	      lexicon: 1,
	      id: 'app.bsky.notification.getUnreadCount',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Count the number of unread notifications for the requesting account. Requires auth.',
	          parameters: {
	            type: 'params',
	            properties: {
	              seenAt: {
	                type: 'string',
	                format: 'datetime'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['count'],
	              properties: {
	                count: {
	                  type: 'integer'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyNotificationListNotifications: {
	      lexicon: 1,
	      id: 'app.bsky.notification.listNotifications',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Enumerate notifications for the requesting account. Requires auth.',
	          parameters: {
	            type: 'params',
	            properties: {
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50
	              },
	              cursor: {
	                type: 'string'
	              },
	              seenAt: {
	                type: 'string',
	                format: 'datetime'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['notifications'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                notifications: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.notification.listNotifications#notification'
	                  }
	                },
	                seenAt: {
	                  type: 'string',
	                  format: 'datetime'
	                }
	              }
	            }
	          }
	        },
	        notification: {
	          type: 'object',
	          required: ['uri', 'cid', 'author', 'reason', 'record', 'isRead', 'indexedAt'],
	          properties: {
	            uri: {
	              type: 'string',
	              format: 'at-uri'
	            },
	            cid: {
	              type: 'string',
	              format: 'cid'
	            },
	            author: {
	              type: 'ref',
	              ref: 'lex:app.bsky.actor.defs#profileView'
	            },
	            reason: {
	              type: 'string',
	              description: "Expected values are 'like', 'repost', 'follow', 'mention', 'reply', and 'quote'.",
	              knownValues: ['like', 'repost', 'follow', 'mention', 'reply', 'quote']
	            },
	            reasonSubject: {
	              type: 'string',
	              format: 'at-uri'
	            },
	            record: {
	              type: 'unknown'
	            },
	            isRead: {
	              type: 'boolean'
	            },
	            indexedAt: {
	              type: 'string',
	              format: 'datetime'
	            },
	            labels: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:com.atproto.label.defs#label'
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyNotificationRegisterPush: {
	      lexicon: 1,
	      id: 'app.bsky.notification.registerPush',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Register to receive push notifications, via a specified service, for the requesting account. Requires auth.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['serviceDid', 'token', 'platform', 'appId'],
	              properties: {
	                serviceDid: {
	                  type: 'string',
	                  format: 'did'
	                },
	                token: {
	                  type: 'string'
	                },
	                platform: {
	                  type: 'string',
	                  knownValues: ['ios', 'android', 'web']
	                },
	                appId: {
	                  type: 'string'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyNotificationUpdateSeen: {
	      lexicon: 1,
	      id: 'app.bsky.notification.updateSeen',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Notify server that the requesting account has seen notifications. Requires auth.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['seenAt'],
	              properties: {
	                seenAt: {
	                  type: 'string',
	                  format: 'datetime'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyRichtextFacet: {
	      lexicon: 1,
	      id: 'app.bsky.richtext.facet',
	      defs: {
	        main: {
	          type: 'object',
	          description: 'Annotation of a sub-string within rich text.',
	          required: ['index', 'features'],
	          properties: {
	            index: {
	              type: 'ref',
	              ref: 'lex:app.bsky.richtext.facet#byteSlice'
	            },
	            features: {
	              type: 'array',
	              items: {
	                type: 'union',
	                refs: ['lex:app.bsky.richtext.facet#mention', 'lex:app.bsky.richtext.facet#link', 'lex:app.bsky.richtext.facet#tag']
	              }
	            }
	          }
	        },
	        mention: {
	          type: 'object',
	          description: "Facet feature for mention of another account. The text is usually a handle, including a '@' prefix, but the facet reference is a DID.",
	          required: ['did'],
	          properties: {
	            did: {
	              type: 'string',
	              format: 'did'
	            }
	          }
	        },
	        link: {
	          type: 'object',
	          description: 'Facet feature for a URL. The text URL may have been simplified or truncated, but the facet reference should be a complete URL.',
	          required: ['uri'],
	          properties: {
	            uri: {
	              type: 'string',
	              format: 'uri'
	            }
	          }
	        },
	        tag: {
	          type: 'object',
	          description: "Facet feature for a hashtag. The text usually includes a '#' prefix, but the facet reference should not (except in the case of 'double hash tags').",
	          required: ['tag'],
	          properties: {
	            tag: {
	              type: 'string',
	              maxLength: 640,
	              maxGraphemes: 64
	            }
	          }
	        },
	        byteSlice: {
	          type: 'object',
	          description: 'Specifies the sub-string range a facet feature applies to. Start index is inclusive, end index is exclusive. Indices are zero-indexed, counting bytes of the UTF-8 encoded text. NOTE: some languages, like Javascript, use UTF-16 or Unicode codepoints for string slice indexing; in these languages, convert to byte arrays before working with facets.',
	          required: ['byteStart', 'byteEnd'],
	          properties: {
	            byteStart: {
	              type: 'integer',
	              minimum: 0
	            },
	            byteEnd: {
	              type: 'integer',
	              minimum: 0
	            }
	          }
	        }
	      }
	    },
	    AppBskyUnspeccedDefs: {
	      lexicon: 1,
	      id: 'app.bsky.unspecced.defs',
	      defs: {
	        skeletonSearchPost: {
	          type: 'object',
	          required: ['uri'],
	          properties: {
	            uri: {
	              type: 'string',
	              format: 'at-uri'
	            }
	          }
	        },
	        skeletonSearchActor: {
	          type: 'object',
	          required: ['did'],
	          properties: {
	            did: {
	              type: 'string',
	              format: 'did'
	            }
	          }
	        }
	      }
	    },
	    AppBskyUnspeccedGetPopularFeedGenerators: {
	      lexicon: 1,
	      id: 'app.bsky.unspecced.getPopularFeedGenerators',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'An unspecced view of globally popular feed generators.',
	          parameters: {
	            type: 'params',
	            properties: {
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50
	              },
	              cursor: {
	                type: 'string'
	              },
	              query: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['feeds'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                feeds: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.feed.defs#generatorView'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyUnspeccedGetSuggestionsSkeleton: {
	      lexicon: 1,
	      id: 'app.bsky.unspecced.getSuggestionsSkeleton',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get a skeleton of suggested actors. Intended to be called and then hydrated through app.bsky.actor.getSuggestions',
	          parameters: {
	            type: 'params',
	            properties: {
	              viewer: {
	                type: 'string',
	                format: 'did',
	                description: 'DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking.'
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['actors'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                actors: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.unspecced.defs#skeletonSearchActor'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    AppBskyUnspeccedGetTaggedSuggestions: {
	      lexicon: 1,
	      id: 'app.bsky.unspecced.getTaggedSuggestions',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get a list of suggestions (feeds and users) tagged with categories',
	          parameters: {
	            type: 'params',
	            properties: {}
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['suggestions'],
	              properties: {
	                suggestions: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.unspecced.getTaggedSuggestions#suggestion'
	                  }
	                }
	              }
	            }
	          }
	        },
	        suggestion: {
	          type: 'object',
	          required: ['tag', 'subjectType', 'subject'],
	          properties: {
	            tag: {
	              type: 'string'
	            },
	            subjectType: {
	              type: 'string',
	              knownValues: ['actor', 'feed']
	            },
	            subject: {
	              type: 'string',
	              format: 'uri'
	            }
	          }
	        }
	      }
	    },
	    AppBskyUnspeccedSearchActorsSkeleton: {
	      lexicon: 1,
	      id: 'app.bsky.unspecced.searchActorsSkeleton',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Backend Actors (profile) search, returns only skeleton.',
	          parameters: {
	            type: 'params',
	            required: ['q'],
	            properties: {
	              q: {
	                type: 'string',
	                description: 'Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. For typeahead search, only simple term match is supported, not full syntax.'
	              },
	              viewer: {
	                type: 'string',
	                format: 'did',
	                description: 'DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking.'
	              },
	              typeahead: {
	                type: 'boolean',
	                description: "If true, acts as fast/simple 'typeahead' query."
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 25
	              },
	              cursor: {
	                type: 'string',
	                description: 'Optional pagination mechanism; may not necessarily allow scrolling through entire result set.'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['actors'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                hitsTotal: {
	                  type: 'integer',
	                  description: 'Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.'
	                },
	                actors: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.unspecced.defs#skeletonSearchActor'
	                  }
	                }
	              }
	            }
	          },
	          errors: [{
	            name: 'BadQueryString'
	          }]
	        }
	      }
	    },
	    AppBskyUnspeccedSearchPostsSkeleton: {
	      lexicon: 1,
	      id: 'app.bsky.unspecced.searchPostsSkeleton',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Backend Posts search, returns only skeleton',
	          parameters: {
	            type: 'params',
	            required: ['q'],
	            properties: {
	              q: {
	                type: 'string',
	                description: 'Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.'
	              },
	              sort: {
	                type: 'string',
	                knownValues: ['top', 'latest'],
	                default: 'latest',
	                description: 'Specifies the ranking order of results.'
	              },
	              since: {
	                type: 'string',
	                description: "Filter results for posts after the indicated datetime (inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYYY-MM-DD)."
	              },
	              until: {
	                type: 'string',
	                description: "Filter results for posts before the indicated datetime (not inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYY-MM-DD)."
	              },
	              mentions: {
	                type: 'string',
	                format: 'at-identifier',
	                description: 'Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions.'
	              },
	              author: {
	                type: 'string',
	                format: 'at-identifier',
	                description: 'Filter to posts by the given account. Handles are resolved to DID before query-time.'
	              },
	              lang: {
	                type: 'string',
	                format: 'language',
	                description: 'Filter to posts in the given language. Expected to be based on post language field, though server may override language detection.'
	              },
	              domain: {
	                type: 'string',
	                description: 'Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization.'
	              },
	              url: {
	                type: 'string',
	                format: 'uri',
	                description: 'Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching.'
	              },
	              tag: {
	                type: 'array',
	                items: {
	                  type: 'string',
	                  maxLength: 640,
	                  maxGraphemes: 64
	                },
	                description: "Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with 'AND' matching."
	              },
	              viewer: {
	                type: 'string',
	                format: 'did',
	                description: "DID of the account making the request (not included for public/unauthenticated queries). Used for 'from:me' queries."
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 25
	              },
	              cursor: {
	                type: 'string',
	                description: 'Optional pagination mechanism; may not necessarily allow scrolling through entire result set.'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['posts'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                hitsTotal: {
	                  type: 'integer',
	                  description: 'Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.'
	                },
	                posts: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:app.bsky.unspecced.defs#skeletonSearchPost'
	                  }
	                }
	              }
	            }
	          },
	          errors: [{
	            name: 'BadQueryString'
	          }]
	        }
	      }
	    },
	    ToolsOzoneCommunicationCreateTemplate: {
	      lexicon: 1,
	      id: 'tools.ozone.communication.createTemplate',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Administrative action to create a new, re-usable communication (email for now) template.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['subject', 'contentMarkdown', 'name'],
	              properties: {
	                name: {
	                  type: 'string',
	                  description: 'Name of the template.'
	                },
	                contentMarkdown: {
	                  type: 'string',
	                  description: 'Content of the template, markdown supported, can contain variable placeholders.'
	                },
	                subject: {
	                  type: 'string',
	                  description: 'Subject of the message, used in emails.'
	                },
	                createdBy: {
	                  type: 'string',
	                  format: 'did',
	                  description: 'DID of the user who is creating the template.'
	                }
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'ref',
	              ref: 'lex:tools.ozone.communication.defs#templateView'
	            }
	          }
	        }
	      }
	    },
	    ToolsOzoneCommunicationDefs: {
	      lexicon: 1,
	      id: 'tools.ozone.communication.defs',
	      defs: {
	        templateView: {
	          type: 'object',
	          required: ['id', 'name', 'contentMarkdown', 'disabled', 'lastUpdatedBy', 'createdAt', 'updatedAt'],
	          properties: {
	            id: {
	              type: 'string'
	            },
	            name: {
	              type: 'string',
	              description: 'Name of the template.'
	            },
	            subject: {
	              type: 'string',
	              description: 'Content of the template, can contain markdown and variable placeholders.'
	            },
	            contentMarkdown: {
	              type: 'string',
	              description: 'Subject of the message, used in emails.'
	            },
	            disabled: {
	              type: 'boolean'
	            },
	            lastUpdatedBy: {
	              type: 'string',
	              format: 'did',
	              description: 'DID of the user who last updated the template.'
	            },
	            createdAt: {
	              type: 'string',
	              format: 'datetime'
	            },
	            updatedAt: {
	              type: 'string',
	              format: 'datetime'
	            }
	          }
	        }
	      }
	    },
	    ToolsOzoneCommunicationDeleteTemplate: {
	      lexicon: 1,
	      id: 'tools.ozone.communication.deleteTemplate',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Delete a communication template.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['id'],
	              properties: {
	                id: {
	                  type: 'string'
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ToolsOzoneCommunicationListTemplates: {
	      lexicon: 1,
	      id: 'tools.ozone.communication.listTemplates',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get list of all communication templates.',
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['communicationTemplates'],
	              properties: {
	                communicationTemplates: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:tools.ozone.communication.defs#templateView'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ToolsOzoneCommunicationUpdateTemplate: {
	      lexicon: 1,
	      id: 'tools.ozone.communication.updateTemplate',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Administrative action to update an existing communication template. Allows passing partial fields to patch specific fields only.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['id'],
	              properties: {
	                id: {
	                  type: 'string',
	                  description: 'ID of the template to be updated.'
	                },
	                name: {
	                  type: 'string',
	                  description: 'Name of the template.'
	                },
	                contentMarkdown: {
	                  type: 'string',
	                  description: 'Content of the template, markdown supported, can contain variable placeholders.'
	                },
	                subject: {
	                  type: 'string',
	                  description: 'Subject of the message, used in emails.'
	                },
	                updatedBy: {
	                  type: 'string',
	                  format: 'did',
	                  description: 'DID of the user who is updating the template.'
	                },
	                disabled: {
	                  type: 'boolean'
	                }
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'ref',
	              ref: 'lex:tools.ozone.communication.defs#templateView'
	            }
	          }
	        }
	      }
	    },
	    ToolsOzoneModerationDefs: {
	      lexicon: 1,
	      id: 'tools.ozone.moderation.defs',
	      defs: {
	        modEventView: {
	          type: 'object',
	          required: ['id', 'event', 'subject', 'subjectBlobCids', 'createdBy', 'createdAt'],
	          properties: {
	            id: {
	              type: 'integer'
	            },
	            event: {
	              type: 'union',
	              refs: ['lex:tools.ozone.moderation.defs#modEventTakedown', 'lex:tools.ozone.moderation.defs#modEventReverseTakedown', 'lex:tools.ozone.moderation.defs#modEventComment', 'lex:tools.ozone.moderation.defs#modEventReport', 'lex:tools.ozone.moderation.defs#modEventLabel', 'lex:tools.ozone.moderation.defs#modEventAcknowledge', 'lex:tools.ozone.moderation.defs#modEventEscalate', 'lex:tools.ozone.moderation.defs#modEventMute', 'lex:tools.ozone.moderation.defs#modEventUnmute', 'lex:tools.ozone.moderation.defs#modEventMuteReporter', 'lex:tools.ozone.moderation.defs#modEventUnmuteReporter', 'lex:tools.ozone.moderation.defs#modEventEmail', 'lex:tools.ozone.moderation.defs#modEventResolveAppeal', 'lex:tools.ozone.moderation.defs#modEventDivert']
	            },
	            subject: {
	              type: 'union',
	              refs: ['lex:com.atproto.admin.defs#repoRef', 'lex:com.atproto.repo.strongRef']
	            },
	            subjectBlobCids: {
	              type: 'array',
	              items: {
	                type: 'string'
	              }
	            },
	            createdBy: {
	              type: 'string',
	              format: 'did'
	            },
	            createdAt: {
	              type: 'string',
	              format: 'datetime'
	            },
	            creatorHandle: {
	              type: 'string'
	            },
	            subjectHandle: {
	              type: 'string'
	            }
	          }
	        },
	        modEventViewDetail: {
	          type: 'object',
	          required: ['id', 'event', 'subject', 'subjectBlobs', 'createdBy', 'createdAt'],
	          properties: {
	            id: {
	              type: 'integer'
	            },
	            event: {
	              type: 'union',
	              refs: ['lex:tools.ozone.moderation.defs#modEventTakedown', 'lex:tools.ozone.moderation.defs#modEventReverseTakedown', 'lex:tools.ozone.moderation.defs#modEventComment', 'lex:tools.ozone.moderation.defs#modEventReport', 'lex:tools.ozone.moderation.defs#modEventLabel', 'lex:tools.ozone.moderation.defs#modEventAcknowledge', 'lex:tools.ozone.moderation.defs#modEventEscalate', 'lex:tools.ozone.moderation.defs#modEventMute', 'lex:tools.ozone.moderation.defs#modEventUnmute', 'lex:tools.ozone.moderation.defs#modEventMuteReporter', 'lex:tools.ozone.moderation.defs#modEventUnmuteReporter', 'lex:tools.ozone.moderation.defs#modEventEmail', 'lex:tools.ozone.moderation.defs#modEventResolveAppeal', 'lex:tools.ozone.moderation.defs#modEventDivert']
	            },
	            subject: {
	              type: 'union',
	              refs: ['lex:tools.ozone.moderation.defs#repoView', 'lex:tools.ozone.moderation.defs#repoViewNotFound', 'lex:tools.ozone.moderation.defs#recordView', 'lex:tools.ozone.moderation.defs#recordViewNotFound']
	            },
	            subjectBlobs: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:tools.ozone.moderation.defs#blobView'
	              }
	            },
	            createdBy: {
	              type: 'string',
	              format: 'did'
	            },
	            createdAt: {
	              type: 'string',
	              format: 'datetime'
	            }
	          }
	        },
	        subjectStatusView: {
	          type: 'object',
	          required: ['id', 'subject', 'createdAt', 'updatedAt', 'reviewState'],
	          properties: {
	            id: {
	              type: 'integer'
	            },
	            subject: {
	              type: 'union',
	              refs: ['lex:com.atproto.admin.defs#repoRef', 'lex:com.atproto.repo.strongRef']
	            },
	            subjectBlobCids: {
	              type: 'array',
	              items: {
	                type: 'string',
	                format: 'cid'
	              }
	            },
	            subjectRepoHandle: {
	              type: 'string'
	            },
	            updatedAt: {
	              type: 'string',
	              format: 'datetime',
	              description: 'Timestamp referencing when the last update was made to the moderation status of the subject'
	            },
	            createdAt: {
	              type: 'string',
	              format: 'datetime',
	              description: 'Timestamp referencing the first moderation status impacting event was emitted on the subject'
	            },
	            reviewState: {
	              type: 'ref',
	              ref: 'lex:tools.ozone.moderation.defs#subjectReviewState'
	            },
	            comment: {
	              type: 'string',
	              description: 'Sticky comment on the subject.'
	            },
	            muteUntil: {
	              type: 'string',
	              format: 'datetime'
	            },
	            muteReportingUntil: {
	              type: 'string',
	              format: 'datetime'
	            },
	            lastReviewedBy: {
	              type: 'string',
	              format: 'did'
	            },
	            lastReviewedAt: {
	              type: 'string',
	              format: 'datetime'
	            },
	            lastReportedAt: {
	              type: 'string',
	              format: 'datetime'
	            },
	            lastAppealedAt: {
	              type: 'string',
	              format: 'datetime',
	              description: 'Timestamp referencing when the author of the subject appealed a moderation action'
	            },
	            takendown: {
	              type: 'boolean'
	            },
	            appealed: {
	              type: 'boolean',
	              description: 'True indicates that the a previously taken moderator action was appealed against, by the author of the content. False indicates last appeal was resolved by moderators.'
	            },
	            suspendUntil: {
	              type: 'string',
	              format: 'datetime'
	            },
	            tags: {
	              type: 'array',
	              items: {
	                type: 'string'
	              }
	            }
	          }
	        },
	        subjectReviewState: {
	          type: 'string',
	          knownValues: ['lex:tools.ozone.moderation.defs#reviewOpen', 'lex:tools.ozone.moderation.defs#reviewEscalated', 'lex:tools.ozone.moderation.defs#reviewClosed', 'lex:tools.ozone.moderation.defs#reviewNone']
	        },
	        reviewOpen: {
	          type: 'token',
	          description: 'Moderator review status of a subject: Open. Indicates that the subject needs to be reviewed by a moderator'
	        },
	        reviewEscalated: {
	          type: 'token',
	          description: 'Moderator review status of a subject: Escalated. Indicates that the subject was escalated for review by a moderator'
	        },
	        reviewClosed: {
	          type: 'token',
	          description: 'Moderator review status of a subject: Closed. Indicates that the subject was already reviewed and resolved by a moderator'
	        },
	        reviewNone: {
	          type: 'token',
	          description: 'Moderator review status of a subject: Unnecessary. Indicates that the subject does not need a review at the moment but there is probably some moderation related metadata available for it'
	        },
	        modEventTakedown: {
	          type: 'object',
	          description: 'Take down a subject permanently or temporarily',
	          properties: {
	            comment: {
	              type: 'string'
	            },
	            durationInHours: {
	              type: 'integer',
	              description: 'Indicates how long the takedown should be in effect before automatically expiring.'
	            }
	          }
	        },
	        modEventReverseTakedown: {
	          type: 'object',
	          description: 'Revert take down action on a subject',
	          properties: {
	            comment: {
	              type: 'string',
	              description: 'Describe reasoning behind the reversal.'
	            }
	          }
	        },
	        modEventResolveAppeal: {
	          type: 'object',
	          description: 'Resolve appeal on a subject',
	          properties: {
	            comment: {
	              type: 'string',
	              description: 'Describe resolution.'
	            }
	          }
	        },
	        modEventComment: {
	          type: 'object',
	          description: 'Add a comment to a subject',
	          required: ['comment'],
	          properties: {
	            comment: {
	              type: 'string'
	            },
	            sticky: {
	              type: 'boolean',
	              description: 'Make the comment persistent on the subject'
	            }
	          }
	        },
	        modEventReport: {
	          type: 'object',
	          description: 'Report a subject',
	          required: ['reportType'],
	          properties: {
	            comment: {
	              type: 'string'
	            },
	            isReporterMuted: {
	              type: 'boolean',
	              description: "Set to true if the reporter was muted from reporting at the time of the event. These reports won't impact the reviewState of the subject."
	            },
	            reportType: {
	              type: 'ref',
	              ref: 'lex:com.atproto.moderation.defs#reasonType'
	            }
	          }
	        },
	        modEventLabel: {
	          type: 'object',
	          description: 'Apply/Negate labels on a subject',
	          required: ['createLabelVals', 'negateLabelVals'],
	          properties: {
	            comment: {
	              type: 'string'
	            },
	            createLabelVals: {
	              type: 'array',
	              items: {
	                type: 'string'
	              }
	            },
	            negateLabelVals: {
	              type: 'array',
	              items: {
	                type: 'string'
	              }
	            }
	          }
	        },
	        modEventAcknowledge: {
	          type: 'object',
	          properties: {
	            comment: {
	              type: 'string'
	            }
	          }
	        },
	        modEventEscalate: {
	          type: 'object',
	          properties: {
	            comment: {
	              type: 'string'
	            }
	          }
	        },
	        modEventMute: {
	          type: 'object',
	          description: 'Mute incoming reports on a subject',
	          required: ['durationInHours'],
	          properties: {
	            comment: {
	              type: 'string'
	            },
	            durationInHours: {
	              type: 'integer',
	              description: 'Indicates how long the subject should remain muted.'
	            }
	          }
	        },
	        modEventUnmute: {
	          type: 'object',
	          description: 'Unmute action on a subject',
	          properties: {
	            comment: {
	              type: 'string',
	              description: 'Describe reasoning behind the reversal.'
	            }
	          }
	        },
	        modEventMuteReporter: {
	          type: 'object',
	          description: 'Mute incoming reports from an account',
	          required: ['durationInHours'],
	          properties: {
	            comment: {
	              type: 'string'
	            },
	            durationInHours: {
	              type: 'integer',
	              description: 'Indicates how long the account should remain muted.'
	            }
	          }
	        },
	        modEventUnmuteReporter: {
	          type: 'object',
	          description: 'Unmute incoming reports from an account',
	          properties: {
	            comment: {
	              type: 'string',
	              description: 'Describe reasoning behind the reversal.'
	            }
	          }
	        },
	        modEventEmail: {
	          type: 'object',
	          description: 'Keep a log of outgoing email to a user',
	          required: ['subjectLine'],
	          properties: {
	            subjectLine: {
	              type: 'string',
	              description: 'The subject line of the email sent to the user.'
	            },
	            content: {
	              type: 'string',
	              description: 'The content of the email sent to the user.'
	            },
	            comment: {
	              type: 'string',
	              description: 'Additional comment about the outgoing comm.'
	            }
	          }
	        },
	        modEventDivert: {
	          type: 'object',
	          description: "Divert a record's blobs to a 3rd party service for further scanning/tagging",
	          properties: {
	            comment: {
	              type: 'string'
	            }
	          }
	        },
	        modEventTag: {
	          type: 'object',
	          description: 'Add/Remove a tag on a subject',
	          required: ['add', 'remove'],
	          properties: {
	            add: {
	              type: 'array',
	              items: {
	                type: 'string'
	              },
	              description: "Tags to be added to the subject. If already exists, won't be duplicated."
	            },
	            remove: {
	              type: 'array',
	              items: {
	                type: 'string'
	              },
	              description: "Tags to be removed to the subject. Ignores a tag If it doesn't exist, won't be duplicated."
	            },
	            comment: {
	              type: 'string',
	              description: 'Additional comment about added/removed tags.'
	            }
	          }
	        },
	        repoView: {
	          type: 'object',
	          required: ['did', 'handle', 'relatedRecords', 'indexedAt', 'moderation'],
	          properties: {
	            did: {
	              type: 'string',
	              format: 'did'
	            },
	            handle: {
	              type: 'string',
	              format: 'handle'
	            },
	            email: {
	              type: 'string'
	            },
	            relatedRecords: {
	              type: 'array',
	              items: {
	                type: 'unknown'
	              }
	            },
	            indexedAt: {
	              type: 'string',
	              format: 'datetime'
	            },
	            moderation: {
	              type: 'ref',
	              ref: 'lex:tools.ozone.moderation.defs#moderation'
	            },
	            invitedBy: {
	              type: 'ref',
	              ref: 'lex:com.atproto.server.defs#inviteCode'
	            },
	            invitesDisabled: {
	              type: 'boolean'
	            },
	            inviteNote: {
	              type: 'string'
	            }
	          }
	        },
	        repoViewDetail: {
	          type: 'object',
	          required: ['did', 'handle', 'relatedRecords', 'indexedAt', 'moderation'],
	          properties: {
	            did: {
	              type: 'string',
	              format: 'did'
	            },
	            handle: {
	              type: 'string',
	              format: 'handle'
	            },
	            email: {
	              type: 'string'
	            },
	            relatedRecords: {
	              type: 'array',
	              items: {
	                type: 'unknown'
	              }
	            },
	            indexedAt: {
	              type: 'string',
	              format: 'datetime'
	            },
	            moderation: {
	              type: 'ref',
	              ref: 'lex:tools.ozone.moderation.defs#moderationDetail'
	            },
	            labels: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:com.atproto.label.defs#label'
	              }
	            },
	            invitedBy: {
	              type: 'ref',
	              ref: 'lex:com.atproto.server.defs#inviteCode'
	            },
	            invites: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:com.atproto.server.defs#inviteCode'
	              }
	            },
	            invitesDisabled: {
	              type: 'boolean'
	            },
	            inviteNote: {
	              type: 'string'
	            },
	            emailConfirmedAt: {
	              type: 'string',
	              format: 'datetime'
	            }
	          }
	        },
	        repoViewNotFound: {
	          type: 'object',
	          required: ['did'],
	          properties: {
	            did: {
	              type: 'string',
	              format: 'did'
	            }
	          }
	        },
	        recordView: {
	          type: 'object',
	          required: ['uri', 'cid', 'value', 'blobCids', 'indexedAt', 'moderation', 'repo'],
	          properties: {
	            uri: {
	              type: 'string',
	              format: 'at-uri'
	            },
	            cid: {
	              type: 'string',
	              format: 'cid'
	            },
	            value: {
	              type: 'unknown'
	            },
	            blobCids: {
	              type: 'array',
	              items: {
	                type: 'string',
	                format: 'cid'
	              }
	            },
	            indexedAt: {
	              type: 'string',
	              format: 'datetime'
	            },
	            moderation: {
	              type: 'ref',
	              ref: 'lex:tools.ozone.moderation.defs#moderation'
	            },
	            repo: {
	              type: 'ref',
	              ref: 'lex:tools.ozone.moderation.defs#repoView'
	            }
	          }
	        },
	        recordViewDetail: {
	          type: 'object',
	          required: ['uri', 'cid', 'value', 'blobs', 'indexedAt', 'moderation', 'repo'],
	          properties: {
	            uri: {
	              type: 'string',
	              format: 'at-uri'
	            },
	            cid: {
	              type: 'string',
	              format: 'cid'
	            },
	            value: {
	              type: 'unknown'
	            },
	            blobs: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:tools.ozone.moderation.defs#blobView'
	              }
	            },
	            labels: {
	              type: 'array',
	              items: {
	                type: 'ref',
	                ref: 'lex:com.atproto.label.defs#label'
	              }
	            },
	            indexedAt: {
	              type: 'string',
	              format: 'datetime'
	            },
	            moderation: {
	              type: 'ref',
	              ref: 'lex:tools.ozone.moderation.defs#moderationDetail'
	            },
	            repo: {
	              type: 'ref',
	              ref: 'lex:tools.ozone.moderation.defs#repoView'
	            }
	          }
	        },
	        recordViewNotFound: {
	          type: 'object',
	          required: ['uri'],
	          properties: {
	            uri: {
	              type: 'string',
	              format: 'at-uri'
	            }
	          }
	        },
	        moderation: {
	          type: 'object',
	          properties: {
	            subjectStatus: {
	              type: 'ref',
	              ref: 'lex:tools.ozone.moderation.defs#subjectStatusView'
	            }
	          }
	        },
	        moderationDetail: {
	          type: 'object',
	          properties: {
	            subjectStatus: {
	              type: 'ref',
	              ref: 'lex:tools.ozone.moderation.defs#subjectStatusView'
	            }
	          }
	        },
	        blobView: {
	          type: 'object',
	          required: ['cid', 'mimeType', 'size', 'createdAt'],
	          properties: {
	            cid: {
	              type: 'string',
	              format: 'cid'
	            },
	            mimeType: {
	              type: 'string'
	            },
	            size: {
	              type: 'integer'
	            },
	            createdAt: {
	              type: 'string',
	              format: 'datetime'
	            },
	            details: {
	              type: 'union',
	              refs: ['lex:tools.ozone.moderation.defs#imageDetails', 'lex:tools.ozone.moderation.defs#videoDetails']
	            },
	            moderation: {
	              type: 'ref',
	              ref: 'lex:tools.ozone.moderation.defs#moderation'
	            }
	          }
	        },
	        imageDetails: {
	          type: 'object',
	          required: ['width', 'height'],
	          properties: {
	            width: {
	              type: 'integer'
	            },
	            height: {
	              type: 'integer'
	            }
	          }
	        },
	        videoDetails: {
	          type: 'object',
	          required: ['width', 'height', 'length'],
	          properties: {
	            width: {
	              type: 'integer'
	            },
	            height: {
	              type: 'integer'
	            },
	            length: {
	              type: 'integer'
	            }
	          }
	        }
	      }
	    },
	    ToolsOzoneModerationEmitEvent: {
	      lexicon: 1,
	      id: 'tools.ozone.moderation.emitEvent',
	      defs: {
	        main: {
	          type: 'procedure',
	          description: 'Take a moderation action on an actor.',
	          input: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['event', 'subject', 'createdBy'],
	              properties: {
	                event: {
	                  type: 'union',
	                  refs: ['lex:tools.ozone.moderation.defs#modEventTakedown', 'lex:tools.ozone.moderation.defs#modEventAcknowledge', 'lex:tools.ozone.moderation.defs#modEventEscalate', 'lex:tools.ozone.moderation.defs#modEventComment', 'lex:tools.ozone.moderation.defs#modEventLabel', 'lex:tools.ozone.moderation.defs#modEventReport', 'lex:tools.ozone.moderation.defs#modEventMute', 'lex:tools.ozone.moderation.defs#modEventUnmute', 'lex:tools.ozone.moderation.defs#modEventMuteReporter', 'lex:tools.ozone.moderation.defs#modEventUnmuteReporter', 'lex:tools.ozone.moderation.defs#modEventReverseTakedown', 'lex:tools.ozone.moderation.defs#modEventUnmute', 'lex:tools.ozone.moderation.defs#modEventEmail', 'lex:tools.ozone.moderation.defs#modEventTag']
	                },
	                subject: {
	                  type: 'union',
	                  refs: ['lex:com.atproto.admin.defs#repoRef', 'lex:com.atproto.repo.strongRef']
	                },
	                subjectBlobCids: {
	                  type: 'array',
	                  items: {
	                    type: 'string',
	                    format: 'cid'
	                  }
	                },
	                createdBy: {
	                  type: 'string',
	                  format: 'did'
	                }
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'ref',
	              ref: 'lex:tools.ozone.moderation.defs#modEventView'
	            }
	          },
	          errors: [{
	            name: 'SubjectHasAction'
	          }]
	        }
	      }
	    },
	    ToolsOzoneModerationGetEvent: {
	      lexicon: 1,
	      id: 'tools.ozone.moderation.getEvent',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get details about a moderation event.',
	          parameters: {
	            type: 'params',
	            required: ['id'],
	            properties: {
	              id: {
	                type: 'integer'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'ref',
	              ref: 'lex:tools.ozone.moderation.defs#modEventViewDetail'
	            }
	          }
	        }
	      }
	    },
	    ToolsOzoneModerationGetRecord: {
	      lexicon: 1,
	      id: 'tools.ozone.moderation.getRecord',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get details about a record.',
	          parameters: {
	            type: 'params',
	            required: ['uri'],
	            properties: {
	              uri: {
	                type: 'string',
	                format: 'at-uri'
	              },
	              cid: {
	                type: 'string',
	                format: 'cid'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'ref',
	              ref: 'lex:tools.ozone.moderation.defs#recordViewDetail'
	            }
	          },
	          errors: [{
	            name: 'RecordNotFound'
	          }]
	        }
	      }
	    },
	    ToolsOzoneModerationGetRepo: {
	      lexicon: 1,
	      id: 'tools.ozone.moderation.getRepo',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Get details about a repository.',
	          parameters: {
	            type: 'params',
	            required: ['did'],
	            properties: {
	              did: {
	                type: 'string',
	                format: 'did'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'ref',
	              ref: 'lex:tools.ozone.moderation.defs#repoViewDetail'
	            }
	          },
	          errors: [{
	            name: 'RepoNotFound'
	          }]
	        }
	      }
	    },
	    ToolsOzoneModerationQueryEvents: {
	      lexicon: 1,
	      id: 'tools.ozone.moderation.queryEvents',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'List moderation events related to a subject.',
	          parameters: {
	            type: 'params',
	            properties: {
	              types: {
	                type: 'array',
	                items: {
	                  type: 'string'
	                },
	                description: 'The types of events (fully qualified string in the format of tools.ozone.moderation.defs#modEvent<name>) to filter by. If not specified, all events are returned.'
	              },
	              createdBy: {
	                type: 'string',
	                format: 'did'
	              },
	              sortDirection: {
	                type: 'string',
	                default: 'desc',
	                enum: ['asc', 'desc'],
	                description: 'Sort direction for the events. Defaults to descending order of created at timestamp.'
	              },
	              createdAfter: {
	                type: 'string',
	                format: 'datetime',
	                description: 'Retrieve events created after a given timestamp'
	              },
	              createdBefore: {
	                type: 'string',
	                format: 'datetime',
	                description: 'Retrieve events created before a given timestamp'
	              },
	              subject: {
	                type: 'string',
	                format: 'uri'
	              },
	              includeAllUserRecords: {
	                type: 'boolean',
	                default: false,
	                description: 'If true, events on all record types (posts, lists, profile etc.) owned by the did are returned'
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50
	              },
	              hasComment: {
	                type: 'boolean',
	                description: 'If true, only events with comments are returned'
	              },
	              comment: {
	                type: 'string',
	                description: 'If specified, only events with comments containing the keyword are returned'
	              },
	              addedLabels: {
	                type: 'array',
	                items: {
	                  type: 'string'
	                },
	                description: 'If specified, only events where all of these labels were added are returned'
	              },
	              removedLabels: {
	                type: 'array',
	                items: {
	                  type: 'string'
	                },
	                description: 'If specified, only events where all of these labels were removed are returned'
	              },
	              addedTags: {
	                type: 'array',
	                items: {
	                  type: 'string'
	                },
	                description: 'If specified, only events where all of these tags were added are returned'
	              },
	              removedTags: {
	                type: 'array',
	                items: {
	                  type: 'string'
	                },
	                description: 'If specified, only events where all of these tags were removed are returned'
	              },
	              reportTypes: {
	                type: 'array',
	                items: {
	                  type: 'string'
	                }
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['events'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                events: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:tools.ozone.moderation.defs#modEventView'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ToolsOzoneModerationQueryStatuses: {
	      lexicon: 1,
	      id: 'tools.ozone.moderation.queryStatuses',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'View moderation statuses of subjects (record or repo).',
	          parameters: {
	            type: 'params',
	            properties: {
	              subject: {
	                type: 'string',
	                format: 'uri'
	              },
	              comment: {
	                type: 'string',
	                description: 'Search subjects by keyword from comments'
	              },
	              reportedAfter: {
	                type: 'string',
	                format: 'datetime',
	                description: 'Search subjects reported after a given timestamp'
	              },
	              reportedBefore: {
	                type: 'string',
	                format: 'datetime',
	                description: 'Search subjects reported before a given timestamp'
	              },
	              reviewedAfter: {
	                type: 'string',
	                format: 'datetime',
	                description: 'Search subjects reviewed after a given timestamp'
	              },
	              reviewedBefore: {
	                type: 'string',
	                format: 'datetime',
	                description: 'Search subjects reviewed before a given timestamp'
	              },
	              includeMuted: {
	                type: 'boolean',
	                description: "By default, we don't include muted subjects in the results. Set this to true to include them."
	              },
	              onlyMuted: {
	                type: 'boolean',
	                description: 'When set to true, only muted subjects and reporters will be returned.'
	              },
	              reviewState: {
	                type: 'string',
	                description: 'Specify when fetching subjects in a certain state'
	              },
	              ignoreSubjects: {
	                type: 'array',
	                items: {
	                  type: 'string',
	                  format: 'uri'
	                }
	              },
	              lastReviewedBy: {
	                type: 'string',
	                format: 'did',
	                description: 'Get all subject statuses that were reviewed by a specific moderator'
	              },
	              sortField: {
	                type: 'string',
	                default: 'lastReportedAt',
	                enum: ['lastReviewedAt', 'lastReportedAt']
	              },
	              sortDirection: {
	                type: 'string',
	                default: 'desc',
	                enum: ['asc', 'desc']
	              },
	              takendown: {
	                type: 'boolean',
	                description: 'Get subjects that were taken down'
	              },
	              appealed: {
	                type: 'boolean',
	                description: 'Get subjects in unresolved appealed status'
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50
	              },
	              tags: {
	                type: 'array',
	                items: {
	                  type: 'string'
	                }
	              },
	              excludeTags: {
	                type: 'array',
	                items: {
	                  type: 'string'
	                }
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['subjectStatuses'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                subjectStatuses: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:tools.ozone.moderation.defs#subjectStatusView'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    ToolsOzoneModerationSearchRepos: {
	      lexicon: 1,
	      id: 'tools.ozone.moderation.searchRepos',
	      defs: {
	        main: {
	          type: 'query',
	          description: 'Find repositories based on a search term.',
	          parameters: {
	            type: 'params',
	            properties: {
	              term: {
	                type: 'string',
	                description: "DEPRECATED: use 'q' instead"
	              },
	              q: {
	                type: 'string'
	              },
	              limit: {
	                type: 'integer',
	                minimum: 1,
	                maximum: 100,
	                default: 50
	              },
	              cursor: {
	                type: 'string'
	              }
	            }
	          },
	          output: {
	            encoding: 'application/json',
	            schema: {
	              type: 'object',
	              required: ['repos'],
	              properties: {
	                cursor: {
	                  type: 'string'
	                },
	                repos: {
	                  type: 'array',
	                  items: {
	                    type: 'ref',
	                    ref: 'lex:tools.ozone.moderation.defs#repoView'
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    }
	  };
	  exports.schemas = Object.values(exports.schemaDict);
	  exports.lexicons = new lexicon_1.Lexicons(exports.schemas);
	  exports.ids = {
	    ComAtprotoAdminDefs: 'com.atproto.admin.defs',
	    ComAtprotoAdminDeleteAccount: 'com.atproto.admin.deleteAccount',
	    ComAtprotoAdminDisableAccountInvites: 'com.atproto.admin.disableAccountInvites',
	    ComAtprotoAdminDisableInviteCodes: 'com.atproto.admin.disableInviteCodes',
	    ComAtprotoAdminEnableAccountInvites: 'com.atproto.admin.enableAccountInvites',
	    ComAtprotoAdminGetAccountInfo: 'com.atproto.admin.getAccountInfo',
	    ComAtprotoAdminGetAccountInfos: 'com.atproto.admin.getAccountInfos',
	    ComAtprotoAdminGetInviteCodes: 'com.atproto.admin.getInviteCodes',
	    ComAtprotoAdminGetSubjectStatus: 'com.atproto.admin.getSubjectStatus',
	    ComAtprotoAdminSendEmail: 'com.atproto.admin.sendEmail',
	    ComAtprotoAdminUpdateAccountEmail: 'com.atproto.admin.updateAccountEmail',
	    ComAtprotoAdminUpdateAccountHandle: 'com.atproto.admin.updateAccountHandle',
	    ComAtprotoAdminUpdateAccountPassword: 'com.atproto.admin.updateAccountPassword',
	    ComAtprotoAdminUpdateSubjectStatus: 'com.atproto.admin.updateSubjectStatus',
	    ComAtprotoIdentityGetRecommendedDidCredentials: 'com.atproto.identity.getRecommendedDidCredentials',
	    ComAtprotoIdentityRequestPlcOperationSignature: 'com.atproto.identity.requestPlcOperationSignature',
	    ComAtprotoIdentityResolveHandle: 'com.atproto.identity.resolveHandle',
	    ComAtprotoIdentitySignPlcOperation: 'com.atproto.identity.signPlcOperation',
	    ComAtprotoIdentitySubmitPlcOperation: 'com.atproto.identity.submitPlcOperation',
	    ComAtprotoIdentityUpdateHandle: 'com.atproto.identity.updateHandle',
	    ComAtprotoLabelDefs: 'com.atproto.label.defs',
	    ComAtprotoLabelQueryLabels: 'com.atproto.label.queryLabels',
	    ComAtprotoLabelSubscribeLabels: 'com.atproto.label.subscribeLabels',
	    ComAtprotoModerationCreateReport: 'com.atproto.moderation.createReport',
	    ComAtprotoModerationDefs: 'com.atproto.moderation.defs',
	    ComAtprotoRepoApplyWrites: 'com.atproto.repo.applyWrites',
	    ComAtprotoRepoCreateRecord: 'com.atproto.repo.createRecord',
	    ComAtprotoRepoDeleteRecord: 'com.atproto.repo.deleteRecord',
	    ComAtprotoRepoDescribeRepo: 'com.atproto.repo.describeRepo',
	    ComAtprotoRepoGetRecord: 'com.atproto.repo.getRecord',
	    ComAtprotoRepoImportRepo: 'com.atproto.repo.importRepo',
	    ComAtprotoRepoListMissingBlobs: 'com.atproto.repo.listMissingBlobs',
	    ComAtprotoRepoListRecords: 'com.atproto.repo.listRecords',
	    ComAtprotoRepoPutRecord: 'com.atproto.repo.putRecord',
	    ComAtprotoRepoStrongRef: 'com.atproto.repo.strongRef',
	    ComAtprotoRepoUploadBlob: 'com.atproto.repo.uploadBlob',
	    ComAtprotoServerActivateAccount: 'com.atproto.server.activateAccount',
	    ComAtprotoServerCheckAccountStatus: 'com.atproto.server.checkAccountStatus',
	    ComAtprotoServerConfirmEmail: 'com.atproto.server.confirmEmail',
	    ComAtprotoServerCreateAccount: 'com.atproto.server.createAccount',
	    ComAtprotoServerCreateAppPassword: 'com.atproto.server.createAppPassword',
	    ComAtprotoServerCreateInviteCode: 'com.atproto.server.createInviteCode',
	    ComAtprotoServerCreateInviteCodes: 'com.atproto.server.createInviteCodes',
	    ComAtprotoServerCreateSession: 'com.atproto.server.createSession',
	    ComAtprotoServerDeactivateAccount: 'com.atproto.server.deactivateAccount',
	    ComAtprotoServerDefs: 'com.atproto.server.defs',
	    ComAtprotoServerDeleteAccount: 'com.atproto.server.deleteAccount',
	    ComAtprotoServerDeleteSession: 'com.atproto.server.deleteSession',
	    ComAtprotoServerDescribeServer: 'com.atproto.server.describeServer',
	    ComAtprotoServerGetAccountInviteCodes: 'com.atproto.server.getAccountInviteCodes',
	    ComAtprotoServerGetServiceAuth: 'com.atproto.server.getServiceAuth',
	    ComAtprotoServerGetSession: 'com.atproto.server.getSession',
	    ComAtprotoServerListAppPasswords: 'com.atproto.server.listAppPasswords',
	    ComAtprotoServerRefreshSession: 'com.atproto.server.refreshSession',
	    ComAtprotoServerRequestAccountDelete: 'com.atproto.server.requestAccountDelete',
	    ComAtprotoServerRequestEmailConfirmation: 'com.atproto.server.requestEmailConfirmation',
	    ComAtprotoServerRequestEmailUpdate: 'com.atproto.server.requestEmailUpdate',
	    ComAtprotoServerRequestPasswordReset: 'com.atproto.server.requestPasswordReset',
	    ComAtprotoServerReserveSigningKey: 'com.atproto.server.reserveSigningKey',
	    ComAtprotoServerResetPassword: 'com.atproto.server.resetPassword',
	    ComAtprotoServerRevokeAppPassword: 'com.atproto.server.revokeAppPassword',
	    ComAtprotoServerUpdateEmail: 'com.atproto.server.updateEmail',
	    ComAtprotoSyncGetBlob: 'com.atproto.sync.getBlob',
	    ComAtprotoSyncGetBlocks: 'com.atproto.sync.getBlocks',
	    ComAtprotoSyncGetCheckout: 'com.atproto.sync.getCheckout',
	    ComAtprotoSyncGetHead: 'com.atproto.sync.getHead',
	    ComAtprotoSyncGetLatestCommit: 'com.atproto.sync.getLatestCommit',
	    ComAtprotoSyncGetRecord: 'com.atproto.sync.getRecord',
	    ComAtprotoSyncGetRepo: 'com.atproto.sync.getRepo',
	    ComAtprotoSyncListBlobs: 'com.atproto.sync.listBlobs',
	    ComAtprotoSyncListRepos: 'com.atproto.sync.listRepos',
	    ComAtprotoSyncNotifyOfUpdate: 'com.atproto.sync.notifyOfUpdate',
	    ComAtprotoSyncRequestCrawl: 'com.atproto.sync.requestCrawl',
	    ComAtprotoSyncSubscribeRepos: 'com.atproto.sync.subscribeRepos',
	    ComAtprotoTempCheckSignupQueue: 'com.atproto.temp.checkSignupQueue',
	    ComAtprotoTempFetchLabels: 'com.atproto.temp.fetchLabels',
	    ComAtprotoTempRequestPhoneVerification: 'com.atproto.temp.requestPhoneVerification',
	    AppBskyActorDefs: 'app.bsky.actor.defs',
	    AppBskyActorGetPreferences: 'app.bsky.actor.getPreferences',
	    AppBskyActorGetProfile: 'app.bsky.actor.getProfile',
	    AppBskyActorGetProfiles: 'app.bsky.actor.getProfiles',
	    AppBskyActorGetSuggestions: 'app.bsky.actor.getSuggestions',
	    AppBskyActorProfile: 'app.bsky.actor.profile',
	    AppBskyActorPutPreferences: 'app.bsky.actor.putPreferences',
	    AppBskyActorSearchActors: 'app.bsky.actor.searchActors',
	    AppBskyActorSearchActorsTypeahead: 'app.bsky.actor.searchActorsTypeahead',
	    AppBskyEmbedExternal: 'app.bsky.embed.external',
	    AppBskyEmbedImages: 'app.bsky.embed.images',
	    AppBskyEmbedRecord: 'app.bsky.embed.record',
	    AppBskyEmbedRecordWithMedia: 'app.bsky.embed.recordWithMedia',
	    AppBskyFeedDefs: 'app.bsky.feed.defs',
	    AppBskyFeedDescribeFeedGenerator: 'app.bsky.feed.describeFeedGenerator',
	    AppBskyFeedGenerator: 'app.bsky.feed.generator',
	    AppBskyFeedGetActorFeeds: 'app.bsky.feed.getActorFeeds',
	    AppBskyFeedGetActorLikes: 'app.bsky.feed.getActorLikes',
	    AppBskyFeedGetAuthorFeed: 'app.bsky.feed.getAuthorFeed',
	    AppBskyFeedGetFeed: 'app.bsky.feed.getFeed',
	    AppBskyFeedGetFeedGenerator: 'app.bsky.feed.getFeedGenerator',
	    AppBskyFeedGetFeedGenerators: 'app.bsky.feed.getFeedGenerators',
	    AppBskyFeedGetFeedSkeleton: 'app.bsky.feed.getFeedSkeleton',
	    AppBskyFeedGetLikes: 'app.bsky.feed.getLikes',
	    AppBskyFeedGetListFeed: 'app.bsky.feed.getListFeed',
	    AppBskyFeedGetPostThread: 'app.bsky.feed.getPostThread',
	    AppBskyFeedGetPosts: 'app.bsky.feed.getPosts',
	    AppBskyFeedGetRepostedBy: 'app.bsky.feed.getRepostedBy',
	    AppBskyFeedGetSuggestedFeeds: 'app.bsky.feed.getSuggestedFeeds',
	    AppBskyFeedGetTimeline: 'app.bsky.feed.getTimeline',
	    AppBskyFeedLike: 'app.bsky.feed.like',
	    AppBskyFeedPost: 'app.bsky.feed.post',
	    AppBskyFeedRepost: 'app.bsky.feed.repost',
	    AppBskyFeedSearchPosts: 'app.bsky.feed.searchPosts',
	    AppBskyFeedSendInteractions: 'app.bsky.feed.sendInteractions',
	    AppBskyFeedThreadgate: 'app.bsky.feed.threadgate',
	    AppBskyGraphBlock: 'app.bsky.graph.block',
	    AppBskyGraphDefs: 'app.bsky.graph.defs',
	    AppBskyGraphFollow: 'app.bsky.graph.follow',
	    AppBskyGraphGetBlocks: 'app.bsky.graph.getBlocks',
	    AppBskyGraphGetFollowers: 'app.bsky.graph.getFollowers',
	    AppBskyGraphGetFollows: 'app.bsky.graph.getFollows',
	    AppBskyGraphGetList: 'app.bsky.graph.getList',
	    AppBskyGraphGetListBlocks: 'app.bsky.graph.getListBlocks',
	    AppBskyGraphGetListMutes: 'app.bsky.graph.getListMutes',
	    AppBskyGraphGetLists: 'app.bsky.graph.getLists',
	    AppBskyGraphGetMutes: 'app.bsky.graph.getMutes',
	    AppBskyGraphGetRelationships: 'app.bsky.graph.getRelationships',
	    AppBskyGraphGetSuggestedFollowsByActor: 'app.bsky.graph.getSuggestedFollowsByActor',
	    AppBskyGraphList: 'app.bsky.graph.list',
	    AppBskyGraphListblock: 'app.bsky.graph.listblock',
	    AppBskyGraphListitem: 'app.bsky.graph.listitem',
	    AppBskyGraphMuteActor: 'app.bsky.graph.muteActor',
	    AppBskyGraphMuteActorList: 'app.bsky.graph.muteActorList',
	    AppBskyGraphUnmuteActor: 'app.bsky.graph.unmuteActor',
	    AppBskyGraphUnmuteActorList: 'app.bsky.graph.unmuteActorList',
	    AppBskyLabelerDefs: 'app.bsky.labeler.defs',
	    AppBskyLabelerGetServices: 'app.bsky.labeler.getServices',
	    AppBskyLabelerService: 'app.bsky.labeler.service',
	    AppBskyNotificationGetUnreadCount: 'app.bsky.notification.getUnreadCount',
	    AppBskyNotificationListNotifications: 'app.bsky.notification.listNotifications',
	    AppBskyNotificationRegisterPush: 'app.bsky.notification.registerPush',
	    AppBskyNotificationUpdateSeen: 'app.bsky.notification.updateSeen',
	    AppBskyRichtextFacet: 'app.bsky.richtext.facet',
	    AppBskyUnspeccedDefs: 'app.bsky.unspecced.defs',
	    AppBskyUnspeccedGetPopularFeedGenerators: 'app.bsky.unspecced.getPopularFeedGenerators',
	    AppBskyUnspeccedGetSuggestionsSkeleton: 'app.bsky.unspecced.getSuggestionsSkeleton',
	    AppBskyUnspeccedGetTaggedSuggestions: 'app.bsky.unspecced.getTaggedSuggestions',
	    AppBskyUnspeccedSearchActorsSkeleton: 'app.bsky.unspecced.searchActorsSkeleton',
	    AppBskyUnspeccedSearchPostsSkeleton: 'app.bsky.unspecced.searchPostsSkeleton',
	    ToolsOzoneCommunicationCreateTemplate: 'tools.ozone.communication.createTemplate',
	    ToolsOzoneCommunicationDefs: 'tools.ozone.communication.defs',
	    ToolsOzoneCommunicationDeleteTemplate: 'tools.ozone.communication.deleteTemplate',
	    ToolsOzoneCommunicationListTemplates: 'tools.ozone.communication.listTemplates',
	    ToolsOzoneCommunicationUpdateTemplate: 'tools.ozone.communication.updateTemplate',
	    ToolsOzoneModerationDefs: 'tools.ozone.moderation.defs',
	    ToolsOzoneModerationEmitEvent: 'tools.ozone.moderation.emitEvent',
	    ToolsOzoneModerationGetEvent: 'tools.ozone.moderation.getEvent',
	    ToolsOzoneModerationGetRecord: 'tools.ozone.moderation.getRecord',
	    ToolsOzoneModerationGetRepo: 'tools.ozone.moderation.getRepo',
	    ToolsOzoneModerationQueryEvents: 'tools.ozone.moderation.queryEvents',
	    ToolsOzoneModerationQueryStatuses: 'tools.ozone.moderation.queryStatuses',
	    ToolsOzoneModerationSearchRepos: 'tools.ozone.moderation.searchRepos'
	  };
	})(lexicons);

	var deleteAccount$1 = {};

	Object.defineProperty(deleteAccount$1, "__esModule", {
	  value: true
	});
	deleteAccount$1.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$22 = dist;
	function toKnownErr$20(e) {
	  if (e instanceof xrpc_1$22.XRPCError) ;
	  return e;
	}
	deleteAccount$1.toKnownErr = toKnownErr$20;

	var disableAccountInvites = {};

	Object.defineProperty(disableAccountInvites, "__esModule", {
	  value: true
	});
	disableAccountInvites.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$21 = dist;
	function toKnownErr$1$(e) {
	  if (e instanceof xrpc_1$21.XRPCError) ;
	  return e;
	}
	disableAccountInvites.toKnownErr = toKnownErr$1$;

	var disableInviteCodes = {};

	Object.defineProperty(disableInviteCodes, "__esModule", {
	  value: true
	});
	disableInviteCodes.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$20 = dist;
	function toKnownErr$1_(e) {
	  if (e instanceof xrpc_1$20.XRPCError) ;
	  return e;
	}
	disableInviteCodes.toKnownErr = toKnownErr$1_;

	var enableAccountInvites = {};

	Object.defineProperty(enableAccountInvites, "__esModule", {
	  value: true
	});
	enableAccountInvites.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1$ = dist;
	function toKnownErr$1Z(e) {
	  if (e instanceof xrpc_1$1$.XRPCError) ;
	  return e;
	}
	enableAccountInvites.toKnownErr = toKnownErr$1Z;

	var getAccountInfo = {};

	Object.defineProperty(getAccountInfo, "__esModule", {
	  value: true
	});
	getAccountInfo.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1_ = dist;
	function toKnownErr$1Y(e) {
	  if (e instanceof xrpc_1$1_.XRPCError) ;
	  return e;
	}
	getAccountInfo.toKnownErr = toKnownErr$1Y;

	var getAccountInfos = {};

	Object.defineProperty(getAccountInfos, "__esModule", {
	  value: true
	});
	getAccountInfos.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1Z = dist;
	function toKnownErr$1X(e) {
	  if (e instanceof xrpc_1$1Z.XRPCError) ;
	  return e;
	}
	getAccountInfos.toKnownErr = toKnownErr$1X;

	var getInviteCodes = {};

	Object.defineProperty(getInviteCodes, "__esModule", {
	  value: true
	});
	getInviteCodes.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1Y = dist;
	function toKnownErr$1W(e) {
	  if (e instanceof xrpc_1$1Y.XRPCError) ;
	  return e;
	}
	getInviteCodes.toKnownErr = toKnownErr$1W;

	var getSubjectStatus = {};

	Object.defineProperty(getSubjectStatus, "__esModule", {
	  value: true
	});
	getSubjectStatus.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1X = dist;
	function toKnownErr$1V(e) {
	  if (e instanceof xrpc_1$1X.XRPCError) ;
	  return e;
	}
	getSubjectStatus.toKnownErr = toKnownErr$1V;

	var sendEmail = {};

	Object.defineProperty(sendEmail, "__esModule", {
	  value: true
	});
	sendEmail.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1W = dist;
	function toKnownErr$1U(e) {
	  if (e instanceof xrpc_1$1W.XRPCError) ;
	  return e;
	}
	sendEmail.toKnownErr = toKnownErr$1U;

	var updateAccountEmail = {};

	Object.defineProperty(updateAccountEmail, "__esModule", {
	  value: true
	});
	updateAccountEmail.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1V = dist;
	function toKnownErr$1T(e) {
	  if (e instanceof xrpc_1$1V.XRPCError) ;
	  return e;
	}
	updateAccountEmail.toKnownErr = toKnownErr$1T;

	var updateAccountHandle = {};

	Object.defineProperty(updateAccountHandle, "__esModule", {
	  value: true
	});
	updateAccountHandle.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1U = dist;
	function toKnownErr$1S(e) {
	  if (e instanceof xrpc_1$1U.XRPCError) ;
	  return e;
	}
	updateAccountHandle.toKnownErr = toKnownErr$1S;

	var updateAccountPassword = {};

	Object.defineProperty(updateAccountPassword, "__esModule", {
	  value: true
	});
	updateAccountPassword.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1T = dist;
	function toKnownErr$1R(e) {
	  if (e instanceof xrpc_1$1T.XRPCError) ;
	  return e;
	}
	updateAccountPassword.toKnownErr = toKnownErr$1R;

	var updateSubjectStatus = {};

	Object.defineProperty(updateSubjectStatus, "__esModule", {
	  value: true
	});
	updateSubjectStatus.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1S = dist;
	function toKnownErr$1Q(e) {
	  if (e instanceof xrpc_1$1S.XRPCError) ;
	  return e;
	}
	updateSubjectStatus.toKnownErr = toKnownErr$1Q;

	var getRecommendedDidCredentials = {};

	Object.defineProperty(getRecommendedDidCredentials, "__esModule", {
	  value: true
	});
	getRecommendedDidCredentials.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1R = dist;
	function toKnownErr$1P(e) {
	  if (e instanceof xrpc_1$1R.XRPCError) ;
	  return e;
	}
	getRecommendedDidCredentials.toKnownErr = toKnownErr$1P;

	var requestPlcOperationSignature = {};

	Object.defineProperty(requestPlcOperationSignature, "__esModule", {
	  value: true
	});
	requestPlcOperationSignature.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1Q = dist;
	function toKnownErr$1O(e) {
	  if (e instanceof xrpc_1$1Q.XRPCError) ;
	  return e;
	}
	requestPlcOperationSignature.toKnownErr = toKnownErr$1O;

	var resolveHandle = {};

	Object.defineProperty(resolveHandle, "__esModule", {
	  value: true
	});
	resolveHandle.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1P = dist;
	function toKnownErr$1N(e) {
	  if (e instanceof xrpc_1$1P.XRPCError) ;
	  return e;
	}
	resolveHandle.toKnownErr = toKnownErr$1N;

	var signPlcOperation = {};

	Object.defineProperty(signPlcOperation, "__esModule", {
	  value: true
	});
	signPlcOperation.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1O = dist;
	function toKnownErr$1M(e) {
	  if (e instanceof xrpc_1$1O.XRPCError) ;
	  return e;
	}
	signPlcOperation.toKnownErr = toKnownErr$1M;

	var submitPlcOperation = {};

	Object.defineProperty(submitPlcOperation, "__esModule", {
	  value: true
	});
	submitPlcOperation.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1N = dist;
	function toKnownErr$1L(e) {
	  if (e instanceof xrpc_1$1N.XRPCError) ;
	  return e;
	}
	submitPlcOperation.toKnownErr = toKnownErr$1L;

	var updateHandle = {};

	Object.defineProperty(updateHandle, "__esModule", {
	  value: true
	});
	updateHandle.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1M = dist;
	function toKnownErr$1K(e) {
	  if (e instanceof xrpc_1$1M.XRPCError) ;
	  return e;
	}
	updateHandle.toKnownErr = toKnownErr$1K;

	var queryLabels = {};

	Object.defineProperty(queryLabels, "__esModule", {
	  value: true
	});
	queryLabels.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1L = dist;
	function toKnownErr$1J(e) {
	  if (e instanceof xrpc_1$1L.XRPCError) ;
	  return e;
	}
	queryLabels.toKnownErr = toKnownErr$1J;

	var createReport = {};

	Object.defineProperty(createReport, "__esModule", {
	  value: true
	});
	createReport.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1K = dist;
	function toKnownErr$1I(e) {
	  if (e instanceof xrpc_1$1K.XRPCError) ;
	  return e;
	}
	createReport.toKnownErr = toKnownErr$1I;

	var applyWrites = {};

	var util$2 = {};

	Object.defineProperty(util$2, "__esModule", {
	  value: true
	});
	util$2.hasProp = util$2.isObj = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	function isObj(v) {
	  return typeof v === 'object' && v !== null;
	}
	util$2.isObj = isObj;
	function hasProp(data, prop) {
	  return prop in data;
	}
	util$2.hasProp = hasProp;

	Object.defineProperty(applyWrites, "__esModule", {
	  value: true
	});
	applyWrites.validateDelete = applyWrites.isDelete = applyWrites.validateUpdate = applyWrites.isUpdate = applyWrites.validateCreate = applyWrites.isCreate = applyWrites.toKnownErr = applyWrites.InvalidSwapError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1J = dist;
	const util_1$H = util$2;
	const lexicons_1$G = lexicons;
	let InvalidSwapError$3 = class InvalidSwapError extends xrpc_1$1J.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	};
	applyWrites.InvalidSwapError = InvalidSwapError$3;
	function toKnownErr$1H(e) {
	  if (e instanceof xrpc_1$1J.XRPCError) {
	    if (e.error === 'InvalidSwap') return new InvalidSwapError$3(e);
	  }
	  return e;
	}
	applyWrites.toKnownErr = toKnownErr$1H;
	function isCreate(v) {
	  return (0, util_1$H.isObj)(v) && (0, util_1$H.hasProp)(v, '$type') && v.$type === 'com.atproto.repo.applyWrites#create';
	}
	applyWrites.isCreate = isCreate;
	function validateCreate(v) {
	  return lexicons_1$G.lexicons.validate('com.atproto.repo.applyWrites#create', v);
	}
	applyWrites.validateCreate = validateCreate;
	function isUpdate(v) {
	  return (0, util_1$H.isObj)(v) && (0, util_1$H.hasProp)(v, '$type') && v.$type === 'com.atproto.repo.applyWrites#update';
	}
	applyWrites.isUpdate = isUpdate;
	function validateUpdate(v) {
	  return lexicons_1$G.lexicons.validate('com.atproto.repo.applyWrites#update', v);
	}
	applyWrites.validateUpdate = validateUpdate;
	function isDelete(v) {
	  return (0, util_1$H.isObj)(v) && (0, util_1$H.hasProp)(v, '$type') && v.$type === 'com.atproto.repo.applyWrites#delete';
	}
	applyWrites.isDelete = isDelete;
	function validateDelete(v) {
	  return lexicons_1$G.lexicons.validate('com.atproto.repo.applyWrites#delete', v);
	}
	applyWrites.validateDelete = validateDelete;

	var createRecord = {};

	Object.defineProperty(createRecord, "__esModule", {
	  value: true
	});
	createRecord.toKnownErr = createRecord.InvalidSwapError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1I = dist;
	let InvalidSwapError$2 = class InvalidSwapError extends xrpc_1$1I.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	};
	createRecord.InvalidSwapError = InvalidSwapError$2;
	function toKnownErr$1G(e) {
	  if (e instanceof xrpc_1$1I.XRPCError) {
	    if (e.error === 'InvalidSwap') return new InvalidSwapError$2(e);
	  }
	  return e;
	}
	createRecord.toKnownErr = toKnownErr$1G;

	var deleteRecord = {};

	Object.defineProperty(deleteRecord, "__esModule", {
	  value: true
	});
	deleteRecord.toKnownErr = deleteRecord.InvalidSwapError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1H = dist;
	let InvalidSwapError$1 = class InvalidSwapError extends xrpc_1$1H.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	};
	deleteRecord.InvalidSwapError = InvalidSwapError$1;
	function toKnownErr$1F(e) {
	  if (e instanceof xrpc_1$1H.XRPCError) {
	    if (e.error === 'InvalidSwap') return new InvalidSwapError$1(e);
	  }
	  return e;
	}
	deleteRecord.toKnownErr = toKnownErr$1F;

	var describeRepo = {};

	Object.defineProperty(describeRepo, "__esModule", {
	  value: true
	});
	describeRepo.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1G = dist;
	function toKnownErr$1E(e) {
	  if (e instanceof xrpc_1$1G.XRPCError) ;
	  return e;
	}
	describeRepo.toKnownErr = toKnownErr$1E;

	var getRecord$2 = {};

	Object.defineProperty(getRecord$2, "__esModule", {
	  value: true
	});
	getRecord$2.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1F = dist;
	function toKnownErr$1D(e) {
	  if (e instanceof xrpc_1$1F.XRPCError) ;
	  return e;
	}
	getRecord$2.toKnownErr = toKnownErr$1D;

	var importRepo = {};

	Object.defineProperty(importRepo, "__esModule", {
	  value: true
	});
	importRepo.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1E = dist;
	function toKnownErr$1C(e) {
	  if (e instanceof xrpc_1$1E.XRPCError) ;
	  return e;
	}
	importRepo.toKnownErr = toKnownErr$1C;

	var listMissingBlobs = {};

	Object.defineProperty(listMissingBlobs, "__esModule", {
	  value: true
	});
	listMissingBlobs.validateRecordBlob = listMissingBlobs.isRecordBlob = listMissingBlobs.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1D = dist;
	const util_1$G = util$2;
	const lexicons_1$F = lexicons;
	function toKnownErr$1B(e) {
	  if (e instanceof xrpc_1$1D.XRPCError) ;
	  return e;
	}
	listMissingBlobs.toKnownErr = toKnownErr$1B;
	function isRecordBlob(v) {
	  return (0, util_1$G.isObj)(v) && (0, util_1$G.hasProp)(v, '$type') && v.$type === 'com.atproto.repo.listMissingBlobs#recordBlob';
	}
	listMissingBlobs.isRecordBlob = isRecordBlob;
	function validateRecordBlob(v) {
	  return lexicons_1$F.lexicons.validate('com.atproto.repo.listMissingBlobs#recordBlob', v);
	}
	listMissingBlobs.validateRecordBlob = validateRecordBlob;

	var listRecords = {};

	Object.defineProperty(listRecords, "__esModule", {
	  value: true
	});
	listRecords.validateRecord = listRecords.isRecord = listRecords.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1C = dist;
	const util_1$F = util$2;
	const lexicons_1$E = lexicons;
	function toKnownErr$1A(e) {
	  if (e instanceof xrpc_1$1C.XRPCError) ;
	  return e;
	}
	listRecords.toKnownErr = toKnownErr$1A;
	function isRecord$c(v) {
	  return (0, util_1$F.isObj)(v) && (0, util_1$F.hasProp)(v, '$type') && v.$type === 'com.atproto.repo.listRecords#record';
	}
	listRecords.isRecord = isRecord$c;
	function validateRecord$c(v) {
	  return lexicons_1$E.lexicons.validate('com.atproto.repo.listRecords#record', v);
	}
	listRecords.validateRecord = validateRecord$c;

	var putRecord = {};

	Object.defineProperty(putRecord, "__esModule", {
	  value: true
	});
	putRecord.toKnownErr = putRecord.InvalidSwapError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1B = dist;
	class InvalidSwapError extends xrpc_1$1B.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	putRecord.InvalidSwapError = InvalidSwapError;
	function toKnownErr$1z(e) {
	  if (e instanceof xrpc_1$1B.XRPCError) {
	    if (e.error === 'InvalidSwap') return new InvalidSwapError(e);
	  }
	  return e;
	}
	putRecord.toKnownErr = toKnownErr$1z;

	var uploadBlob = {};

	Object.defineProperty(uploadBlob, "__esModule", {
	  value: true
	});
	uploadBlob.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1A = dist;
	function toKnownErr$1y(e) {
	  if (e instanceof xrpc_1$1A.XRPCError) ;
	  return e;
	}
	uploadBlob.toKnownErr = toKnownErr$1y;

	var activateAccount = {};

	Object.defineProperty(activateAccount, "__esModule", {
	  value: true
	});
	activateAccount.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1z = dist;
	function toKnownErr$1x(e) {
	  if (e instanceof xrpc_1$1z.XRPCError) ;
	  return e;
	}
	activateAccount.toKnownErr = toKnownErr$1x;

	var checkAccountStatus = {};

	Object.defineProperty(checkAccountStatus, "__esModule", {
	  value: true
	});
	checkAccountStatus.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1y = dist;
	function toKnownErr$1w(e) {
	  if (e instanceof xrpc_1$1y.XRPCError) ;
	  return e;
	}
	checkAccountStatus.toKnownErr = toKnownErr$1w;

	var confirmEmail = {};

	Object.defineProperty(confirmEmail, "__esModule", {
	  value: true
	});
	confirmEmail.toKnownErr = confirmEmail.InvalidEmailError = confirmEmail.InvalidTokenError = confirmEmail.ExpiredTokenError = confirmEmail.AccountNotFoundError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1x = dist;
	class AccountNotFoundError extends xrpc_1$1x.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	confirmEmail.AccountNotFoundError = AccountNotFoundError;
	let ExpiredTokenError$3 = class ExpiredTokenError extends xrpc_1$1x.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	};
	confirmEmail.ExpiredTokenError = ExpiredTokenError$3;
	let InvalidTokenError$3 = class InvalidTokenError extends xrpc_1$1x.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	};
	confirmEmail.InvalidTokenError = InvalidTokenError$3;
	class InvalidEmailError extends xrpc_1$1x.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	confirmEmail.InvalidEmailError = InvalidEmailError;
	function toKnownErr$1v(e) {
	  if (e instanceof xrpc_1$1x.XRPCError) {
	    if (e.error === 'AccountNotFound') return new AccountNotFoundError(e);
	    if (e.error === 'ExpiredToken') return new ExpiredTokenError$3(e);
	    if (e.error === 'InvalidToken') return new InvalidTokenError$3(e);
	    if (e.error === 'InvalidEmail') return new InvalidEmailError(e);
	  }
	  return e;
	}
	confirmEmail.toKnownErr = toKnownErr$1v;

	var createAccount = {};

	Object.defineProperty(createAccount, "__esModule", {
	  value: true
	});
	createAccount.toKnownErr = createAccount.IncompatibleDidDocError = createAccount.UnresolvableDidError = createAccount.UnsupportedDomainError = createAccount.HandleNotAvailableError = createAccount.InvalidInviteCodeError = createAccount.InvalidPasswordError = createAccount.InvalidHandleError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1w = dist;
	class InvalidHandleError extends xrpc_1$1w.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	createAccount.InvalidHandleError = InvalidHandleError;
	class InvalidPasswordError extends xrpc_1$1w.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	createAccount.InvalidPasswordError = InvalidPasswordError;
	class InvalidInviteCodeError extends xrpc_1$1w.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	createAccount.InvalidInviteCodeError = InvalidInviteCodeError;
	class HandleNotAvailableError extends xrpc_1$1w.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	createAccount.HandleNotAvailableError = HandleNotAvailableError;
	class UnsupportedDomainError extends xrpc_1$1w.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	createAccount.UnsupportedDomainError = UnsupportedDomainError;
	class UnresolvableDidError extends xrpc_1$1w.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	createAccount.UnresolvableDidError = UnresolvableDidError;
	class IncompatibleDidDocError extends xrpc_1$1w.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	createAccount.IncompatibleDidDocError = IncompatibleDidDocError;
	function toKnownErr$1u(e) {
	  if (e instanceof xrpc_1$1w.XRPCError) {
	    if (e.error === 'InvalidHandle') return new InvalidHandleError(e);
	    if (e.error === 'InvalidPassword') return new InvalidPasswordError(e);
	    if (e.error === 'InvalidInviteCode') return new InvalidInviteCodeError(e);
	    if (e.error === 'HandleNotAvailable') return new HandleNotAvailableError(e);
	    if (e.error === 'UnsupportedDomain') return new UnsupportedDomainError(e);
	    if (e.error === 'UnresolvableDid') return new UnresolvableDidError(e);
	    if (e.error === 'IncompatibleDidDoc') return new IncompatibleDidDocError(e);
	  }
	  return e;
	}
	createAccount.toKnownErr = toKnownErr$1u;

	var createAppPassword = {};

	Object.defineProperty(createAppPassword, "__esModule", {
	  value: true
	});
	createAppPassword.validateAppPassword = createAppPassword.isAppPassword = createAppPassword.toKnownErr = createAppPassword.AccountTakedownError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1v = dist;
	const util_1$E = util$2;
	const lexicons_1$D = lexicons;
	let AccountTakedownError$3 = class AccountTakedownError extends xrpc_1$1v.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	};
	createAppPassword.AccountTakedownError = AccountTakedownError$3;
	function toKnownErr$1t(e) {
	  if (e instanceof xrpc_1$1v.XRPCError) {
	    if (e.error === 'AccountTakedown') return new AccountTakedownError$3(e);
	  }
	  return e;
	}
	createAppPassword.toKnownErr = toKnownErr$1t;
	function isAppPassword$1(v) {
	  return (0, util_1$E.isObj)(v) && (0, util_1$E.hasProp)(v, '$type') && v.$type === 'com.atproto.server.createAppPassword#appPassword';
	}
	createAppPassword.isAppPassword = isAppPassword$1;
	function validateAppPassword$1(v) {
	  return lexicons_1$D.lexicons.validate('com.atproto.server.createAppPassword#appPassword', v);
	}
	createAppPassword.validateAppPassword = validateAppPassword$1;

	var createInviteCode = {};

	Object.defineProperty(createInviteCode, "__esModule", {
	  value: true
	});
	createInviteCode.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1u = dist;
	function toKnownErr$1s(e) {
	  if (e instanceof xrpc_1$1u.XRPCError) ;
	  return e;
	}
	createInviteCode.toKnownErr = toKnownErr$1s;

	var createInviteCodes = {};

	Object.defineProperty(createInviteCodes, "__esModule", {
	  value: true
	});
	createInviteCodes.validateAccountCodes = createInviteCodes.isAccountCodes = createInviteCodes.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1t = dist;
	const util_1$D = util$2;
	const lexicons_1$C = lexicons;
	function toKnownErr$1r(e) {
	  if (e instanceof xrpc_1$1t.XRPCError) ;
	  return e;
	}
	createInviteCodes.toKnownErr = toKnownErr$1r;
	function isAccountCodes(v) {
	  return (0, util_1$D.isObj)(v) && (0, util_1$D.hasProp)(v, '$type') && v.$type === 'com.atproto.server.createInviteCodes#accountCodes';
	}
	createInviteCodes.isAccountCodes = isAccountCodes;
	function validateAccountCodes(v) {
	  return lexicons_1$C.lexicons.validate('com.atproto.server.createInviteCodes#accountCodes', v);
	}
	createInviteCodes.validateAccountCodes = validateAccountCodes;

	var createSession = {};

	Object.defineProperty(createSession, "__esModule", {
	  value: true
	});
	createSession.toKnownErr = createSession.AuthFactorTokenRequiredError = createSession.AccountTakedownError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1s = dist;
	let AccountTakedownError$2 = class AccountTakedownError extends xrpc_1$1s.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	};
	createSession.AccountTakedownError = AccountTakedownError$2;
	class AuthFactorTokenRequiredError extends xrpc_1$1s.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	createSession.AuthFactorTokenRequiredError = AuthFactorTokenRequiredError;
	function toKnownErr$1q(e) {
	  if (e instanceof xrpc_1$1s.XRPCError) {
	    if (e.error === 'AccountTakedown') return new AccountTakedownError$2(e);
	    if (e.error === 'AuthFactorTokenRequired') return new AuthFactorTokenRequiredError(e);
	  }
	  return e;
	}
	createSession.toKnownErr = toKnownErr$1q;

	var deactivateAccount = {};

	Object.defineProperty(deactivateAccount, "__esModule", {
	  value: true
	});
	deactivateAccount.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1r = dist;
	function toKnownErr$1p(e) {
	  if (e instanceof xrpc_1$1r.XRPCError) ;
	  return e;
	}
	deactivateAccount.toKnownErr = toKnownErr$1p;

	var deleteAccount = {};

	Object.defineProperty(deleteAccount, "__esModule", {
	  value: true
	});
	deleteAccount.toKnownErr = deleteAccount.InvalidTokenError = deleteAccount.ExpiredTokenError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1q = dist;
	let ExpiredTokenError$2 = class ExpiredTokenError extends xrpc_1$1q.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	};
	deleteAccount.ExpiredTokenError = ExpiredTokenError$2;
	let InvalidTokenError$2 = class InvalidTokenError extends xrpc_1$1q.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	};
	deleteAccount.InvalidTokenError = InvalidTokenError$2;
	function toKnownErr$1o(e) {
	  if (e instanceof xrpc_1$1q.XRPCError) {
	    if (e.error === 'ExpiredToken') return new ExpiredTokenError$2(e);
	    if (e.error === 'InvalidToken') return new InvalidTokenError$2(e);
	  }
	  return e;
	}
	deleteAccount.toKnownErr = toKnownErr$1o;

	var deleteSession = {};

	Object.defineProperty(deleteSession, "__esModule", {
	  value: true
	});
	deleteSession.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1p = dist;
	function toKnownErr$1n(e) {
	  if (e instanceof xrpc_1$1p.XRPCError) ;
	  return e;
	}
	deleteSession.toKnownErr = toKnownErr$1n;

	var describeServer = {};

	Object.defineProperty(describeServer, "__esModule", {
	  value: true
	});
	describeServer.validateContact = describeServer.isContact = describeServer.validateLinks = describeServer.isLinks = describeServer.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1o = dist;
	const util_1$C = util$2;
	const lexicons_1$B = lexicons;
	function toKnownErr$1m(e) {
	  if (e instanceof xrpc_1$1o.XRPCError) ;
	  return e;
	}
	describeServer.toKnownErr = toKnownErr$1m;
	function isLinks$1(v) {
	  return (0, util_1$C.isObj)(v) && (0, util_1$C.hasProp)(v, '$type') && v.$type === 'com.atproto.server.describeServer#links';
	}
	describeServer.isLinks = isLinks$1;
	function validateLinks$1(v) {
	  return lexicons_1$B.lexicons.validate('com.atproto.server.describeServer#links', v);
	}
	describeServer.validateLinks = validateLinks$1;
	function isContact(v) {
	  return (0, util_1$C.isObj)(v) && (0, util_1$C.hasProp)(v, '$type') && v.$type === 'com.atproto.server.describeServer#contact';
	}
	describeServer.isContact = isContact;
	function validateContact(v) {
	  return lexicons_1$B.lexicons.validate('com.atproto.server.describeServer#contact', v);
	}
	describeServer.validateContact = validateContact;

	var getAccountInviteCodes = {};

	Object.defineProperty(getAccountInviteCodes, "__esModule", {
	  value: true
	});
	getAccountInviteCodes.toKnownErr = getAccountInviteCodes.DuplicateCreateError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1n = dist;
	class DuplicateCreateError extends xrpc_1$1n.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	getAccountInviteCodes.DuplicateCreateError = DuplicateCreateError;
	function toKnownErr$1l(e) {
	  if (e instanceof xrpc_1$1n.XRPCError) {
	    if (e.error === 'DuplicateCreate') return new DuplicateCreateError(e);
	  }
	  return e;
	}
	getAccountInviteCodes.toKnownErr = toKnownErr$1l;

	var getServiceAuth = {};

	Object.defineProperty(getServiceAuth, "__esModule", {
	  value: true
	});
	getServiceAuth.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1m = dist;
	function toKnownErr$1k(e) {
	  if (e instanceof xrpc_1$1m.XRPCError) ;
	  return e;
	}
	getServiceAuth.toKnownErr = toKnownErr$1k;

	var getSession = {};

	Object.defineProperty(getSession, "__esModule", {
	  value: true
	});
	getSession.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1l = dist;
	function toKnownErr$1j(e) {
	  if (e instanceof xrpc_1$1l.XRPCError) ;
	  return e;
	}
	getSession.toKnownErr = toKnownErr$1j;

	var listAppPasswords = {};

	Object.defineProperty(listAppPasswords, "__esModule", {
	  value: true
	});
	listAppPasswords.validateAppPassword = listAppPasswords.isAppPassword = listAppPasswords.toKnownErr = listAppPasswords.AccountTakedownError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1k = dist;
	const util_1$B = util$2;
	const lexicons_1$A = lexicons;
	let AccountTakedownError$1 = class AccountTakedownError extends xrpc_1$1k.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	};
	listAppPasswords.AccountTakedownError = AccountTakedownError$1;
	function toKnownErr$1i(e) {
	  if (e instanceof xrpc_1$1k.XRPCError) {
	    if (e.error === 'AccountTakedown') return new AccountTakedownError$1(e);
	  }
	  return e;
	}
	listAppPasswords.toKnownErr = toKnownErr$1i;
	function isAppPassword(v) {
	  return (0, util_1$B.isObj)(v) && (0, util_1$B.hasProp)(v, '$type') && v.$type === 'com.atproto.server.listAppPasswords#appPassword';
	}
	listAppPasswords.isAppPassword = isAppPassword;
	function validateAppPassword(v) {
	  return lexicons_1$A.lexicons.validate('com.atproto.server.listAppPasswords#appPassword', v);
	}
	listAppPasswords.validateAppPassword = validateAppPassword;

	var refreshSession = {};

	Object.defineProperty(refreshSession, "__esModule", {
	  value: true
	});
	refreshSession.toKnownErr = refreshSession.AccountTakedownError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1j = dist;
	class AccountTakedownError extends xrpc_1$1j.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	refreshSession.AccountTakedownError = AccountTakedownError;
	function toKnownErr$1h(e) {
	  if (e instanceof xrpc_1$1j.XRPCError) {
	    if (e.error === 'AccountTakedown') return new AccountTakedownError(e);
	  }
	  return e;
	}
	refreshSession.toKnownErr = toKnownErr$1h;

	var requestAccountDelete = {};

	Object.defineProperty(requestAccountDelete, "__esModule", {
	  value: true
	});
	requestAccountDelete.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1i = dist;
	function toKnownErr$1g(e) {
	  if (e instanceof xrpc_1$1i.XRPCError) ;
	  return e;
	}
	requestAccountDelete.toKnownErr = toKnownErr$1g;

	var requestEmailConfirmation = {};

	Object.defineProperty(requestEmailConfirmation, "__esModule", {
	  value: true
	});
	requestEmailConfirmation.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1h = dist;
	function toKnownErr$1f(e) {
	  if (e instanceof xrpc_1$1h.XRPCError) ;
	  return e;
	}
	requestEmailConfirmation.toKnownErr = toKnownErr$1f;

	var requestEmailUpdate = {};

	Object.defineProperty(requestEmailUpdate, "__esModule", {
	  value: true
	});
	requestEmailUpdate.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1g = dist;
	function toKnownErr$1e(e) {
	  if (e instanceof xrpc_1$1g.XRPCError) ;
	  return e;
	}
	requestEmailUpdate.toKnownErr = toKnownErr$1e;

	var requestPasswordReset = {};

	Object.defineProperty(requestPasswordReset, "__esModule", {
	  value: true
	});
	requestPasswordReset.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1f = dist;
	function toKnownErr$1d(e) {
	  if (e instanceof xrpc_1$1f.XRPCError) ;
	  return e;
	}
	requestPasswordReset.toKnownErr = toKnownErr$1d;

	var reserveSigningKey = {};

	Object.defineProperty(reserveSigningKey, "__esModule", {
	  value: true
	});
	reserveSigningKey.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1e = dist;
	function toKnownErr$1c(e) {
	  if (e instanceof xrpc_1$1e.XRPCError) ;
	  return e;
	}
	reserveSigningKey.toKnownErr = toKnownErr$1c;

	var resetPassword = {};

	Object.defineProperty(resetPassword, "__esModule", {
	  value: true
	});
	resetPassword.toKnownErr = resetPassword.InvalidTokenError = resetPassword.ExpiredTokenError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1d = dist;
	let ExpiredTokenError$1 = class ExpiredTokenError extends xrpc_1$1d.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	};
	resetPassword.ExpiredTokenError = ExpiredTokenError$1;
	let InvalidTokenError$1 = class InvalidTokenError extends xrpc_1$1d.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	};
	resetPassword.InvalidTokenError = InvalidTokenError$1;
	function toKnownErr$1b(e) {
	  if (e instanceof xrpc_1$1d.XRPCError) {
	    if (e.error === 'ExpiredToken') return new ExpiredTokenError$1(e);
	    if (e.error === 'InvalidToken') return new InvalidTokenError$1(e);
	  }
	  return e;
	}
	resetPassword.toKnownErr = toKnownErr$1b;

	var revokeAppPassword = {};

	Object.defineProperty(revokeAppPassword, "__esModule", {
	  value: true
	});
	revokeAppPassword.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1c = dist;
	function toKnownErr$1a(e) {
	  if (e instanceof xrpc_1$1c.XRPCError) ;
	  return e;
	}
	revokeAppPassword.toKnownErr = toKnownErr$1a;

	var updateEmail = {};

	Object.defineProperty(updateEmail, "__esModule", {
	  value: true
	});
	updateEmail.toKnownErr = updateEmail.TokenRequiredError = updateEmail.InvalidTokenError = updateEmail.ExpiredTokenError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1b = dist;
	class ExpiredTokenError extends xrpc_1$1b.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	updateEmail.ExpiredTokenError = ExpiredTokenError;
	class InvalidTokenError extends xrpc_1$1b.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	updateEmail.InvalidTokenError = InvalidTokenError;
	class TokenRequiredError extends xrpc_1$1b.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	updateEmail.TokenRequiredError = TokenRequiredError;
	function toKnownErr$19(e) {
	  if (e instanceof xrpc_1$1b.XRPCError) {
	    if (e.error === 'ExpiredToken') return new ExpiredTokenError(e);
	    if (e.error === 'InvalidToken') return new InvalidTokenError(e);
	    if (e.error === 'TokenRequired') return new TokenRequiredError(e);
	  }
	  return e;
	}
	updateEmail.toKnownErr = toKnownErr$19;

	var getBlob = {};

	Object.defineProperty(getBlob, "__esModule", {
	  value: true
	});
	getBlob.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1a = dist;
	function toKnownErr$18(e) {
	  if (e instanceof xrpc_1$1a.XRPCError) ;
	  return e;
	}
	getBlob.toKnownErr = toKnownErr$18;

	var getBlocks$1 = {};

	Object.defineProperty(getBlocks$1, "__esModule", {
	  value: true
	});
	getBlocks$1.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$19 = dist;
	function toKnownErr$17(e) {
	  if (e instanceof xrpc_1$19.XRPCError) ;
	  return e;
	}
	getBlocks$1.toKnownErr = toKnownErr$17;

	var getCheckout = {};

	Object.defineProperty(getCheckout, "__esModule", {
	  value: true
	});
	getCheckout.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$18 = dist;
	function toKnownErr$16(e) {
	  if (e instanceof xrpc_1$18.XRPCError) ;
	  return e;
	}
	getCheckout.toKnownErr = toKnownErr$16;

	var getHead = {};

	Object.defineProperty(getHead, "__esModule", {
	  value: true
	});
	getHead.toKnownErr = getHead.HeadNotFoundError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$17 = dist;
	class HeadNotFoundError extends xrpc_1$17.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	getHead.HeadNotFoundError = HeadNotFoundError;
	function toKnownErr$15(e) {
	  if (e instanceof xrpc_1$17.XRPCError) {
	    if (e.error === 'HeadNotFound') return new HeadNotFoundError(e);
	  }
	  return e;
	}
	getHead.toKnownErr = toKnownErr$15;

	var getLatestCommit = {};

	Object.defineProperty(getLatestCommit, "__esModule", {
	  value: true
	});
	getLatestCommit.toKnownErr = getLatestCommit.RepoNotFoundError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$16 = dist;
	let RepoNotFoundError$1 = class RepoNotFoundError extends xrpc_1$16.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	};
	getLatestCommit.RepoNotFoundError = RepoNotFoundError$1;
	function toKnownErr$14(e) {
	  if (e instanceof xrpc_1$16.XRPCError) {
	    if (e.error === 'RepoNotFound') return new RepoNotFoundError$1(e);
	  }
	  return e;
	}
	getLatestCommit.toKnownErr = toKnownErr$14;

	var getRecord$1 = {};

	Object.defineProperty(getRecord$1, "__esModule", {
	  value: true
	});
	getRecord$1.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$15 = dist;
	function toKnownErr$13(e) {
	  if (e instanceof xrpc_1$15.XRPCError) ;
	  return e;
	}
	getRecord$1.toKnownErr = toKnownErr$13;

	var getRepo$1 = {};

	Object.defineProperty(getRepo$1, "__esModule", {
	  value: true
	});
	getRepo$1.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$14 = dist;
	function toKnownErr$12(e) {
	  if (e instanceof xrpc_1$14.XRPCError) ;
	  return e;
	}
	getRepo$1.toKnownErr = toKnownErr$12;

	var listBlobs = {};

	Object.defineProperty(listBlobs, "__esModule", {
	  value: true
	});
	listBlobs.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$13 = dist;
	function toKnownErr$11(e) {
	  if (e instanceof xrpc_1$13.XRPCError) ;
	  return e;
	}
	listBlobs.toKnownErr = toKnownErr$11;

	var listRepos = {};

	Object.defineProperty(listRepos, "__esModule", {
	  value: true
	});
	listRepos.validateRepo = listRepos.isRepo = listRepos.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$12 = dist;
	const util_1$A = util$2;
	const lexicons_1$z = lexicons;
	function toKnownErr$10(e) {
	  if (e instanceof xrpc_1$12.XRPCError) ;
	  return e;
	}
	listRepos.toKnownErr = toKnownErr$10;
	function isRepo(v) {
	  return (0, util_1$A.isObj)(v) && (0, util_1$A.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.listRepos#repo';
	}
	listRepos.isRepo = isRepo;
	function validateRepo(v) {
	  return lexicons_1$z.lexicons.validate('com.atproto.sync.listRepos#repo', v);
	}
	listRepos.validateRepo = validateRepo;

	var notifyOfUpdate = {};

	Object.defineProperty(notifyOfUpdate, "__esModule", {
	  value: true
	});
	notifyOfUpdate.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$11 = dist;
	function toKnownErr$$(e) {
	  if (e instanceof xrpc_1$11.XRPCError) ;
	  return e;
	}
	notifyOfUpdate.toKnownErr = toKnownErr$$;

	var requestCrawl = {};

	Object.defineProperty(requestCrawl, "__esModule", {
	  value: true
	});
	requestCrawl.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$10 = dist;
	function toKnownErr$_(e) {
	  if (e instanceof xrpc_1$10.XRPCError) ;
	  return e;
	}
	requestCrawl.toKnownErr = toKnownErr$_;

	var checkSignupQueue = {};

	Object.defineProperty(checkSignupQueue, "__esModule", {
	  value: true
	});
	checkSignupQueue.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$$ = dist;
	function toKnownErr$Z(e) {
	  if (e instanceof xrpc_1$$.XRPCError) ;
	  return e;
	}
	checkSignupQueue.toKnownErr = toKnownErr$Z;

	var fetchLabels = {};

	Object.defineProperty(fetchLabels, "__esModule", {
	  value: true
	});
	fetchLabels.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$_ = dist;
	function toKnownErr$Y(e) {
	  if (e instanceof xrpc_1$_.XRPCError) ;
	  return e;
	}
	fetchLabels.toKnownErr = toKnownErr$Y;

	var requestPhoneVerification = {};

	Object.defineProperty(requestPhoneVerification, "__esModule", {
	  value: true
	});
	requestPhoneVerification.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$Z = dist;
	function toKnownErr$X(e) {
	  if (e instanceof xrpc_1$Z.XRPCError) ;
	  return e;
	}
	requestPhoneVerification.toKnownErr = toKnownErr$X;

	var getPreferences = {};

	Object.defineProperty(getPreferences, "__esModule", {
	  value: true
	});
	getPreferences.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$Y = dist;
	function toKnownErr$W(e) {
	  if (e instanceof xrpc_1$Y.XRPCError) ;
	  return e;
	}
	getPreferences.toKnownErr = toKnownErr$W;

	var getProfile = {};

	Object.defineProperty(getProfile, "__esModule", {
	  value: true
	});
	getProfile.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$X = dist;
	function toKnownErr$V(e) {
	  if (e instanceof xrpc_1$X.XRPCError) ;
	  return e;
	}
	getProfile.toKnownErr = toKnownErr$V;

	var getProfiles = {};

	Object.defineProperty(getProfiles, "__esModule", {
	  value: true
	});
	getProfiles.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$W = dist;
	function toKnownErr$U(e) {
	  if (e instanceof xrpc_1$W.XRPCError) ;
	  return e;
	}
	getProfiles.toKnownErr = toKnownErr$U;

	var getSuggestions = {};

	Object.defineProperty(getSuggestions, "__esModule", {
	  value: true
	});
	getSuggestions.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$V = dist;
	function toKnownErr$T(e) {
	  if (e instanceof xrpc_1$V.XRPCError) ;
	  return e;
	}
	getSuggestions.toKnownErr = toKnownErr$T;

	var putPreferences = {};

	Object.defineProperty(putPreferences, "__esModule", {
	  value: true
	});
	putPreferences.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$U = dist;
	function toKnownErr$S(e) {
	  if (e instanceof xrpc_1$U.XRPCError) ;
	  return e;
	}
	putPreferences.toKnownErr = toKnownErr$S;

	var searchActors = {};

	Object.defineProperty(searchActors, "__esModule", {
	  value: true
	});
	searchActors.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$T = dist;
	function toKnownErr$R(e) {
	  if (e instanceof xrpc_1$T.XRPCError) ;
	  return e;
	}
	searchActors.toKnownErr = toKnownErr$R;

	var searchActorsTypeahead = {};

	Object.defineProperty(searchActorsTypeahead, "__esModule", {
	  value: true
	});
	searchActorsTypeahead.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$S = dist;
	function toKnownErr$Q(e) {
	  if (e instanceof xrpc_1$S.XRPCError) ;
	  return e;
	}
	searchActorsTypeahead.toKnownErr = toKnownErr$Q;

	var describeFeedGenerator = {};

	Object.defineProperty(describeFeedGenerator, "__esModule", {
	  value: true
	});
	describeFeedGenerator.validateLinks = describeFeedGenerator.isLinks = describeFeedGenerator.validateFeed = describeFeedGenerator.isFeed = describeFeedGenerator.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$R = dist;
	const util_1$z = util$2;
	const lexicons_1$y = lexicons;
	function toKnownErr$P(e) {
	  if (e instanceof xrpc_1$R.XRPCError) ;
	  return e;
	}
	describeFeedGenerator.toKnownErr = toKnownErr$P;
	function isFeed(v) {
	  return (0, util_1$z.isObj)(v) && (0, util_1$z.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.describeFeedGenerator#feed';
	}
	describeFeedGenerator.isFeed = isFeed;
	function validateFeed(v) {
	  return lexicons_1$y.lexicons.validate('app.bsky.feed.describeFeedGenerator#feed', v);
	}
	describeFeedGenerator.validateFeed = validateFeed;
	function isLinks(v) {
	  return (0, util_1$z.isObj)(v) && (0, util_1$z.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.describeFeedGenerator#links';
	}
	describeFeedGenerator.isLinks = isLinks;
	function validateLinks(v) {
	  return lexicons_1$y.lexicons.validate('app.bsky.feed.describeFeedGenerator#links', v);
	}
	describeFeedGenerator.validateLinks = validateLinks;

	var getActorFeeds = {};

	Object.defineProperty(getActorFeeds, "__esModule", {
	  value: true
	});
	getActorFeeds.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$Q = dist;
	function toKnownErr$O(e) {
	  if (e instanceof xrpc_1$Q.XRPCError) ;
	  return e;
	}
	getActorFeeds.toKnownErr = toKnownErr$O;

	var getActorLikes = {};

	Object.defineProperty(getActorLikes, "__esModule", {
	  value: true
	});
	getActorLikes.toKnownErr = getActorLikes.BlockedByActorError = getActorLikes.BlockedActorError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$P = dist;
	let BlockedActorError$1 = class BlockedActorError extends xrpc_1$P.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	};
	getActorLikes.BlockedActorError = BlockedActorError$1;
	let BlockedByActorError$1 = class BlockedByActorError extends xrpc_1$P.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	};
	getActorLikes.BlockedByActorError = BlockedByActorError$1;
	function toKnownErr$N(e) {
	  if (e instanceof xrpc_1$P.XRPCError) {
	    if (e.error === 'BlockedActor') return new BlockedActorError$1(e);
	    if (e.error === 'BlockedByActor') return new BlockedByActorError$1(e);
	  }
	  return e;
	}
	getActorLikes.toKnownErr = toKnownErr$N;

	var getAuthorFeed = {};

	Object.defineProperty(getAuthorFeed, "__esModule", {
	  value: true
	});
	getAuthorFeed.toKnownErr = getAuthorFeed.BlockedByActorError = getAuthorFeed.BlockedActorError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$O = dist;
	class BlockedActorError extends xrpc_1$O.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	getAuthorFeed.BlockedActorError = BlockedActorError;
	class BlockedByActorError extends xrpc_1$O.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	getAuthorFeed.BlockedByActorError = BlockedByActorError;
	function toKnownErr$M(e) {
	  if (e instanceof xrpc_1$O.XRPCError) {
	    if (e.error === 'BlockedActor') return new BlockedActorError(e);
	    if (e.error === 'BlockedByActor') return new BlockedByActorError(e);
	  }
	  return e;
	}
	getAuthorFeed.toKnownErr = toKnownErr$M;

	var getFeed = {};

	Object.defineProperty(getFeed, "__esModule", {
	  value: true
	});
	getFeed.toKnownErr = getFeed.UnknownFeedError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$N = dist;
	let UnknownFeedError$1 = class UnknownFeedError extends xrpc_1$N.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	};
	getFeed.UnknownFeedError = UnknownFeedError$1;
	function toKnownErr$L(e) {
	  if (e instanceof xrpc_1$N.XRPCError) {
	    if (e.error === 'UnknownFeed') return new UnknownFeedError$1(e);
	  }
	  return e;
	}
	getFeed.toKnownErr = toKnownErr$L;

	var getFeedGenerator = {};

	Object.defineProperty(getFeedGenerator, "__esModule", {
	  value: true
	});
	getFeedGenerator.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$M = dist;
	function toKnownErr$K(e) {
	  if (e instanceof xrpc_1$M.XRPCError) ;
	  return e;
	}
	getFeedGenerator.toKnownErr = toKnownErr$K;

	var getFeedGenerators = {};

	Object.defineProperty(getFeedGenerators, "__esModule", {
	  value: true
	});
	getFeedGenerators.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$L = dist;
	function toKnownErr$J(e) {
	  if (e instanceof xrpc_1$L.XRPCError) ;
	  return e;
	}
	getFeedGenerators.toKnownErr = toKnownErr$J;

	var getFeedSkeleton = {};

	Object.defineProperty(getFeedSkeleton, "__esModule", {
	  value: true
	});
	getFeedSkeleton.toKnownErr = getFeedSkeleton.UnknownFeedError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$K = dist;
	class UnknownFeedError extends xrpc_1$K.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	getFeedSkeleton.UnknownFeedError = UnknownFeedError;
	function toKnownErr$I(e) {
	  if (e instanceof xrpc_1$K.XRPCError) {
	    if (e.error === 'UnknownFeed') return new UnknownFeedError(e);
	  }
	  return e;
	}
	getFeedSkeleton.toKnownErr = toKnownErr$I;

	var getLikes = {};

	Object.defineProperty(getLikes, "__esModule", {
	  value: true
	});
	getLikes.validateLike = getLikes.isLike = getLikes.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$J = dist;
	const util_1$y = util$2;
	const lexicons_1$x = lexicons;
	function toKnownErr$H(e) {
	  if (e instanceof xrpc_1$J.XRPCError) ;
	  return e;
	}
	getLikes.toKnownErr = toKnownErr$H;
	function isLike(v) {
	  return (0, util_1$y.isObj)(v) && (0, util_1$y.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.getLikes#like';
	}
	getLikes.isLike = isLike;
	function validateLike(v) {
	  return lexicons_1$x.lexicons.validate('app.bsky.feed.getLikes#like', v);
	}
	getLikes.validateLike = validateLike;

	var getListFeed = {};

	Object.defineProperty(getListFeed, "__esModule", {
	  value: true
	});
	getListFeed.toKnownErr = getListFeed.UnknownListError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$I = dist;
	class UnknownListError extends xrpc_1$I.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	getListFeed.UnknownListError = UnknownListError;
	function toKnownErr$G(e) {
	  if (e instanceof xrpc_1$I.XRPCError) {
	    if (e.error === 'UnknownList') return new UnknownListError(e);
	  }
	  return e;
	}
	getListFeed.toKnownErr = toKnownErr$G;

	var getPostThread = {};

	Object.defineProperty(getPostThread, "__esModule", {
	  value: true
	});
	getPostThread.toKnownErr = getPostThread.NotFoundError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$H = dist;
	class NotFoundError extends xrpc_1$H.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	getPostThread.NotFoundError = NotFoundError;
	function toKnownErr$F(e) {
	  if (e instanceof xrpc_1$H.XRPCError) {
	    if (e.error === 'NotFound') return new NotFoundError(e);
	  }
	  return e;
	}
	getPostThread.toKnownErr = toKnownErr$F;

	var getPosts = {};

	Object.defineProperty(getPosts, "__esModule", {
	  value: true
	});
	getPosts.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$G = dist;
	function toKnownErr$E(e) {
	  if (e instanceof xrpc_1$G.XRPCError) ;
	  return e;
	}
	getPosts.toKnownErr = toKnownErr$E;

	var getRepostedBy = {};

	Object.defineProperty(getRepostedBy, "__esModule", {
	  value: true
	});
	getRepostedBy.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$F = dist;
	function toKnownErr$D(e) {
	  if (e instanceof xrpc_1$F.XRPCError) ;
	  return e;
	}
	getRepostedBy.toKnownErr = toKnownErr$D;

	var getSuggestedFeeds = {};

	Object.defineProperty(getSuggestedFeeds, "__esModule", {
	  value: true
	});
	getSuggestedFeeds.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$E = dist;
	function toKnownErr$C(e) {
	  if (e instanceof xrpc_1$E.XRPCError) ;
	  return e;
	}
	getSuggestedFeeds.toKnownErr = toKnownErr$C;

	var getTimeline = {};

	Object.defineProperty(getTimeline, "__esModule", {
	  value: true
	});
	getTimeline.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$D = dist;
	function toKnownErr$B(e) {
	  if (e instanceof xrpc_1$D.XRPCError) ;
	  return e;
	}
	getTimeline.toKnownErr = toKnownErr$B;

	var searchPosts = {};

	Object.defineProperty(searchPosts, "__esModule", {
	  value: true
	});
	searchPosts.toKnownErr = searchPosts.BadQueryStringError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$C = dist;
	let BadQueryStringError$2 = class BadQueryStringError extends xrpc_1$C.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	};
	searchPosts.BadQueryStringError = BadQueryStringError$2;
	function toKnownErr$A(e) {
	  if (e instanceof xrpc_1$C.XRPCError) {
	    if (e.error === 'BadQueryString') return new BadQueryStringError$2(e);
	  }
	  return e;
	}
	searchPosts.toKnownErr = toKnownErr$A;

	var sendInteractions = {};

	Object.defineProperty(sendInteractions, "__esModule", {
	  value: true
	});
	sendInteractions.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$B = dist;
	function toKnownErr$z(e) {
	  if (e instanceof xrpc_1$B.XRPCError) ;
	  return e;
	}
	sendInteractions.toKnownErr = toKnownErr$z;

	var getBlocks = {};

	Object.defineProperty(getBlocks, "__esModule", {
	  value: true
	});
	getBlocks.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$A = dist;
	function toKnownErr$y(e) {
	  if (e instanceof xrpc_1$A.XRPCError) ;
	  return e;
	}
	getBlocks.toKnownErr = toKnownErr$y;

	var getFollowers = {};

	Object.defineProperty(getFollowers, "__esModule", {
	  value: true
	});
	getFollowers.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$z = dist;
	function toKnownErr$x(e) {
	  if (e instanceof xrpc_1$z.XRPCError) ;
	  return e;
	}
	getFollowers.toKnownErr = toKnownErr$x;

	var getFollows = {};

	Object.defineProperty(getFollows, "__esModule", {
	  value: true
	});
	getFollows.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$y = dist;
	function toKnownErr$w(e) {
	  if (e instanceof xrpc_1$y.XRPCError) ;
	  return e;
	}
	getFollows.toKnownErr = toKnownErr$w;

	var getList = {};

	Object.defineProperty(getList, "__esModule", {
	  value: true
	});
	getList.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$x = dist;
	function toKnownErr$v(e) {
	  if (e instanceof xrpc_1$x.XRPCError) ;
	  return e;
	}
	getList.toKnownErr = toKnownErr$v;

	var getListBlocks = {};

	Object.defineProperty(getListBlocks, "__esModule", {
	  value: true
	});
	getListBlocks.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$w = dist;
	function toKnownErr$u(e) {
	  if (e instanceof xrpc_1$w.XRPCError) ;
	  return e;
	}
	getListBlocks.toKnownErr = toKnownErr$u;

	var getListMutes = {};

	Object.defineProperty(getListMutes, "__esModule", {
	  value: true
	});
	getListMutes.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$v = dist;
	function toKnownErr$t(e) {
	  if (e instanceof xrpc_1$v.XRPCError) ;
	  return e;
	}
	getListMutes.toKnownErr = toKnownErr$t;

	var getLists = {};

	Object.defineProperty(getLists, "__esModule", {
	  value: true
	});
	getLists.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$u = dist;
	function toKnownErr$s(e) {
	  if (e instanceof xrpc_1$u.XRPCError) ;
	  return e;
	}
	getLists.toKnownErr = toKnownErr$s;

	var getMutes = {};

	Object.defineProperty(getMutes, "__esModule", {
	  value: true
	});
	getMutes.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$t = dist;
	function toKnownErr$r(e) {
	  if (e instanceof xrpc_1$t.XRPCError) ;
	  return e;
	}
	getMutes.toKnownErr = toKnownErr$r;

	var getRelationships = {};

	Object.defineProperty(getRelationships, "__esModule", {
	  value: true
	});
	getRelationships.toKnownErr = getRelationships.ActorNotFoundError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$s = dist;
	class ActorNotFoundError extends xrpc_1$s.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	getRelationships.ActorNotFoundError = ActorNotFoundError;
	function toKnownErr$q(e) {
	  if (e instanceof xrpc_1$s.XRPCError) {
	    if (e.error === 'ActorNotFound') return new ActorNotFoundError(e);
	  }
	  return e;
	}
	getRelationships.toKnownErr = toKnownErr$q;

	var getSuggestedFollowsByActor = {};

	Object.defineProperty(getSuggestedFollowsByActor, "__esModule", {
	  value: true
	});
	getSuggestedFollowsByActor.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$r = dist;
	function toKnownErr$p(e) {
	  if (e instanceof xrpc_1$r.XRPCError) ;
	  return e;
	}
	getSuggestedFollowsByActor.toKnownErr = toKnownErr$p;

	var muteActor = {};

	Object.defineProperty(muteActor, "__esModule", {
	  value: true
	});
	muteActor.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$q = dist;
	function toKnownErr$o(e) {
	  if (e instanceof xrpc_1$q.XRPCError) ;
	  return e;
	}
	muteActor.toKnownErr = toKnownErr$o;

	var muteActorList = {};

	Object.defineProperty(muteActorList, "__esModule", {
	  value: true
	});
	muteActorList.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$p = dist;
	function toKnownErr$n(e) {
	  if (e instanceof xrpc_1$p.XRPCError) ;
	  return e;
	}
	muteActorList.toKnownErr = toKnownErr$n;

	var unmuteActor = {};

	Object.defineProperty(unmuteActor, "__esModule", {
	  value: true
	});
	unmuteActor.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$o = dist;
	function toKnownErr$m(e) {
	  if (e instanceof xrpc_1$o.XRPCError) ;
	  return e;
	}
	unmuteActor.toKnownErr = toKnownErr$m;

	var unmuteActorList = {};

	Object.defineProperty(unmuteActorList, "__esModule", {
	  value: true
	});
	unmuteActorList.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$n = dist;
	function toKnownErr$l(e) {
	  if (e instanceof xrpc_1$n.XRPCError) ;
	  return e;
	}
	unmuteActorList.toKnownErr = toKnownErr$l;

	var getServices = {};

	Object.defineProperty(getServices, "__esModule", {
	  value: true
	});
	getServices.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$m = dist;
	function toKnownErr$k(e) {
	  if (e instanceof xrpc_1$m.XRPCError) ;
	  return e;
	}
	getServices.toKnownErr = toKnownErr$k;

	var getUnreadCount = {};

	Object.defineProperty(getUnreadCount, "__esModule", {
	  value: true
	});
	getUnreadCount.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$l = dist;
	function toKnownErr$j(e) {
	  if (e instanceof xrpc_1$l.XRPCError) ;
	  return e;
	}
	getUnreadCount.toKnownErr = toKnownErr$j;

	var listNotifications = {};

	Object.defineProperty(listNotifications, "__esModule", {
	  value: true
	});
	listNotifications.validateNotification = listNotifications.isNotification = listNotifications.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$k = dist;
	const util_1$x = util$2;
	const lexicons_1$w = lexicons;
	function toKnownErr$i(e) {
	  if (e instanceof xrpc_1$k.XRPCError) ;
	  return e;
	}
	listNotifications.toKnownErr = toKnownErr$i;
	function isNotification(v) {
	  return (0, util_1$x.isObj)(v) && (0, util_1$x.hasProp)(v, '$type') && v.$type === 'app.bsky.notification.listNotifications#notification';
	}
	listNotifications.isNotification = isNotification;
	function validateNotification(v) {
	  return lexicons_1$w.lexicons.validate('app.bsky.notification.listNotifications#notification', v);
	}
	listNotifications.validateNotification = validateNotification;

	var registerPush = {};

	Object.defineProperty(registerPush, "__esModule", {
	  value: true
	});
	registerPush.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$j = dist;
	function toKnownErr$h(e) {
	  if (e instanceof xrpc_1$j.XRPCError) ;
	  return e;
	}
	registerPush.toKnownErr = toKnownErr$h;

	var updateSeen = {};

	Object.defineProperty(updateSeen, "__esModule", {
	  value: true
	});
	updateSeen.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$i = dist;
	function toKnownErr$g(e) {
	  if (e instanceof xrpc_1$i.XRPCError) ;
	  return e;
	}
	updateSeen.toKnownErr = toKnownErr$g;

	var getPopularFeedGenerators = {};

	Object.defineProperty(getPopularFeedGenerators, "__esModule", {
	  value: true
	});
	getPopularFeedGenerators.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$h = dist;
	function toKnownErr$f(e) {
	  if (e instanceof xrpc_1$h.XRPCError) ;
	  return e;
	}
	getPopularFeedGenerators.toKnownErr = toKnownErr$f;

	var getSuggestionsSkeleton = {};

	Object.defineProperty(getSuggestionsSkeleton, "__esModule", {
	  value: true
	});
	getSuggestionsSkeleton.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$g = dist;
	function toKnownErr$e(e) {
	  if (e instanceof xrpc_1$g.XRPCError) ;
	  return e;
	}
	getSuggestionsSkeleton.toKnownErr = toKnownErr$e;

	var getTaggedSuggestions = {};

	Object.defineProperty(getTaggedSuggestions, "__esModule", {
	  value: true
	});
	getTaggedSuggestions.validateSuggestion = getTaggedSuggestions.isSuggestion = getTaggedSuggestions.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$f = dist;
	const util_1$w = util$2;
	const lexicons_1$v = lexicons;
	function toKnownErr$d(e) {
	  if (e instanceof xrpc_1$f.XRPCError) ;
	  return e;
	}
	getTaggedSuggestions.toKnownErr = toKnownErr$d;
	function isSuggestion(v) {
	  return (0, util_1$w.isObj)(v) && (0, util_1$w.hasProp)(v, '$type') && v.$type === 'app.bsky.unspecced.getTaggedSuggestions#suggestion';
	}
	getTaggedSuggestions.isSuggestion = isSuggestion;
	function validateSuggestion(v) {
	  return lexicons_1$v.lexicons.validate('app.bsky.unspecced.getTaggedSuggestions#suggestion', v);
	}
	getTaggedSuggestions.validateSuggestion = validateSuggestion;

	var searchActorsSkeleton = {};

	Object.defineProperty(searchActorsSkeleton, "__esModule", {
	  value: true
	});
	searchActorsSkeleton.toKnownErr = searchActorsSkeleton.BadQueryStringError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$e = dist;
	let BadQueryStringError$1 = class BadQueryStringError extends xrpc_1$e.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	};
	searchActorsSkeleton.BadQueryStringError = BadQueryStringError$1;
	function toKnownErr$c(e) {
	  if (e instanceof xrpc_1$e.XRPCError) {
	    if (e.error === 'BadQueryString') return new BadQueryStringError$1(e);
	  }
	  return e;
	}
	searchActorsSkeleton.toKnownErr = toKnownErr$c;

	var searchPostsSkeleton = {};

	Object.defineProperty(searchPostsSkeleton, "__esModule", {
	  value: true
	});
	searchPostsSkeleton.toKnownErr = searchPostsSkeleton.BadQueryStringError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$d = dist;
	class BadQueryStringError extends xrpc_1$d.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	searchPostsSkeleton.BadQueryStringError = BadQueryStringError;
	function toKnownErr$b(e) {
	  if (e instanceof xrpc_1$d.XRPCError) {
	    if (e.error === 'BadQueryString') return new BadQueryStringError(e);
	  }
	  return e;
	}
	searchPostsSkeleton.toKnownErr = toKnownErr$b;

	var createTemplate = {};

	Object.defineProperty(createTemplate, "__esModule", {
	  value: true
	});
	createTemplate.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$c = dist;
	function toKnownErr$a(e) {
	  if (e instanceof xrpc_1$c.XRPCError) ;
	  return e;
	}
	createTemplate.toKnownErr = toKnownErr$a;

	var deleteTemplate = {};

	Object.defineProperty(deleteTemplate, "__esModule", {
	  value: true
	});
	deleteTemplate.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$b = dist;
	function toKnownErr$9(e) {
	  if (e instanceof xrpc_1$b.XRPCError) ;
	  return e;
	}
	deleteTemplate.toKnownErr = toKnownErr$9;

	var listTemplates = {};

	Object.defineProperty(listTemplates, "__esModule", {
	  value: true
	});
	listTemplates.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$a = dist;
	function toKnownErr$8(e) {
	  if (e instanceof xrpc_1$a.XRPCError) ;
	  return e;
	}
	listTemplates.toKnownErr = toKnownErr$8;

	var updateTemplate = {};

	Object.defineProperty(updateTemplate, "__esModule", {
	  value: true
	});
	updateTemplate.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$9 = dist;
	function toKnownErr$7(e) {
	  if (e instanceof xrpc_1$9.XRPCError) ;
	  return e;
	}
	updateTemplate.toKnownErr = toKnownErr$7;

	var emitEvent = {};

	Object.defineProperty(emitEvent, "__esModule", {
	  value: true
	});
	emitEvent.toKnownErr = emitEvent.SubjectHasActionError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$8 = dist;
	class SubjectHasActionError extends xrpc_1$8.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	emitEvent.SubjectHasActionError = SubjectHasActionError;
	function toKnownErr$6(e) {
	  if (e instanceof xrpc_1$8.XRPCError) {
	    if (e.error === 'SubjectHasAction') return new SubjectHasActionError(e);
	  }
	  return e;
	}
	emitEvent.toKnownErr = toKnownErr$6;

	var getEvent = {};

	Object.defineProperty(getEvent, "__esModule", {
	  value: true
	});
	getEvent.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$7 = dist;
	function toKnownErr$5(e) {
	  if (e instanceof xrpc_1$7.XRPCError) ;
	  return e;
	}
	getEvent.toKnownErr = toKnownErr$5;

	var getRecord = {};

	Object.defineProperty(getRecord, "__esModule", {
	  value: true
	});
	getRecord.toKnownErr = getRecord.RecordNotFoundError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$6 = dist;
	class RecordNotFoundError extends xrpc_1$6.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	getRecord.RecordNotFoundError = RecordNotFoundError;
	function toKnownErr$4(e) {
	  if (e instanceof xrpc_1$6.XRPCError) {
	    if (e.error === 'RecordNotFound') return new RecordNotFoundError(e);
	  }
	  return e;
	}
	getRecord.toKnownErr = toKnownErr$4;

	var getRepo = {};

	Object.defineProperty(getRepo, "__esModule", {
	  value: true
	});
	getRepo.toKnownErr = getRepo.RepoNotFoundError = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$5 = dist;
	class RepoNotFoundError extends xrpc_1$5.XRPCError {
	  constructor(src) {
	    super(src.status, src.error, src.message, src.headers);
	  }
	}
	getRepo.RepoNotFoundError = RepoNotFoundError;
	function toKnownErr$3(e) {
	  if (e instanceof xrpc_1$5.XRPCError) {
	    if (e.error === 'RepoNotFound') return new RepoNotFoundError(e);
	  }
	  return e;
	}
	getRepo.toKnownErr = toKnownErr$3;

	var queryEvents = {};

	Object.defineProperty(queryEvents, "__esModule", {
	  value: true
	});
	queryEvents.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$4 = dist;
	function toKnownErr$2(e) {
	  if (e instanceof xrpc_1$4.XRPCError) ;
	  return e;
	}
	queryEvents.toKnownErr = toKnownErr$2;

	var queryStatuses = {};

	Object.defineProperty(queryStatuses, "__esModule", {
	  value: true
	});
	queryStatuses.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$3 = dist;
	function toKnownErr$1(e) {
	  if (e instanceof xrpc_1$3.XRPCError) ;
	  return e;
	}
	queryStatuses.toKnownErr = toKnownErr$1;

	var searchRepos = {};

	Object.defineProperty(searchRepos, "__esModule", {
	  value: true
	});
	searchRepos.toKnownErr = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$2 = dist;
	function toKnownErr(e) {
	  if (e instanceof xrpc_1$2.XRPCError) ;
	  return e;
	}
	searchRepos.toKnownErr = toKnownErr;

	var defs$a = {};

	Object.defineProperty(defs$a, "__esModule", {
	  value: true
	});
	defs$a.validateRepoBlobRef = defs$a.isRepoBlobRef = defs$a.validateRepoRef = defs$a.isRepoRef = defs$a.validateAccountView = defs$a.isAccountView = defs$a.validateStatusAttr = defs$a.isStatusAttr = void 0;
	const util_1$v = util$2;
	const lexicons_1$u = lexicons;
	function isStatusAttr(v) {
	  return (0, util_1$v.isObj)(v) && (0, util_1$v.hasProp)(v, '$type') && v.$type === 'com.atproto.admin.defs#statusAttr';
	}
	defs$a.isStatusAttr = isStatusAttr;
	function validateStatusAttr(v) {
	  return lexicons_1$u.lexicons.validate('com.atproto.admin.defs#statusAttr', v);
	}
	defs$a.validateStatusAttr = validateStatusAttr;
	function isAccountView(v) {
	  return (0, util_1$v.isObj)(v) && (0, util_1$v.hasProp)(v, '$type') && v.$type === 'com.atproto.admin.defs#accountView';
	}
	defs$a.isAccountView = isAccountView;
	function validateAccountView(v) {
	  return lexicons_1$u.lexicons.validate('com.atproto.admin.defs#accountView', v);
	}
	defs$a.validateAccountView = validateAccountView;
	function isRepoRef(v) {
	  return (0, util_1$v.isObj)(v) && (0, util_1$v.hasProp)(v, '$type') && v.$type === 'com.atproto.admin.defs#repoRef';
	}
	defs$a.isRepoRef = isRepoRef;
	function validateRepoRef(v) {
	  return lexicons_1$u.lexicons.validate('com.atproto.admin.defs#repoRef', v);
	}
	defs$a.validateRepoRef = validateRepoRef;
	function isRepoBlobRef(v) {
	  return (0, util_1$v.isObj)(v) && (0, util_1$v.hasProp)(v, '$type') && v.$type === 'com.atproto.admin.defs#repoBlobRef';
	}
	defs$a.isRepoBlobRef = isRepoBlobRef;
	function validateRepoBlobRef(v) {
	  return lexicons_1$u.lexicons.validate('com.atproto.admin.defs#repoBlobRef', v);
	}
	defs$a.validateRepoBlobRef = validateRepoBlobRef;

	var defs$9 = {};

	Object.defineProperty(defs$9, "__esModule", {
	  value: true
	});
	defs$9.validateLabelValueDefinitionStrings = defs$9.isLabelValueDefinitionStrings = defs$9.validateLabelValueDefinition = defs$9.isLabelValueDefinition = defs$9.validateSelfLabel = defs$9.isSelfLabel = defs$9.validateSelfLabels = defs$9.isSelfLabels = defs$9.validateLabel = defs$9.isLabel = void 0;
	const util_1$u = util$2;
	const lexicons_1$t = lexicons;
	function isLabel(v) {
	  return (0, util_1$u.isObj)(v) && (0, util_1$u.hasProp)(v, '$type') && v.$type === 'com.atproto.label.defs#label';
	}
	defs$9.isLabel = isLabel;
	function validateLabel(v) {
	  return lexicons_1$t.lexicons.validate('com.atproto.label.defs#label', v);
	}
	defs$9.validateLabel = validateLabel;
	function isSelfLabels(v) {
	  return (0, util_1$u.isObj)(v) && (0, util_1$u.hasProp)(v, '$type') && v.$type === 'com.atproto.label.defs#selfLabels';
	}
	defs$9.isSelfLabels = isSelfLabels;
	function validateSelfLabels(v) {
	  return lexicons_1$t.lexicons.validate('com.atproto.label.defs#selfLabels', v);
	}
	defs$9.validateSelfLabels = validateSelfLabels;
	function isSelfLabel(v) {
	  return (0, util_1$u.isObj)(v) && (0, util_1$u.hasProp)(v, '$type') && v.$type === 'com.atproto.label.defs#selfLabel';
	}
	defs$9.isSelfLabel = isSelfLabel;
	function validateSelfLabel(v) {
	  return lexicons_1$t.lexicons.validate('com.atproto.label.defs#selfLabel', v);
	}
	defs$9.validateSelfLabel = validateSelfLabel;
	function isLabelValueDefinition(v) {
	  return (0, util_1$u.isObj)(v) && (0, util_1$u.hasProp)(v, '$type') && v.$type === 'com.atproto.label.defs#labelValueDefinition';
	}
	defs$9.isLabelValueDefinition = isLabelValueDefinition;
	function validateLabelValueDefinition(v) {
	  return lexicons_1$t.lexicons.validate('com.atproto.label.defs#labelValueDefinition', v);
	}
	defs$9.validateLabelValueDefinition = validateLabelValueDefinition;
	function isLabelValueDefinitionStrings(v) {
	  return (0, util_1$u.isObj)(v) && (0, util_1$u.hasProp)(v, '$type') && v.$type === 'com.atproto.label.defs#labelValueDefinitionStrings';
	}
	defs$9.isLabelValueDefinitionStrings = isLabelValueDefinitionStrings;
	function validateLabelValueDefinitionStrings(v) {
	  return lexicons_1$t.lexicons.validate('com.atproto.label.defs#labelValueDefinitionStrings', v);
	}
	defs$9.validateLabelValueDefinitionStrings = validateLabelValueDefinitionStrings;

	var subscribeLabels = {};

	Object.defineProperty(subscribeLabels, "__esModule", {
	  value: true
	});
	subscribeLabels.validateInfo = subscribeLabels.isInfo = subscribeLabels.validateLabels = subscribeLabels.isLabels = void 0;
	const util_1$t = util$2;
	const lexicons_1$s = lexicons;
	function isLabels(v) {
	  return (0, util_1$t.isObj)(v) && (0, util_1$t.hasProp)(v, '$type') && v.$type === 'com.atproto.label.subscribeLabels#labels';
	}
	subscribeLabels.isLabels = isLabels;
	function validateLabels(v) {
	  return lexicons_1$s.lexicons.validate('com.atproto.label.subscribeLabels#labels', v);
	}
	subscribeLabels.validateLabels = validateLabels;
	function isInfo$1(v) {
	  return (0, util_1$t.isObj)(v) && (0, util_1$t.hasProp)(v, '$type') && v.$type === 'com.atproto.label.subscribeLabels#info';
	}
	subscribeLabels.isInfo = isInfo$1;
	function validateInfo$1(v) {
	  return lexicons_1$s.lexicons.validate('com.atproto.label.subscribeLabels#info', v);
	}
	subscribeLabels.validateInfo = validateInfo$1;

	var defs$8 = {};

	Object.defineProperty(defs$8, "__esModule", {
	  value: true
	});
	defs$8.REASONAPPEAL = defs$8.REASONOTHER = defs$8.REASONRUDE = defs$8.REASONSEXUAL = defs$8.REASONMISLEADING = defs$8.REASONVIOLATION = defs$8.REASONSPAM = void 0;
	/** Spam: frequent unwanted promotion, replies, mentions */
	defs$8.REASONSPAM = 'com.atproto.moderation.defs#reasonSpam';
	/** Direct violation of server rules, laws, terms of service */
	defs$8.REASONVIOLATION = 'com.atproto.moderation.defs#reasonViolation';
	/** Misleading identity, affiliation, or content */
	defs$8.REASONMISLEADING = 'com.atproto.moderation.defs#reasonMisleading';
	/** Unwanted or mislabeled sexual content */
	defs$8.REASONSEXUAL = 'com.atproto.moderation.defs#reasonSexual';
	/** Rude, harassing, explicit, or otherwise unwelcoming behavior */
	defs$8.REASONRUDE = 'com.atproto.moderation.defs#reasonRude';
	/** Other: reports not falling under another report category */
	defs$8.REASONOTHER = 'com.atproto.moderation.defs#reasonOther';
	/** Appeal: appeal a previously taken moderation action */
	defs$8.REASONAPPEAL = 'com.atproto.moderation.defs#reasonAppeal';

	var strongRef = {};

	Object.defineProperty(strongRef, "__esModule", {
	  value: true
	});
	strongRef.validateMain = strongRef.isMain = void 0;
	const util_1$s = util$2;
	const lexicons_1$r = lexicons;
	function isMain$5(v) {
	  return (0, util_1$s.isObj)(v) && (0, util_1$s.hasProp)(v, '$type') && (v.$type === 'com.atproto.repo.strongRef#main' || v.$type === 'com.atproto.repo.strongRef');
	}
	strongRef.isMain = isMain$5;
	function validateMain$5(v) {
	  return lexicons_1$r.lexicons.validate('com.atproto.repo.strongRef#main', v);
	}
	strongRef.validateMain = validateMain$5;

	var defs$7 = {};

	Object.defineProperty(defs$7, "__esModule", {
	  value: true
	});
	defs$7.validateInviteCodeUse = defs$7.isInviteCodeUse = defs$7.validateInviteCode = defs$7.isInviteCode = void 0;
	const util_1$r = util$2;
	const lexicons_1$q = lexicons;
	function isInviteCode(v) {
	  return (0, util_1$r.isObj)(v) && (0, util_1$r.hasProp)(v, '$type') && v.$type === 'com.atproto.server.defs#inviteCode';
	}
	defs$7.isInviteCode = isInviteCode;
	function validateInviteCode(v) {
	  return lexicons_1$q.lexicons.validate('com.atproto.server.defs#inviteCode', v);
	}
	defs$7.validateInviteCode = validateInviteCode;
	function isInviteCodeUse(v) {
	  return (0, util_1$r.isObj)(v) && (0, util_1$r.hasProp)(v, '$type') && v.$type === 'com.atproto.server.defs#inviteCodeUse';
	}
	defs$7.isInviteCodeUse = isInviteCodeUse;
	function validateInviteCodeUse(v) {
	  return lexicons_1$q.lexicons.validate('com.atproto.server.defs#inviteCodeUse', v);
	}
	defs$7.validateInviteCodeUse = validateInviteCodeUse;

	var subscribeRepos = {};

	Object.defineProperty(subscribeRepos, "__esModule", {
	  value: true
	});
	subscribeRepos.validateRepoOp = subscribeRepos.isRepoOp = subscribeRepos.validateInfo = subscribeRepos.isInfo = subscribeRepos.validateTombstone = subscribeRepos.isTombstone = subscribeRepos.validateMigrate = subscribeRepos.isMigrate = subscribeRepos.validateHandle = subscribeRepos.isHandle = subscribeRepos.validateIdentity = subscribeRepos.isIdentity = subscribeRepos.validateCommit = subscribeRepos.isCommit = void 0;
	const util_1$q = util$2;
	const lexicons_1$p = lexicons;
	function isCommit(v) {
	  return (0, util_1$q.isObj)(v) && (0, util_1$q.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.subscribeRepos#commit';
	}
	subscribeRepos.isCommit = isCommit;
	function validateCommit(v) {
	  return lexicons_1$p.lexicons.validate('com.atproto.sync.subscribeRepos#commit', v);
	}
	subscribeRepos.validateCommit = validateCommit;
	function isIdentity(v) {
	  return (0, util_1$q.isObj)(v) && (0, util_1$q.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.subscribeRepos#identity';
	}
	subscribeRepos.isIdentity = isIdentity;
	function validateIdentity(v) {
	  return lexicons_1$p.lexicons.validate('com.atproto.sync.subscribeRepos#identity', v);
	}
	subscribeRepos.validateIdentity = validateIdentity;
	function isHandle(v) {
	  return (0, util_1$q.isObj)(v) && (0, util_1$q.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.subscribeRepos#handle';
	}
	subscribeRepos.isHandle = isHandle;
	function validateHandle(v) {
	  return lexicons_1$p.lexicons.validate('com.atproto.sync.subscribeRepos#handle', v);
	}
	subscribeRepos.validateHandle = validateHandle;
	function isMigrate(v) {
	  return (0, util_1$q.isObj)(v) && (0, util_1$q.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.subscribeRepos#migrate';
	}
	subscribeRepos.isMigrate = isMigrate;
	function validateMigrate(v) {
	  return lexicons_1$p.lexicons.validate('com.atproto.sync.subscribeRepos#migrate', v);
	}
	subscribeRepos.validateMigrate = validateMigrate;
	function isTombstone(v) {
	  return (0, util_1$q.isObj)(v) && (0, util_1$q.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.subscribeRepos#tombstone';
	}
	subscribeRepos.isTombstone = isTombstone;
	function validateTombstone(v) {
	  return lexicons_1$p.lexicons.validate('com.atproto.sync.subscribeRepos#tombstone', v);
	}
	subscribeRepos.validateTombstone = validateTombstone;
	function isInfo(v) {
	  return (0, util_1$q.isObj)(v) && (0, util_1$q.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.subscribeRepos#info';
	}
	subscribeRepos.isInfo = isInfo;
	function validateInfo(v) {
	  return lexicons_1$p.lexicons.validate('com.atproto.sync.subscribeRepos#info', v);
	}
	subscribeRepos.validateInfo = validateInfo;
	function isRepoOp(v) {
	  return (0, util_1$q.isObj)(v) && (0, util_1$q.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.subscribeRepos#repoOp';
	}
	subscribeRepos.isRepoOp = isRepoOp;
	function validateRepoOp(v) {
	  return lexicons_1$p.lexicons.validate('com.atproto.sync.subscribeRepos#repoOp', v);
	}
	subscribeRepos.validateRepoOp = validateRepoOp;

	var defs$6 = {};

	Object.defineProperty(defs$6, "__esModule", {
	  value: true
	});
	defs$6.validateLabelerPrefItem = defs$6.isLabelerPrefItem = defs$6.validateLabelersPref = defs$6.isLabelersPref = defs$6.validateHiddenPostsPref = defs$6.isHiddenPostsPref = defs$6.validateMutedWordsPref = defs$6.isMutedWordsPref = defs$6.validateMutedWord = defs$6.isMutedWord = defs$6.validateInterestsPref = defs$6.isInterestsPref = defs$6.validateThreadViewPref = defs$6.isThreadViewPref = defs$6.validateFeedViewPref = defs$6.isFeedViewPref = defs$6.validatePersonalDetailsPref = defs$6.isPersonalDetailsPref = defs$6.validateSavedFeedsPref = defs$6.isSavedFeedsPref = defs$6.validateSavedFeedsPrefV2 = defs$6.isSavedFeedsPrefV2 = defs$6.validateSavedFeed = defs$6.isSavedFeed = defs$6.validateContentLabelPref = defs$6.isContentLabelPref = defs$6.validateAdultContentPref = defs$6.isAdultContentPref = defs$6.validateViewerState = defs$6.isViewerState = defs$6.validateProfileAssociated = defs$6.isProfileAssociated = defs$6.validateProfileViewDetailed = defs$6.isProfileViewDetailed = defs$6.validateProfileView = defs$6.isProfileView = defs$6.validateProfileViewBasic = defs$6.isProfileViewBasic = void 0;
	const util_1$p = util$2;
	const lexicons_1$o = lexicons;
	function isProfileViewBasic(v) {
	  return (0, util_1$p.isObj)(v) && (0, util_1$p.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#profileViewBasic';
	}
	defs$6.isProfileViewBasic = isProfileViewBasic;
	function validateProfileViewBasic(v) {
	  return lexicons_1$o.lexicons.validate('app.bsky.actor.defs#profileViewBasic', v);
	}
	defs$6.validateProfileViewBasic = validateProfileViewBasic;
	function isProfileView(v) {
	  return (0, util_1$p.isObj)(v) && (0, util_1$p.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#profileView';
	}
	defs$6.isProfileView = isProfileView;
	function validateProfileView(v) {
	  return lexicons_1$o.lexicons.validate('app.bsky.actor.defs#profileView', v);
	}
	defs$6.validateProfileView = validateProfileView;
	function isProfileViewDetailed(v) {
	  return (0, util_1$p.isObj)(v) && (0, util_1$p.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#profileViewDetailed';
	}
	defs$6.isProfileViewDetailed = isProfileViewDetailed;
	function validateProfileViewDetailed(v) {
	  return lexicons_1$o.lexicons.validate('app.bsky.actor.defs#profileViewDetailed', v);
	}
	defs$6.validateProfileViewDetailed = validateProfileViewDetailed;
	function isProfileAssociated(v) {
	  return (0, util_1$p.isObj)(v) && (0, util_1$p.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#profileAssociated';
	}
	defs$6.isProfileAssociated = isProfileAssociated;
	function validateProfileAssociated(v) {
	  return lexicons_1$o.lexicons.validate('app.bsky.actor.defs#profileAssociated', v);
	}
	defs$6.validateProfileAssociated = validateProfileAssociated;
	function isViewerState$1(v) {
	  return (0, util_1$p.isObj)(v) && (0, util_1$p.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#viewerState';
	}
	defs$6.isViewerState = isViewerState$1;
	function validateViewerState$1(v) {
	  return lexicons_1$o.lexicons.validate('app.bsky.actor.defs#viewerState', v);
	}
	defs$6.validateViewerState = validateViewerState$1;
	function isAdultContentPref(v) {
	  return (0, util_1$p.isObj)(v) && (0, util_1$p.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#adultContentPref';
	}
	defs$6.isAdultContentPref = isAdultContentPref;
	function validateAdultContentPref(v) {
	  return lexicons_1$o.lexicons.validate('app.bsky.actor.defs#adultContentPref', v);
	}
	defs$6.validateAdultContentPref = validateAdultContentPref;
	function isContentLabelPref(v) {
	  return (0, util_1$p.isObj)(v) && (0, util_1$p.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#contentLabelPref';
	}
	defs$6.isContentLabelPref = isContentLabelPref;
	function validateContentLabelPref(v) {
	  return lexicons_1$o.lexicons.validate('app.bsky.actor.defs#contentLabelPref', v);
	}
	defs$6.validateContentLabelPref = validateContentLabelPref;
	function isSavedFeed(v) {
	  return (0, util_1$p.isObj)(v) && (0, util_1$p.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#savedFeed';
	}
	defs$6.isSavedFeed = isSavedFeed;
	function validateSavedFeed(v) {
	  return lexicons_1$o.lexicons.validate('app.bsky.actor.defs#savedFeed', v);
	}
	defs$6.validateSavedFeed = validateSavedFeed;
	function isSavedFeedsPrefV2(v) {
	  return (0, util_1$p.isObj)(v) && (0, util_1$p.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#savedFeedsPrefV2';
	}
	defs$6.isSavedFeedsPrefV2 = isSavedFeedsPrefV2;
	function validateSavedFeedsPrefV2(v) {
	  return lexicons_1$o.lexicons.validate('app.bsky.actor.defs#savedFeedsPrefV2', v);
	}
	defs$6.validateSavedFeedsPrefV2 = validateSavedFeedsPrefV2;
	function isSavedFeedsPref(v) {
	  return (0, util_1$p.isObj)(v) && (0, util_1$p.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#savedFeedsPref';
	}
	defs$6.isSavedFeedsPref = isSavedFeedsPref;
	function validateSavedFeedsPref(v) {
	  return lexicons_1$o.lexicons.validate('app.bsky.actor.defs#savedFeedsPref', v);
	}
	defs$6.validateSavedFeedsPref = validateSavedFeedsPref;
	function isPersonalDetailsPref(v) {
	  return (0, util_1$p.isObj)(v) && (0, util_1$p.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#personalDetailsPref';
	}
	defs$6.isPersonalDetailsPref = isPersonalDetailsPref;
	function validatePersonalDetailsPref(v) {
	  return lexicons_1$o.lexicons.validate('app.bsky.actor.defs#personalDetailsPref', v);
	}
	defs$6.validatePersonalDetailsPref = validatePersonalDetailsPref;
	function isFeedViewPref(v) {
	  return (0, util_1$p.isObj)(v) && (0, util_1$p.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#feedViewPref';
	}
	defs$6.isFeedViewPref = isFeedViewPref;
	function validateFeedViewPref(v) {
	  return lexicons_1$o.lexicons.validate('app.bsky.actor.defs#feedViewPref', v);
	}
	defs$6.validateFeedViewPref = validateFeedViewPref;
	function isThreadViewPref(v) {
	  return (0, util_1$p.isObj)(v) && (0, util_1$p.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#threadViewPref';
	}
	defs$6.isThreadViewPref = isThreadViewPref;
	function validateThreadViewPref(v) {
	  return lexicons_1$o.lexicons.validate('app.bsky.actor.defs#threadViewPref', v);
	}
	defs$6.validateThreadViewPref = validateThreadViewPref;
	function isInterestsPref(v) {
	  return (0, util_1$p.isObj)(v) && (0, util_1$p.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#interestsPref';
	}
	defs$6.isInterestsPref = isInterestsPref;
	function validateInterestsPref(v) {
	  return lexicons_1$o.lexicons.validate('app.bsky.actor.defs#interestsPref', v);
	}
	defs$6.validateInterestsPref = validateInterestsPref;
	function isMutedWord(v) {
	  return (0, util_1$p.isObj)(v) && (0, util_1$p.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#mutedWord';
	}
	defs$6.isMutedWord = isMutedWord;
	function validateMutedWord(v) {
	  return lexicons_1$o.lexicons.validate('app.bsky.actor.defs#mutedWord', v);
	}
	defs$6.validateMutedWord = validateMutedWord;
	function isMutedWordsPref(v) {
	  return (0, util_1$p.isObj)(v) && (0, util_1$p.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#mutedWordsPref';
	}
	defs$6.isMutedWordsPref = isMutedWordsPref;
	function validateMutedWordsPref(v) {
	  return lexicons_1$o.lexicons.validate('app.bsky.actor.defs#mutedWordsPref', v);
	}
	defs$6.validateMutedWordsPref = validateMutedWordsPref;
	function isHiddenPostsPref(v) {
	  return (0, util_1$p.isObj)(v) && (0, util_1$p.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#hiddenPostsPref';
	}
	defs$6.isHiddenPostsPref = isHiddenPostsPref;
	function validateHiddenPostsPref(v) {
	  return lexicons_1$o.lexicons.validate('app.bsky.actor.defs#hiddenPostsPref', v);
	}
	defs$6.validateHiddenPostsPref = validateHiddenPostsPref;
	function isLabelersPref(v) {
	  return (0, util_1$p.isObj)(v) && (0, util_1$p.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#labelersPref';
	}
	defs$6.isLabelersPref = isLabelersPref;
	function validateLabelersPref(v) {
	  return lexicons_1$o.lexicons.validate('app.bsky.actor.defs#labelersPref', v);
	}
	defs$6.validateLabelersPref = validateLabelersPref;
	function isLabelerPrefItem(v) {
	  return (0, util_1$p.isObj)(v) && (0, util_1$p.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#labelerPrefItem';
	}
	defs$6.isLabelerPrefItem = isLabelerPrefItem;
	function validateLabelerPrefItem(v) {
	  return lexicons_1$o.lexicons.validate('app.bsky.actor.defs#labelerPrefItem', v);
	}
	defs$6.validateLabelerPrefItem = validateLabelerPrefItem;

	var profile$1 = {};

	Object.defineProperty(profile$1, "__esModule", {
	  value: true
	});
	profile$1.validateRecord = profile$1.isRecord = void 0;
	const util_1$o = util$2;
	const lexicons_1$n = lexicons;
	function isRecord$b(v) {
	  return (0, util_1$o.isObj)(v) && (0, util_1$o.hasProp)(v, '$type') && (v.$type === 'app.bsky.actor.profile#main' || v.$type === 'app.bsky.actor.profile');
	}
	profile$1.isRecord = isRecord$b;
	function validateRecord$b(v) {
	  return lexicons_1$n.lexicons.validate('app.bsky.actor.profile#main', v);
	}
	profile$1.validateRecord = validateRecord$b;

	var external = {};

	Object.defineProperty(external, "__esModule", {
	  value: true
	});
	external.validateViewExternal = external.isViewExternal = external.validateView = external.isView = external.validateExternal = external.isExternal = external.validateMain = external.isMain = void 0;
	const util_1$n = util$2;
	const lexicons_1$m = lexicons;
	function isMain$4(v) {
	  return (0, util_1$n.isObj)(v) && (0, util_1$n.hasProp)(v, '$type') && (v.$type === 'app.bsky.embed.external#main' || v.$type === 'app.bsky.embed.external');
	}
	external.isMain = isMain$4;
	function validateMain$4(v) {
	  return lexicons_1$m.lexicons.validate('app.bsky.embed.external#main', v);
	}
	external.validateMain = validateMain$4;
	function isExternal(v) {
	  return (0, util_1$n.isObj)(v) && (0, util_1$n.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.external#external';
	}
	external.isExternal = isExternal;
	function validateExternal(v) {
	  return lexicons_1$m.lexicons.validate('app.bsky.embed.external#external', v);
	}
	external.validateExternal = validateExternal;
	function isView$3(v) {
	  return (0, util_1$n.isObj)(v) && (0, util_1$n.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.external#view';
	}
	external.isView = isView$3;
	function validateView$3(v) {
	  return lexicons_1$m.lexicons.validate('app.bsky.embed.external#view', v);
	}
	external.validateView = validateView$3;
	function isViewExternal(v) {
	  return (0, util_1$n.isObj)(v) && (0, util_1$n.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.external#viewExternal';
	}
	external.isViewExternal = isViewExternal;
	function validateViewExternal(v) {
	  return lexicons_1$m.lexicons.validate('app.bsky.embed.external#viewExternal', v);
	}
	external.validateViewExternal = validateViewExternal;

	var images = {};

	Object.defineProperty(images, "__esModule", {
	  value: true
	});
	images.validateViewImage = images.isViewImage = images.validateView = images.isView = images.validateAspectRatio = images.isAspectRatio = images.validateImage = images.isImage = images.validateMain = images.isMain = void 0;
	const util_1$m = util$2;
	const lexicons_1$l = lexicons;
	function isMain$3(v) {
	  return (0, util_1$m.isObj)(v) && (0, util_1$m.hasProp)(v, '$type') && (v.$type === 'app.bsky.embed.images#main' || v.$type === 'app.bsky.embed.images');
	}
	images.isMain = isMain$3;
	function validateMain$3(v) {
	  return lexicons_1$l.lexicons.validate('app.bsky.embed.images#main', v);
	}
	images.validateMain = validateMain$3;
	function isImage(v) {
	  return (0, util_1$m.isObj)(v) && (0, util_1$m.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.images#image';
	}
	images.isImage = isImage;
	function validateImage(v) {
	  return lexicons_1$l.lexicons.validate('app.bsky.embed.images#image', v);
	}
	images.validateImage = validateImage;
	function isAspectRatio(v) {
	  return (0, util_1$m.isObj)(v) && (0, util_1$m.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.images#aspectRatio';
	}
	images.isAspectRatio = isAspectRatio;
	function validateAspectRatio(v) {
	  return lexicons_1$l.lexicons.validate('app.bsky.embed.images#aspectRatio', v);
	}
	images.validateAspectRatio = validateAspectRatio;
	function isView$2(v) {
	  return (0, util_1$m.isObj)(v) && (0, util_1$m.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.images#view';
	}
	images.isView = isView$2;
	function validateView$2(v) {
	  return lexicons_1$l.lexicons.validate('app.bsky.embed.images#view', v);
	}
	images.validateView = validateView$2;
	function isViewImage(v) {
	  return (0, util_1$m.isObj)(v) && (0, util_1$m.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.images#viewImage';
	}
	images.isViewImage = isViewImage;
	function validateViewImage(v) {
	  return lexicons_1$l.lexicons.validate('app.bsky.embed.images#viewImage', v);
	}
	images.validateViewImage = validateViewImage;

	var record = {};

	Object.defineProperty(record, "__esModule", {
	  value: true
	});
	record.validateViewBlocked = record.isViewBlocked = record.validateViewNotFound = record.isViewNotFound = record.validateViewRecord = record.isViewRecord = record.validateView = record.isView = record.validateMain = record.isMain = void 0;
	const util_1$l = util$2;
	const lexicons_1$k = lexicons;
	function isMain$2(v) {
	  return (0, util_1$l.isObj)(v) && (0, util_1$l.hasProp)(v, '$type') && (v.$type === 'app.bsky.embed.record#main' || v.$type === 'app.bsky.embed.record');
	}
	record.isMain = isMain$2;
	function validateMain$2(v) {
	  return lexicons_1$k.lexicons.validate('app.bsky.embed.record#main', v);
	}
	record.validateMain = validateMain$2;
	function isView$1(v) {
	  return (0, util_1$l.isObj)(v) && (0, util_1$l.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.record#view';
	}
	record.isView = isView$1;
	function validateView$1(v) {
	  return lexicons_1$k.lexicons.validate('app.bsky.embed.record#view', v);
	}
	record.validateView = validateView$1;
	function isViewRecord(v) {
	  return (0, util_1$l.isObj)(v) && (0, util_1$l.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.record#viewRecord';
	}
	record.isViewRecord = isViewRecord;
	function validateViewRecord(v) {
	  return lexicons_1$k.lexicons.validate('app.bsky.embed.record#viewRecord', v);
	}
	record.validateViewRecord = validateViewRecord;
	function isViewNotFound(v) {
	  return (0, util_1$l.isObj)(v) && (0, util_1$l.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.record#viewNotFound';
	}
	record.isViewNotFound = isViewNotFound;
	function validateViewNotFound(v) {
	  return lexicons_1$k.lexicons.validate('app.bsky.embed.record#viewNotFound', v);
	}
	record.validateViewNotFound = validateViewNotFound;
	function isViewBlocked(v) {
	  return (0, util_1$l.isObj)(v) && (0, util_1$l.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.record#viewBlocked';
	}
	record.isViewBlocked = isViewBlocked;
	function validateViewBlocked(v) {
	  return lexicons_1$k.lexicons.validate('app.bsky.embed.record#viewBlocked', v);
	}
	record.validateViewBlocked = validateViewBlocked;

	var recordWithMedia = {};

	Object.defineProperty(recordWithMedia, "__esModule", {
	  value: true
	});
	recordWithMedia.validateView = recordWithMedia.isView = recordWithMedia.validateMain = recordWithMedia.isMain = void 0;
	const util_1$k = util$2;
	const lexicons_1$j = lexicons;
	function isMain$1(v) {
	  return (0, util_1$k.isObj)(v) && (0, util_1$k.hasProp)(v, '$type') && (v.$type === 'app.bsky.embed.recordWithMedia#main' || v.$type === 'app.bsky.embed.recordWithMedia');
	}
	recordWithMedia.isMain = isMain$1;
	function validateMain$1(v) {
	  return lexicons_1$j.lexicons.validate('app.bsky.embed.recordWithMedia#main', v);
	}
	recordWithMedia.validateMain = validateMain$1;
	function isView(v) {
	  return (0, util_1$k.isObj)(v) && (0, util_1$k.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.recordWithMedia#view';
	}
	recordWithMedia.isView = isView;
	function validateView(v) {
	  return lexicons_1$j.lexicons.validate('app.bsky.embed.recordWithMedia#view', v);
	}
	recordWithMedia.validateView = validateView;

	var defs$5 = {};

	Object.defineProperty(defs$5, "__esModule", {
	  value: true
	});
	defs$5.INTERACTIONSHARE = defs$5.INTERACTIONQUOTE = defs$5.INTERACTIONREPLY = defs$5.INTERACTIONREPOST = defs$5.INTERACTIONLIKE = defs$5.INTERACTIONSEEN = defs$5.CLICKTHROUGHEMBED = defs$5.CLICKTHROUGHREPOSTER = defs$5.CLICKTHROUGHAUTHOR = defs$5.CLICKTHROUGHITEM = defs$5.REQUESTMORE = defs$5.REQUESTLESS = defs$5.validateInteraction = defs$5.isInteraction = defs$5.validateThreadgateView = defs$5.isThreadgateView = defs$5.validateSkeletonReasonRepost = defs$5.isSkeletonReasonRepost = defs$5.validateSkeletonFeedPost = defs$5.isSkeletonFeedPost = defs$5.validateGeneratorViewerState = defs$5.isGeneratorViewerState = defs$5.validateGeneratorView = defs$5.isGeneratorView = defs$5.validateBlockedAuthor = defs$5.isBlockedAuthor = defs$5.validateBlockedPost = defs$5.isBlockedPost = defs$5.validateNotFoundPost = defs$5.isNotFoundPost = defs$5.validateThreadViewPost = defs$5.isThreadViewPost = defs$5.validateReasonRepost = defs$5.isReasonRepost = defs$5.validateReplyRef = defs$5.isReplyRef = defs$5.validateFeedViewPost = defs$5.isFeedViewPost = defs$5.validateViewerState = defs$5.isViewerState = defs$5.validatePostView = defs$5.isPostView = void 0;
	const util_1$j = util$2;
	const lexicons_1$i = lexicons;
	function isPostView(v) {
	  return (0, util_1$j.isObj)(v) && (0, util_1$j.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#postView';
	}
	defs$5.isPostView = isPostView;
	function validatePostView(v) {
	  return lexicons_1$i.lexicons.validate('app.bsky.feed.defs#postView', v);
	}
	defs$5.validatePostView = validatePostView;
	function isViewerState(v) {
	  return (0, util_1$j.isObj)(v) && (0, util_1$j.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#viewerState';
	}
	defs$5.isViewerState = isViewerState;
	function validateViewerState(v) {
	  return lexicons_1$i.lexicons.validate('app.bsky.feed.defs#viewerState', v);
	}
	defs$5.validateViewerState = validateViewerState;
	function isFeedViewPost(v) {
	  return (0, util_1$j.isObj)(v) && (0, util_1$j.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#feedViewPost';
	}
	defs$5.isFeedViewPost = isFeedViewPost;
	function validateFeedViewPost(v) {
	  return lexicons_1$i.lexicons.validate('app.bsky.feed.defs#feedViewPost', v);
	}
	defs$5.validateFeedViewPost = validateFeedViewPost;
	function isReplyRef$1(v) {
	  return (0, util_1$j.isObj)(v) && (0, util_1$j.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#replyRef';
	}
	defs$5.isReplyRef = isReplyRef$1;
	function validateReplyRef$1(v) {
	  return lexicons_1$i.lexicons.validate('app.bsky.feed.defs#replyRef', v);
	}
	defs$5.validateReplyRef = validateReplyRef$1;
	function isReasonRepost(v) {
	  return (0, util_1$j.isObj)(v) && (0, util_1$j.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#reasonRepost';
	}
	defs$5.isReasonRepost = isReasonRepost;
	function validateReasonRepost(v) {
	  return lexicons_1$i.lexicons.validate('app.bsky.feed.defs#reasonRepost', v);
	}
	defs$5.validateReasonRepost = validateReasonRepost;
	function isThreadViewPost(v) {
	  return (0, util_1$j.isObj)(v) && (0, util_1$j.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#threadViewPost';
	}
	defs$5.isThreadViewPost = isThreadViewPost;
	function validateThreadViewPost(v) {
	  return lexicons_1$i.lexicons.validate('app.bsky.feed.defs#threadViewPost', v);
	}
	defs$5.validateThreadViewPost = validateThreadViewPost;
	function isNotFoundPost(v) {
	  return (0, util_1$j.isObj)(v) && (0, util_1$j.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#notFoundPost';
	}
	defs$5.isNotFoundPost = isNotFoundPost;
	function validateNotFoundPost(v) {
	  return lexicons_1$i.lexicons.validate('app.bsky.feed.defs#notFoundPost', v);
	}
	defs$5.validateNotFoundPost = validateNotFoundPost;
	function isBlockedPost(v) {
	  return (0, util_1$j.isObj)(v) && (0, util_1$j.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#blockedPost';
	}
	defs$5.isBlockedPost = isBlockedPost;
	function validateBlockedPost(v) {
	  return lexicons_1$i.lexicons.validate('app.bsky.feed.defs#blockedPost', v);
	}
	defs$5.validateBlockedPost = validateBlockedPost;
	function isBlockedAuthor(v) {
	  return (0, util_1$j.isObj)(v) && (0, util_1$j.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#blockedAuthor';
	}
	defs$5.isBlockedAuthor = isBlockedAuthor;
	function validateBlockedAuthor(v) {
	  return lexicons_1$i.lexicons.validate('app.bsky.feed.defs#blockedAuthor', v);
	}
	defs$5.validateBlockedAuthor = validateBlockedAuthor;
	function isGeneratorView(v) {
	  return (0, util_1$j.isObj)(v) && (0, util_1$j.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#generatorView';
	}
	defs$5.isGeneratorView = isGeneratorView;
	function validateGeneratorView(v) {
	  return lexicons_1$i.lexicons.validate('app.bsky.feed.defs#generatorView', v);
	}
	defs$5.validateGeneratorView = validateGeneratorView;
	function isGeneratorViewerState(v) {
	  return (0, util_1$j.isObj)(v) && (0, util_1$j.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#generatorViewerState';
	}
	defs$5.isGeneratorViewerState = isGeneratorViewerState;
	function validateGeneratorViewerState(v) {
	  return lexicons_1$i.lexicons.validate('app.bsky.feed.defs#generatorViewerState', v);
	}
	defs$5.validateGeneratorViewerState = validateGeneratorViewerState;
	function isSkeletonFeedPost(v) {
	  return (0, util_1$j.isObj)(v) && (0, util_1$j.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#skeletonFeedPost';
	}
	defs$5.isSkeletonFeedPost = isSkeletonFeedPost;
	function validateSkeletonFeedPost(v) {
	  return lexicons_1$i.lexicons.validate('app.bsky.feed.defs#skeletonFeedPost', v);
	}
	defs$5.validateSkeletonFeedPost = validateSkeletonFeedPost;
	function isSkeletonReasonRepost(v) {
	  return (0, util_1$j.isObj)(v) && (0, util_1$j.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#skeletonReasonRepost';
	}
	defs$5.isSkeletonReasonRepost = isSkeletonReasonRepost;
	function validateSkeletonReasonRepost(v) {
	  return lexicons_1$i.lexicons.validate('app.bsky.feed.defs#skeletonReasonRepost', v);
	}
	defs$5.validateSkeletonReasonRepost = validateSkeletonReasonRepost;
	function isThreadgateView(v) {
	  return (0, util_1$j.isObj)(v) && (0, util_1$j.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#threadgateView';
	}
	defs$5.isThreadgateView = isThreadgateView;
	function validateThreadgateView(v) {
	  return lexicons_1$i.lexicons.validate('app.bsky.feed.defs#threadgateView', v);
	}
	defs$5.validateThreadgateView = validateThreadgateView;
	function isInteraction(v) {
	  return (0, util_1$j.isObj)(v) && (0, util_1$j.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#interaction';
	}
	defs$5.isInteraction = isInteraction;
	function validateInteraction(v) {
	  return lexicons_1$i.lexicons.validate('app.bsky.feed.defs#interaction', v);
	}
	defs$5.validateInteraction = validateInteraction;
	/** Request that less content like the given feed item be shown in the feed */
	defs$5.REQUESTLESS = 'app.bsky.feed.defs#requestLess';
	/** Request that more content like the given feed item be shown in the feed */
	defs$5.REQUESTMORE = 'app.bsky.feed.defs#requestMore';
	/** User clicked through to the feed item */
	defs$5.CLICKTHROUGHITEM = 'app.bsky.feed.defs#clickthroughItem';
	/** User clicked through to the author of the feed item */
	defs$5.CLICKTHROUGHAUTHOR = 'app.bsky.feed.defs#clickthroughAuthor';
	/** User clicked through to the reposter of the feed item */
	defs$5.CLICKTHROUGHREPOSTER = 'app.bsky.feed.defs#clickthroughReposter';
	/** User clicked through to the embedded content of the feed item */
	defs$5.CLICKTHROUGHEMBED = 'app.bsky.feed.defs#clickthroughEmbed';
	/** Feed item was seen by user */
	defs$5.INTERACTIONSEEN = 'app.bsky.feed.defs#interactionSeen';
	/** User liked the feed item */
	defs$5.INTERACTIONLIKE = 'app.bsky.feed.defs#interactionLike';
	/** User reposted the feed item */
	defs$5.INTERACTIONREPOST = 'app.bsky.feed.defs#interactionRepost';
	/** User replied to the feed item */
	defs$5.INTERACTIONREPLY = 'app.bsky.feed.defs#interactionReply';
	/** User quoted the feed item */
	defs$5.INTERACTIONQUOTE = 'app.bsky.feed.defs#interactionQuote';
	/** User shared the feed item */
	defs$5.INTERACTIONSHARE = 'app.bsky.feed.defs#interactionShare';

	var generator = {};

	Object.defineProperty(generator, "__esModule", {
	  value: true
	});
	generator.validateRecord = generator.isRecord = void 0;
	const util_1$i = util$2;
	const lexicons_1$h = lexicons;
	function isRecord$a(v) {
	  return (0, util_1$i.isObj)(v) && (0, util_1$i.hasProp)(v, '$type') && (v.$type === 'app.bsky.feed.generator#main' || v.$type === 'app.bsky.feed.generator');
	}
	generator.isRecord = isRecord$a;
	function validateRecord$a(v) {
	  return lexicons_1$h.lexicons.validate('app.bsky.feed.generator#main', v);
	}
	generator.validateRecord = validateRecord$a;

	var like = {};

	Object.defineProperty(like, "__esModule", {
	  value: true
	});
	like.validateRecord = like.isRecord = void 0;
	const util_1$h = util$2;
	const lexicons_1$g = lexicons;
	function isRecord$9(v) {
	  return (0, util_1$h.isObj)(v) && (0, util_1$h.hasProp)(v, '$type') && (v.$type === 'app.bsky.feed.like#main' || v.$type === 'app.bsky.feed.like');
	}
	like.isRecord = isRecord$9;
	function validateRecord$9(v) {
	  return lexicons_1$g.lexicons.validate('app.bsky.feed.like#main', v);
	}
	like.validateRecord = validateRecord$9;

	var post$1 = {};

	Object.defineProperty(post$1, "__esModule", {
	  value: true
	});
	post$1.validateTextSlice = post$1.isTextSlice = post$1.validateEntity = post$1.isEntity = post$1.validateReplyRef = post$1.isReplyRef = post$1.validateRecord = post$1.isRecord = void 0;
	const util_1$g = util$2;
	const lexicons_1$f = lexicons;
	function isRecord$8(v) {
	  return (0, util_1$g.isObj)(v) && (0, util_1$g.hasProp)(v, '$type') && (v.$type === 'app.bsky.feed.post#main' || v.$type === 'app.bsky.feed.post');
	}
	post$1.isRecord = isRecord$8;
	function validateRecord$8(v) {
	  return lexicons_1$f.lexicons.validate('app.bsky.feed.post#main', v);
	}
	post$1.validateRecord = validateRecord$8;
	function isReplyRef(v) {
	  return (0, util_1$g.isObj)(v) && (0, util_1$g.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.post#replyRef';
	}
	post$1.isReplyRef = isReplyRef;
	function validateReplyRef(v) {
	  return lexicons_1$f.lexicons.validate('app.bsky.feed.post#replyRef', v);
	}
	post$1.validateReplyRef = validateReplyRef;
	function isEntity(v) {
	  return (0, util_1$g.isObj)(v) && (0, util_1$g.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.post#entity';
	}
	post$1.isEntity = isEntity;
	function validateEntity(v) {
	  return lexicons_1$f.lexicons.validate('app.bsky.feed.post#entity', v);
	}
	post$1.validateEntity = validateEntity;
	function isTextSlice(v) {
	  return (0, util_1$g.isObj)(v) && (0, util_1$g.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.post#textSlice';
	}
	post$1.isTextSlice = isTextSlice;
	function validateTextSlice(v) {
	  return lexicons_1$f.lexicons.validate('app.bsky.feed.post#textSlice', v);
	}
	post$1.validateTextSlice = validateTextSlice;

	var repost = {};

	Object.defineProperty(repost, "__esModule", {
	  value: true
	});
	repost.validateRecord = repost.isRecord = void 0;
	const util_1$f = util$2;
	const lexicons_1$e = lexicons;
	function isRecord$7(v) {
	  return (0, util_1$f.isObj)(v) && (0, util_1$f.hasProp)(v, '$type') && (v.$type === 'app.bsky.feed.repost#main' || v.$type === 'app.bsky.feed.repost');
	}
	repost.isRecord = isRecord$7;
	function validateRecord$7(v) {
	  return lexicons_1$e.lexicons.validate('app.bsky.feed.repost#main', v);
	}
	repost.validateRecord = validateRecord$7;

	var threadgate = {};

	Object.defineProperty(threadgate, "__esModule", {
	  value: true
	});
	threadgate.validateListRule = threadgate.isListRule = threadgate.validateFollowingRule = threadgate.isFollowingRule = threadgate.validateMentionRule = threadgate.isMentionRule = threadgate.validateRecord = threadgate.isRecord = void 0;
	const util_1$e = util$2;
	const lexicons_1$d = lexicons;
	function isRecord$6(v) {
	  return (0, util_1$e.isObj)(v) && (0, util_1$e.hasProp)(v, '$type') && (v.$type === 'app.bsky.feed.threadgate#main' || v.$type === 'app.bsky.feed.threadgate');
	}
	threadgate.isRecord = isRecord$6;
	function validateRecord$6(v) {
	  return lexicons_1$d.lexicons.validate('app.bsky.feed.threadgate#main', v);
	}
	threadgate.validateRecord = validateRecord$6;
	function isMentionRule(v) {
	  return (0, util_1$e.isObj)(v) && (0, util_1$e.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.threadgate#mentionRule';
	}
	threadgate.isMentionRule = isMentionRule;
	function validateMentionRule(v) {
	  return lexicons_1$d.lexicons.validate('app.bsky.feed.threadgate#mentionRule', v);
	}
	threadgate.validateMentionRule = validateMentionRule;
	function isFollowingRule(v) {
	  return (0, util_1$e.isObj)(v) && (0, util_1$e.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.threadgate#followingRule';
	}
	threadgate.isFollowingRule = isFollowingRule;
	function validateFollowingRule(v) {
	  return lexicons_1$d.lexicons.validate('app.bsky.feed.threadgate#followingRule', v);
	}
	threadgate.validateFollowingRule = validateFollowingRule;
	function isListRule(v) {
	  return (0, util_1$e.isObj)(v) && (0, util_1$e.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.threadgate#listRule';
	}
	threadgate.isListRule = isListRule;
	function validateListRule(v) {
	  return lexicons_1$d.lexicons.validate('app.bsky.feed.threadgate#listRule', v);
	}
	threadgate.validateListRule = validateListRule;

	var block = {};

	Object.defineProperty(block, "__esModule", {
	  value: true
	});
	block.validateRecord = block.isRecord = void 0;
	const util_1$d = util$2;
	const lexicons_1$c = lexicons;
	function isRecord$5(v) {
	  return (0, util_1$d.isObj)(v) && (0, util_1$d.hasProp)(v, '$type') && (v.$type === 'app.bsky.graph.block#main' || v.$type === 'app.bsky.graph.block');
	}
	block.isRecord = isRecord$5;
	function validateRecord$5(v) {
	  return lexicons_1$c.lexicons.validate('app.bsky.graph.block#main', v);
	}
	block.validateRecord = validateRecord$5;

	var defs$4 = {};

	Object.defineProperty(defs$4, "__esModule", {
	  value: true
	});
	defs$4.validateRelationship = defs$4.isRelationship = defs$4.validateNotFoundActor = defs$4.isNotFoundActor = defs$4.validateListViewerState = defs$4.isListViewerState = defs$4.CURATELIST = defs$4.MODLIST = defs$4.validateListItemView = defs$4.isListItemView = defs$4.validateListView = defs$4.isListView = defs$4.validateListViewBasic = defs$4.isListViewBasic = void 0;
	const util_1$c = util$2;
	const lexicons_1$b = lexicons;
	function isListViewBasic(v) {
	  return (0, util_1$c.isObj)(v) && (0, util_1$c.hasProp)(v, '$type') && v.$type === 'app.bsky.graph.defs#listViewBasic';
	}
	defs$4.isListViewBasic = isListViewBasic;
	function validateListViewBasic(v) {
	  return lexicons_1$b.lexicons.validate('app.bsky.graph.defs#listViewBasic', v);
	}
	defs$4.validateListViewBasic = validateListViewBasic;
	function isListView(v) {
	  return (0, util_1$c.isObj)(v) && (0, util_1$c.hasProp)(v, '$type') && v.$type === 'app.bsky.graph.defs#listView';
	}
	defs$4.isListView = isListView;
	function validateListView(v) {
	  return lexicons_1$b.lexicons.validate('app.bsky.graph.defs#listView', v);
	}
	defs$4.validateListView = validateListView;
	function isListItemView(v) {
	  return (0, util_1$c.isObj)(v) && (0, util_1$c.hasProp)(v, '$type') && v.$type === 'app.bsky.graph.defs#listItemView';
	}
	defs$4.isListItemView = isListItemView;
	function validateListItemView(v) {
	  return lexicons_1$b.lexicons.validate('app.bsky.graph.defs#listItemView', v);
	}
	defs$4.validateListItemView = validateListItemView;
	/** A list of actors to apply an aggregate moderation action (mute/block) on. */
	defs$4.MODLIST = 'app.bsky.graph.defs#modlist';
	/** A list of actors used for curation purposes such as list feeds or interaction gating. */
	defs$4.CURATELIST = 'app.bsky.graph.defs#curatelist';
	function isListViewerState(v) {
	  return (0, util_1$c.isObj)(v) && (0, util_1$c.hasProp)(v, '$type') && v.$type === 'app.bsky.graph.defs#listViewerState';
	}
	defs$4.isListViewerState = isListViewerState;
	function validateListViewerState(v) {
	  return lexicons_1$b.lexicons.validate('app.bsky.graph.defs#listViewerState', v);
	}
	defs$4.validateListViewerState = validateListViewerState;
	function isNotFoundActor(v) {
	  return (0, util_1$c.isObj)(v) && (0, util_1$c.hasProp)(v, '$type') && v.$type === 'app.bsky.graph.defs#notFoundActor';
	}
	defs$4.isNotFoundActor = isNotFoundActor;
	function validateNotFoundActor(v) {
	  return lexicons_1$b.lexicons.validate('app.bsky.graph.defs#notFoundActor', v);
	}
	defs$4.validateNotFoundActor = validateNotFoundActor;
	function isRelationship(v) {
	  return (0, util_1$c.isObj)(v) && (0, util_1$c.hasProp)(v, '$type') && v.$type === 'app.bsky.graph.defs#relationship';
	}
	defs$4.isRelationship = isRelationship;
	function validateRelationship(v) {
	  return lexicons_1$b.lexicons.validate('app.bsky.graph.defs#relationship', v);
	}
	defs$4.validateRelationship = validateRelationship;

	var follow = {};

	Object.defineProperty(follow, "__esModule", {
	  value: true
	});
	follow.validateRecord = follow.isRecord = void 0;
	const util_1$b = util$2;
	const lexicons_1$a = lexicons;
	function isRecord$4(v) {
	  return (0, util_1$b.isObj)(v) && (0, util_1$b.hasProp)(v, '$type') && (v.$type === 'app.bsky.graph.follow#main' || v.$type === 'app.bsky.graph.follow');
	}
	follow.isRecord = isRecord$4;
	function validateRecord$4(v) {
	  return lexicons_1$a.lexicons.validate('app.bsky.graph.follow#main', v);
	}
	follow.validateRecord = validateRecord$4;

	var list = {};

	Object.defineProperty(list, "__esModule", {
	  value: true
	});
	list.validateRecord = list.isRecord = void 0;
	const util_1$a = util$2;
	const lexicons_1$9 = lexicons;
	function isRecord$3(v) {
	  return (0, util_1$a.isObj)(v) && (0, util_1$a.hasProp)(v, '$type') && (v.$type === 'app.bsky.graph.list#main' || v.$type === 'app.bsky.graph.list');
	}
	list.isRecord = isRecord$3;
	function validateRecord$3(v) {
	  return lexicons_1$9.lexicons.validate('app.bsky.graph.list#main', v);
	}
	list.validateRecord = validateRecord$3;

	var listblock = {};

	Object.defineProperty(listblock, "__esModule", {
	  value: true
	});
	listblock.validateRecord = listblock.isRecord = void 0;
	const util_1$9 = util$2;
	const lexicons_1$8 = lexicons;
	function isRecord$2(v) {
	  return (0, util_1$9.isObj)(v) && (0, util_1$9.hasProp)(v, '$type') && (v.$type === 'app.bsky.graph.listblock#main' || v.$type === 'app.bsky.graph.listblock');
	}
	listblock.isRecord = isRecord$2;
	function validateRecord$2(v) {
	  return lexicons_1$8.lexicons.validate('app.bsky.graph.listblock#main', v);
	}
	listblock.validateRecord = validateRecord$2;

	var listitem = {};

	Object.defineProperty(listitem, "__esModule", {
	  value: true
	});
	listitem.validateRecord = listitem.isRecord = void 0;
	const util_1$8 = util$2;
	const lexicons_1$7 = lexicons;
	function isRecord$1(v) {
	  return (0, util_1$8.isObj)(v) && (0, util_1$8.hasProp)(v, '$type') && (v.$type === 'app.bsky.graph.listitem#main' || v.$type === 'app.bsky.graph.listitem');
	}
	listitem.isRecord = isRecord$1;
	function validateRecord$1(v) {
	  return lexicons_1$7.lexicons.validate('app.bsky.graph.listitem#main', v);
	}
	listitem.validateRecord = validateRecord$1;

	var defs$3 = {};

	Object.defineProperty(defs$3, "__esModule", {
	  value: true
	});
	defs$3.validateLabelerPolicies = defs$3.isLabelerPolicies = defs$3.validateLabelerViewerState = defs$3.isLabelerViewerState = defs$3.validateLabelerViewDetailed = defs$3.isLabelerViewDetailed = defs$3.validateLabelerView = defs$3.isLabelerView = void 0;
	const util_1$7 = util$2;
	const lexicons_1$6 = lexicons;
	function isLabelerView(v) {
	  return (0, util_1$7.isObj)(v) && (0, util_1$7.hasProp)(v, '$type') && v.$type === 'app.bsky.labeler.defs#labelerView';
	}
	defs$3.isLabelerView = isLabelerView;
	function validateLabelerView(v) {
	  return lexicons_1$6.lexicons.validate('app.bsky.labeler.defs#labelerView', v);
	}
	defs$3.validateLabelerView = validateLabelerView;
	function isLabelerViewDetailed(v) {
	  return (0, util_1$7.isObj)(v) && (0, util_1$7.hasProp)(v, '$type') && v.$type === 'app.bsky.labeler.defs#labelerViewDetailed';
	}
	defs$3.isLabelerViewDetailed = isLabelerViewDetailed;
	function validateLabelerViewDetailed(v) {
	  return lexicons_1$6.lexicons.validate('app.bsky.labeler.defs#labelerViewDetailed', v);
	}
	defs$3.validateLabelerViewDetailed = validateLabelerViewDetailed;
	function isLabelerViewerState(v) {
	  return (0, util_1$7.isObj)(v) && (0, util_1$7.hasProp)(v, '$type') && v.$type === 'app.bsky.labeler.defs#labelerViewerState';
	}
	defs$3.isLabelerViewerState = isLabelerViewerState;
	function validateLabelerViewerState(v) {
	  return lexicons_1$6.lexicons.validate('app.bsky.labeler.defs#labelerViewerState', v);
	}
	defs$3.validateLabelerViewerState = validateLabelerViewerState;
	function isLabelerPolicies(v) {
	  return (0, util_1$7.isObj)(v) && (0, util_1$7.hasProp)(v, '$type') && v.$type === 'app.bsky.labeler.defs#labelerPolicies';
	}
	defs$3.isLabelerPolicies = isLabelerPolicies;
	function validateLabelerPolicies(v) {
	  return lexicons_1$6.lexicons.validate('app.bsky.labeler.defs#labelerPolicies', v);
	}
	defs$3.validateLabelerPolicies = validateLabelerPolicies;

	var service = {};

	Object.defineProperty(service, "__esModule", {
	  value: true
	});
	service.validateRecord = service.isRecord = void 0;
	const util_1$6 = util$2;
	const lexicons_1$5 = lexicons;
	function isRecord(v) {
	  return (0, util_1$6.isObj)(v) && (0, util_1$6.hasProp)(v, '$type') && (v.$type === 'app.bsky.labeler.service#main' || v.$type === 'app.bsky.labeler.service');
	}
	service.isRecord = isRecord;
	function validateRecord(v) {
	  return lexicons_1$5.lexicons.validate('app.bsky.labeler.service#main', v);
	}
	service.validateRecord = validateRecord;

	var facet = {};

	Object.defineProperty(facet, "__esModule", {
	  value: true
	});
	facet.validateByteSlice = facet.isByteSlice = facet.validateTag = facet.isTag = facet.validateLink = facet.isLink = facet.validateMention = facet.isMention = facet.validateMain = facet.isMain = void 0;
	const util_1$5 = util$2;
	const lexicons_1$4 = lexicons;
	function isMain(v) {
	  return (0, util_1$5.isObj)(v) && (0, util_1$5.hasProp)(v, '$type') && (v.$type === 'app.bsky.richtext.facet#main' || v.$type === 'app.bsky.richtext.facet');
	}
	facet.isMain = isMain;
	function validateMain(v) {
	  return lexicons_1$4.lexicons.validate('app.bsky.richtext.facet#main', v);
	}
	facet.validateMain = validateMain;
	function isMention(v) {
	  return (0, util_1$5.isObj)(v) && (0, util_1$5.hasProp)(v, '$type') && v.$type === 'app.bsky.richtext.facet#mention';
	}
	facet.isMention = isMention;
	function validateMention(v) {
	  return lexicons_1$4.lexicons.validate('app.bsky.richtext.facet#mention', v);
	}
	facet.validateMention = validateMention;
	function isLink(v) {
	  return (0, util_1$5.isObj)(v) && (0, util_1$5.hasProp)(v, '$type') && v.$type === 'app.bsky.richtext.facet#link';
	}
	facet.isLink = isLink;
	function validateLink(v) {
	  return lexicons_1$4.lexicons.validate('app.bsky.richtext.facet#link', v);
	}
	facet.validateLink = validateLink;
	function isTag(v) {
	  return (0, util_1$5.isObj)(v) && (0, util_1$5.hasProp)(v, '$type') && v.$type === 'app.bsky.richtext.facet#tag';
	}
	facet.isTag = isTag;
	function validateTag(v) {
	  return lexicons_1$4.lexicons.validate('app.bsky.richtext.facet#tag', v);
	}
	facet.validateTag = validateTag;
	function isByteSlice(v) {
	  return (0, util_1$5.isObj)(v) && (0, util_1$5.hasProp)(v, '$type') && v.$type === 'app.bsky.richtext.facet#byteSlice';
	}
	facet.isByteSlice = isByteSlice;
	function validateByteSlice(v) {
	  return lexicons_1$4.lexicons.validate('app.bsky.richtext.facet#byteSlice', v);
	}
	facet.validateByteSlice = validateByteSlice;

	var defs$2 = {};

	Object.defineProperty(defs$2, "__esModule", {
	  value: true
	});
	defs$2.validateSkeletonSearchActor = defs$2.isSkeletonSearchActor = defs$2.validateSkeletonSearchPost = defs$2.isSkeletonSearchPost = void 0;
	const util_1$4 = util$2;
	const lexicons_1$3 = lexicons;
	function isSkeletonSearchPost(v) {
	  return (0, util_1$4.isObj)(v) && (0, util_1$4.hasProp)(v, '$type') && v.$type === 'app.bsky.unspecced.defs#skeletonSearchPost';
	}
	defs$2.isSkeletonSearchPost = isSkeletonSearchPost;
	function validateSkeletonSearchPost(v) {
	  return lexicons_1$3.lexicons.validate('app.bsky.unspecced.defs#skeletonSearchPost', v);
	}
	defs$2.validateSkeletonSearchPost = validateSkeletonSearchPost;
	function isSkeletonSearchActor(v) {
	  return (0, util_1$4.isObj)(v) && (0, util_1$4.hasProp)(v, '$type') && v.$type === 'app.bsky.unspecced.defs#skeletonSearchActor';
	}
	defs$2.isSkeletonSearchActor = isSkeletonSearchActor;
	function validateSkeletonSearchActor(v) {
	  return lexicons_1$3.lexicons.validate('app.bsky.unspecced.defs#skeletonSearchActor', v);
	}
	defs$2.validateSkeletonSearchActor = validateSkeletonSearchActor;

	var defs$1 = {};

	Object.defineProperty(defs$1, "__esModule", {
	  value: true
	});
	defs$1.validateTemplateView = defs$1.isTemplateView = void 0;
	const util_1$3 = util$2;
	const lexicons_1$2 = lexicons;
	function isTemplateView(v) {
	  return (0, util_1$3.isObj)(v) && (0, util_1$3.hasProp)(v, '$type') && v.$type === 'tools.ozone.communication.defs#templateView';
	}
	defs$1.isTemplateView = isTemplateView;
	function validateTemplateView(v) {
	  return lexicons_1$2.lexicons.validate('tools.ozone.communication.defs#templateView', v);
	}
	defs$1.validateTemplateView = validateTemplateView;

	var defs = {};

	Object.defineProperty(defs, "__esModule", {
	  value: true
	});
	defs.validateRecordViewDetail = defs.isRecordViewDetail = defs.validateRecordView = defs.isRecordView = defs.validateRepoViewNotFound = defs.isRepoViewNotFound = defs.validateRepoViewDetail = defs.isRepoViewDetail = defs.validateRepoView = defs.isRepoView = defs.validateModEventTag = defs.isModEventTag = defs.validateModEventDivert = defs.isModEventDivert = defs.validateModEventEmail = defs.isModEventEmail = defs.validateModEventUnmuteReporter = defs.isModEventUnmuteReporter = defs.validateModEventMuteReporter = defs.isModEventMuteReporter = defs.validateModEventUnmute = defs.isModEventUnmute = defs.validateModEventMute = defs.isModEventMute = defs.validateModEventEscalate = defs.isModEventEscalate = defs.validateModEventAcknowledge = defs.isModEventAcknowledge = defs.validateModEventLabel = defs.isModEventLabel = defs.validateModEventReport = defs.isModEventReport = defs.validateModEventComment = defs.isModEventComment = defs.validateModEventResolveAppeal = defs.isModEventResolveAppeal = defs.validateModEventReverseTakedown = defs.isModEventReverseTakedown = defs.validateModEventTakedown = defs.isModEventTakedown = defs.REVIEWNONE = defs.REVIEWCLOSED = defs.REVIEWESCALATED = defs.REVIEWOPEN = defs.validateSubjectStatusView = defs.isSubjectStatusView = defs.validateModEventViewDetail = defs.isModEventViewDetail = defs.validateModEventView = defs.isModEventView = void 0;
	defs.validateVideoDetails = defs.isVideoDetails = defs.validateImageDetails = defs.isImageDetails = defs.validateBlobView = defs.isBlobView = defs.validateModerationDetail = defs.isModerationDetail = defs.validateModeration = defs.isModeration = defs.validateRecordViewNotFound = defs.isRecordViewNotFound = void 0;
	const util_1$2 = util$2;
	const lexicons_1$1 = lexicons;
	function isModEventView(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventView';
	}
	defs.isModEventView = isModEventView;
	function validateModEventView(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#modEventView', v);
	}
	defs.validateModEventView = validateModEventView;
	function isModEventViewDetail(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventViewDetail';
	}
	defs.isModEventViewDetail = isModEventViewDetail;
	function validateModEventViewDetail(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#modEventViewDetail', v);
	}
	defs.validateModEventViewDetail = validateModEventViewDetail;
	function isSubjectStatusView(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#subjectStatusView';
	}
	defs.isSubjectStatusView = isSubjectStatusView;
	function validateSubjectStatusView(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#subjectStatusView', v);
	}
	defs.validateSubjectStatusView = validateSubjectStatusView;
	/** Moderator review status of a subject: Open. Indicates that the subject needs to be reviewed by a moderator */
	defs.REVIEWOPEN = 'tools.ozone.moderation.defs#reviewOpen';
	/** Moderator review status of a subject: Escalated. Indicates that the subject was escalated for review by a moderator */
	defs.REVIEWESCALATED = 'tools.ozone.moderation.defs#reviewEscalated';
	/** Moderator review status of a subject: Closed. Indicates that the subject was already reviewed and resolved by a moderator */
	defs.REVIEWCLOSED = 'tools.ozone.moderation.defs#reviewClosed';
	/** Moderator review status of a subject: Unnecessary. Indicates that the subject does not need a review at the moment but there is probably some moderation related metadata available for it */
	defs.REVIEWNONE = 'tools.ozone.moderation.defs#reviewNone';
	function isModEventTakedown(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventTakedown';
	}
	defs.isModEventTakedown = isModEventTakedown;
	function validateModEventTakedown(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#modEventTakedown', v);
	}
	defs.validateModEventTakedown = validateModEventTakedown;
	function isModEventReverseTakedown(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventReverseTakedown';
	}
	defs.isModEventReverseTakedown = isModEventReverseTakedown;
	function validateModEventReverseTakedown(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#modEventReverseTakedown', v);
	}
	defs.validateModEventReverseTakedown = validateModEventReverseTakedown;
	function isModEventResolveAppeal(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventResolveAppeal';
	}
	defs.isModEventResolveAppeal = isModEventResolveAppeal;
	function validateModEventResolveAppeal(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#modEventResolveAppeal', v);
	}
	defs.validateModEventResolveAppeal = validateModEventResolveAppeal;
	function isModEventComment(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventComment';
	}
	defs.isModEventComment = isModEventComment;
	function validateModEventComment(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#modEventComment', v);
	}
	defs.validateModEventComment = validateModEventComment;
	function isModEventReport(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventReport';
	}
	defs.isModEventReport = isModEventReport;
	function validateModEventReport(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#modEventReport', v);
	}
	defs.validateModEventReport = validateModEventReport;
	function isModEventLabel(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventLabel';
	}
	defs.isModEventLabel = isModEventLabel;
	function validateModEventLabel(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#modEventLabel', v);
	}
	defs.validateModEventLabel = validateModEventLabel;
	function isModEventAcknowledge(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventAcknowledge';
	}
	defs.isModEventAcknowledge = isModEventAcknowledge;
	function validateModEventAcknowledge(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#modEventAcknowledge', v);
	}
	defs.validateModEventAcknowledge = validateModEventAcknowledge;
	function isModEventEscalate(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventEscalate';
	}
	defs.isModEventEscalate = isModEventEscalate;
	function validateModEventEscalate(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#modEventEscalate', v);
	}
	defs.validateModEventEscalate = validateModEventEscalate;
	function isModEventMute(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventMute';
	}
	defs.isModEventMute = isModEventMute;
	function validateModEventMute(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#modEventMute', v);
	}
	defs.validateModEventMute = validateModEventMute;
	function isModEventUnmute(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventUnmute';
	}
	defs.isModEventUnmute = isModEventUnmute;
	function validateModEventUnmute(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#modEventUnmute', v);
	}
	defs.validateModEventUnmute = validateModEventUnmute;
	function isModEventMuteReporter(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventMuteReporter';
	}
	defs.isModEventMuteReporter = isModEventMuteReporter;
	function validateModEventMuteReporter(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#modEventMuteReporter', v);
	}
	defs.validateModEventMuteReporter = validateModEventMuteReporter;
	function isModEventUnmuteReporter(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventUnmuteReporter';
	}
	defs.isModEventUnmuteReporter = isModEventUnmuteReporter;
	function validateModEventUnmuteReporter(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#modEventUnmuteReporter', v);
	}
	defs.validateModEventUnmuteReporter = validateModEventUnmuteReporter;
	function isModEventEmail(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventEmail';
	}
	defs.isModEventEmail = isModEventEmail;
	function validateModEventEmail(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#modEventEmail', v);
	}
	defs.validateModEventEmail = validateModEventEmail;
	function isModEventDivert(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventDivert';
	}
	defs.isModEventDivert = isModEventDivert;
	function validateModEventDivert(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#modEventDivert', v);
	}
	defs.validateModEventDivert = validateModEventDivert;
	function isModEventTag(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventTag';
	}
	defs.isModEventTag = isModEventTag;
	function validateModEventTag(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#modEventTag', v);
	}
	defs.validateModEventTag = validateModEventTag;
	function isRepoView(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#repoView';
	}
	defs.isRepoView = isRepoView;
	function validateRepoView(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#repoView', v);
	}
	defs.validateRepoView = validateRepoView;
	function isRepoViewDetail(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#repoViewDetail';
	}
	defs.isRepoViewDetail = isRepoViewDetail;
	function validateRepoViewDetail(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#repoViewDetail', v);
	}
	defs.validateRepoViewDetail = validateRepoViewDetail;
	function isRepoViewNotFound(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#repoViewNotFound';
	}
	defs.isRepoViewNotFound = isRepoViewNotFound;
	function validateRepoViewNotFound(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#repoViewNotFound', v);
	}
	defs.validateRepoViewNotFound = validateRepoViewNotFound;
	function isRecordView(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#recordView';
	}
	defs.isRecordView = isRecordView;
	function validateRecordView(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#recordView', v);
	}
	defs.validateRecordView = validateRecordView;
	function isRecordViewDetail(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#recordViewDetail';
	}
	defs.isRecordViewDetail = isRecordViewDetail;
	function validateRecordViewDetail(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#recordViewDetail', v);
	}
	defs.validateRecordViewDetail = validateRecordViewDetail;
	function isRecordViewNotFound(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#recordViewNotFound';
	}
	defs.isRecordViewNotFound = isRecordViewNotFound;
	function validateRecordViewNotFound(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#recordViewNotFound', v);
	}
	defs.validateRecordViewNotFound = validateRecordViewNotFound;
	function isModeration(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#moderation';
	}
	defs.isModeration = isModeration;
	function validateModeration(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#moderation', v);
	}
	defs.validateModeration = validateModeration;
	function isModerationDetail(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#moderationDetail';
	}
	defs.isModerationDetail = isModerationDetail;
	function validateModerationDetail(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#moderationDetail', v);
	}
	defs.validateModerationDetail = validateModerationDetail;
	function isBlobView(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#blobView';
	}
	defs.isBlobView = isBlobView;
	function validateBlobView(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#blobView', v);
	}
	defs.validateBlobView = validateBlobView;
	function isImageDetails(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#imageDetails';
	}
	defs.isImageDetails = isImageDetails;
	function validateImageDetails(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#imageDetails', v);
	}
	defs.validateImageDetails = validateImageDetails;
	function isVideoDetails(v) {
	  return (0, util_1$2.isObj)(v) && (0, util_1$2.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#videoDetails';
	}
	defs.isVideoDetails = isVideoDetails;
	function validateVideoDetails(v) {
	  return lexicons_1$1.lexicons.validate('tools.ozone.moderation.defs#videoDetails', v);
	}
	defs.validateVideoDetails = validateVideoDetails;

	var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  var desc = Object.getOwnPropertyDescriptor(m, k);
	  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	    desc = {
	      enumerable: true,
	      get: function () {
	        return m[k];
	      }
	    };
	  }
	  Object.defineProperty(o, k2, desc);
	} : function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  o[k2] = m[k];
	});
	var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
	  Object.defineProperty(o, "default", {
	    enumerable: true,
	    value: v
	  });
	} : function (o, v) {
	  o["default"] = v;
	});
	var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
	  if (mod && mod.__esModule) return mod;
	  var result = {};
	  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	  __setModuleDefault(result, mod);
	  return result;
	};
	Object.defineProperty(client$1, "__esModule", {
	  value: true
	});
	client$1.ComAtprotoServerGetAccountInviteCodes = client$1.ComAtprotoServerDescribeServer = client$1.ComAtprotoServerDeleteSession = client$1.ComAtprotoServerDeleteAccount = client$1.ComAtprotoServerDefs = client$1.ComAtprotoServerDeactivateAccount = client$1.ComAtprotoServerCreateSession = client$1.ComAtprotoServerCreateInviteCodes = client$1.ComAtprotoServerCreateInviteCode = client$1.ComAtprotoServerCreateAppPassword = client$1.ComAtprotoServerCreateAccount = client$1.ComAtprotoServerConfirmEmail = client$1.ComAtprotoServerCheckAccountStatus = client$1.ComAtprotoServerActivateAccount = client$1.ComAtprotoRepoUploadBlob = client$1.ComAtprotoRepoStrongRef = client$1.ComAtprotoRepoPutRecord = client$1.ComAtprotoRepoListRecords = client$1.ComAtprotoRepoListMissingBlobs = client$1.ComAtprotoRepoImportRepo = client$1.ComAtprotoRepoGetRecord = client$1.ComAtprotoRepoDescribeRepo = client$1.ComAtprotoRepoDeleteRecord = client$1.ComAtprotoRepoCreateRecord = client$1.ComAtprotoRepoApplyWrites = client$1.ComAtprotoModerationDefs = client$1.ComAtprotoModerationCreateReport = client$1.ComAtprotoLabelSubscribeLabels = client$1.ComAtprotoLabelQueryLabels = client$1.ComAtprotoLabelDefs = client$1.ComAtprotoIdentityUpdateHandle = client$1.ComAtprotoIdentitySubmitPlcOperation = client$1.ComAtprotoIdentitySignPlcOperation = client$1.ComAtprotoIdentityResolveHandle = client$1.ComAtprotoIdentityRequestPlcOperationSignature = client$1.ComAtprotoIdentityGetRecommendedDidCredentials = client$1.ComAtprotoAdminUpdateSubjectStatus = client$1.ComAtprotoAdminUpdateAccountPassword = client$1.ComAtprotoAdminUpdateAccountHandle = client$1.ComAtprotoAdminUpdateAccountEmail = client$1.ComAtprotoAdminSendEmail = client$1.ComAtprotoAdminGetSubjectStatus = client$1.ComAtprotoAdminGetInviteCodes = client$1.ComAtprotoAdminGetAccountInfos = client$1.ComAtprotoAdminGetAccountInfo = client$1.ComAtprotoAdminEnableAccountInvites = client$1.ComAtprotoAdminDisableInviteCodes = client$1.ComAtprotoAdminDisableAccountInvites = client$1.ComAtprotoAdminDeleteAccount = client$1.ComAtprotoAdminDefs = void 0;
	client$1.AppBskyFeedGetFeedSkeleton = client$1.AppBskyFeedGetFeedGenerators = client$1.AppBskyFeedGetFeedGenerator = client$1.AppBskyFeedGetFeed = client$1.AppBskyFeedGetAuthorFeed = client$1.AppBskyFeedGetActorLikes = client$1.AppBskyFeedGetActorFeeds = client$1.AppBskyFeedGenerator = client$1.AppBskyFeedDescribeFeedGenerator = client$1.AppBskyFeedDefs = client$1.AppBskyEmbedRecordWithMedia = client$1.AppBskyEmbedRecord = client$1.AppBskyEmbedImages = client$1.AppBskyEmbedExternal = client$1.AppBskyActorSearchActorsTypeahead = client$1.AppBskyActorSearchActors = client$1.AppBskyActorPutPreferences = client$1.AppBskyActorProfile = client$1.AppBskyActorGetSuggestions = client$1.AppBskyActorGetProfiles = client$1.AppBskyActorGetProfile = client$1.AppBskyActorGetPreferences = client$1.AppBskyActorDefs = client$1.ComAtprotoTempRequestPhoneVerification = client$1.ComAtprotoTempFetchLabels = client$1.ComAtprotoTempCheckSignupQueue = client$1.ComAtprotoSyncSubscribeRepos = client$1.ComAtprotoSyncRequestCrawl = client$1.ComAtprotoSyncNotifyOfUpdate = client$1.ComAtprotoSyncListRepos = client$1.ComAtprotoSyncListBlobs = client$1.ComAtprotoSyncGetRepo = client$1.ComAtprotoSyncGetRecord = client$1.ComAtprotoSyncGetLatestCommit = client$1.ComAtprotoSyncGetHead = client$1.ComAtprotoSyncGetCheckout = client$1.ComAtprotoSyncGetBlocks = client$1.ComAtprotoSyncGetBlob = client$1.ComAtprotoServerUpdateEmail = client$1.ComAtprotoServerRevokeAppPassword = client$1.ComAtprotoServerResetPassword = client$1.ComAtprotoServerReserveSigningKey = client$1.ComAtprotoServerRequestPasswordReset = client$1.ComAtprotoServerRequestEmailUpdate = client$1.ComAtprotoServerRequestEmailConfirmation = client$1.ComAtprotoServerRequestAccountDelete = client$1.ComAtprotoServerRefreshSession = client$1.ComAtprotoServerListAppPasswords = client$1.ComAtprotoServerGetSession = client$1.ComAtprotoServerGetServiceAuth = void 0;
	client$1.ToolsOzoneCommunicationDeleteTemplate = client$1.ToolsOzoneCommunicationDefs = client$1.ToolsOzoneCommunicationCreateTemplate = client$1.AppBskyUnspeccedSearchPostsSkeleton = client$1.AppBskyUnspeccedSearchActorsSkeleton = client$1.AppBskyUnspeccedGetTaggedSuggestions = client$1.AppBskyUnspeccedGetSuggestionsSkeleton = client$1.AppBskyUnspeccedGetPopularFeedGenerators = client$1.AppBskyUnspeccedDefs = client$1.AppBskyRichtextFacet = client$1.AppBskyNotificationUpdateSeen = client$1.AppBskyNotificationRegisterPush = client$1.AppBskyNotificationListNotifications = client$1.AppBskyNotificationGetUnreadCount = client$1.AppBskyLabelerService = client$1.AppBskyLabelerGetServices = client$1.AppBskyLabelerDefs = client$1.AppBskyGraphUnmuteActorList = client$1.AppBskyGraphUnmuteActor = client$1.AppBskyGraphMuteActorList = client$1.AppBskyGraphMuteActor = client$1.AppBskyGraphListitem = client$1.AppBskyGraphListblock = client$1.AppBskyGraphList = client$1.AppBskyGraphGetSuggestedFollowsByActor = client$1.AppBskyGraphGetRelationships = client$1.AppBskyGraphGetMutes = client$1.AppBskyGraphGetLists = client$1.AppBskyGraphGetListMutes = client$1.AppBskyGraphGetListBlocks = client$1.AppBskyGraphGetList = client$1.AppBskyGraphGetFollows = client$1.AppBskyGraphGetFollowers = client$1.AppBskyGraphGetBlocks = client$1.AppBskyGraphFollow = client$1.AppBskyGraphDefs = client$1.AppBskyGraphBlock = client$1.AppBskyFeedThreadgate = client$1.AppBskyFeedSendInteractions = client$1.AppBskyFeedSearchPosts = client$1.AppBskyFeedRepost = client$1.AppBskyFeedPost = client$1.AppBskyFeedLike = client$1.AppBskyFeedGetTimeline = client$1.AppBskyFeedGetSuggestedFeeds = client$1.AppBskyFeedGetRepostedBy = client$1.AppBskyFeedGetPosts = client$1.AppBskyFeedGetPostThread = client$1.AppBskyFeedGetListFeed = client$1.AppBskyFeedGetLikes = void 0;
	client$1.ToolsOzoneNS = client$1.ToolsNS = client$1.AppBskyUnspeccedNS = client$1.AppBskyRichtextNS = client$1.AppBskyNotificationNS = client$1.ServiceRecord = client$1.AppBskyLabelerNS = client$1.ListitemRecord = client$1.ListblockRecord = client$1.ListRecord = client$1.FollowRecord = client$1.BlockRecord = client$1.AppBskyGraphNS = client$1.ThreadgateRecord = client$1.RepostRecord = client$1.PostRecord = client$1.LikeRecord = client$1.GeneratorRecord = client$1.AppBskyFeedNS = client$1.AppBskyEmbedNS = client$1.ProfileRecord = client$1.AppBskyActorNS = client$1.AppBskyNS = client$1.AppNS = client$1.ComAtprotoTempNS = client$1.ComAtprotoSyncNS = client$1.ComAtprotoServerNS = client$1.ComAtprotoRepoNS = client$1.ComAtprotoModerationNS = client$1.ComAtprotoLabelNS = client$1.ComAtprotoIdentityNS = client$1.ComAtprotoAdminNS = client$1.ComAtprotoNS = client$1.ComNS = client$1.AtpServiceClient = client$1.AtpBaseClient = client$1.TOOLS_OZONE_MODERATION = client$1.APP_BSKY_GRAPH = client$1.APP_BSKY_FEED = client$1.COM_ATPROTO_MODERATION = client$1.ToolsOzoneModerationSearchRepos = client$1.ToolsOzoneModerationQueryStatuses = client$1.ToolsOzoneModerationQueryEvents = client$1.ToolsOzoneModerationGetRepo = client$1.ToolsOzoneModerationGetRecord = client$1.ToolsOzoneModerationGetEvent = client$1.ToolsOzoneModerationEmitEvent = client$1.ToolsOzoneModerationDefs = client$1.ToolsOzoneCommunicationUpdateTemplate = client$1.ToolsOzoneCommunicationListTemplates = void 0;
	client$1.ToolsOzoneModerationNS = client$1.ToolsOzoneCommunicationNS = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1$1 = dist;
	const lexicons_1 = lexicons;
	const ComAtprotoAdminDeleteAccount = __importStar(deleteAccount$1);
	const ComAtprotoAdminDisableAccountInvites = __importStar(disableAccountInvites);
	const ComAtprotoAdminDisableInviteCodes = __importStar(disableInviteCodes);
	const ComAtprotoAdminEnableAccountInvites = __importStar(enableAccountInvites);
	const ComAtprotoAdminGetAccountInfo = __importStar(getAccountInfo);
	const ComAtprotoAdminGetAccountInfos = __importStar(getAccountInfos);
	const ComAtprotoAdminGetInviteCodes = __importStar(getInviteCodes);
	const ComAtprotoAdminGetSubjectStatus = __importStar(getSubjectStatus);
	const ComAtprotoAdminSendEmail = __importStar(sendEmail);
	const ComAtprotoAdminUpdateAccountEmail = __importStar(updateAccountEmail);
	const ComAtprotoAdminUpdateAccountHandle = __importStar(updateAccountHandle);
	const ComAtprotoAdminUpdateAccountPassword = __importStar(updateAccountPassword);
	const ComAtprotoAdminUpdateSubjectStatus = __importStar(updateSubjectStatus);
	const ComAtprotoIdentityGetRecommendedDidCredentials = __importStar(getRecommendedDidCredentials);
	const ComAtprotoIdentityRequestPlcOperationSignature = __importStar(requestPlcOperationSignature);
	const ComAtprotoIdentityResolveHandle = __importStar(resolveHandle);
	const ComAtprotoIdentitySignPlcOperation = __importStar(signPlcOperation);
	const ComAtprotoIdentitySubmitPlcOperation = __importStar(submitPlcOperation);
	const ComAtprotoIdentityUpdateHandle = __importStar(updateHandle);
	const ComAtprotoLabelQueryLabels = __importStar(queryLabels);
	const ComAtprotoModerationCreateReport = __importStar(createReport);
	const ComAtprotoRepoApplyWrites = __importStar(applyWrites);
	const ComAtprotoRepoCreateRecord = __importStar(createRecord);
	const ComAtprotoRepoDeleteRecord = __importStar(deleteRecord);
	const ComAtprotoRepoDescribeRepo = __importStar(describeRepo);
	const ComAtprotoRepoGetRecord = __importStar(getRecord$2);
	const ComAtprotoRepoImportRepo = __importStar(importRepo);
	const ComAtprotoRepoListMissingBlobs = __importStar(listMissingBlobs);
	const ComAtprotoRepoListRecords = __importStar(listRecords);
	const ComAtprotoRepoPutRecord = __importStar(putRecord);
	const ComAtprotoRepoUploadBlob = __importStar(uploadBlob);
	const ComAtprotoServerActivateAccount = __importStar(activateAccount);
	const ComAtprotoServerCheckAccountStatus = __importStar(checkAccountStatus);
	const ComAtprotoServerConfirmEmail = __importStar(confirmEmail);
	const ComAtprotoServerCreateAccount = __importStar(createAccount);
	const ComAtprotoServerCreateAppPassword = __importStar(createAppPassword);
	const ComAtprotoServerCreateInviteCode = __importStar(createInviteCode);
	const ComAtprotoServerCreateInviteCodes = __importStar(createInviteCodes);
	const ComAtprotoServerCreateSession = __importStar(createSession);
	const ComAtprotoServerDeactivateAccount = __importStar(deactivateAccount);
	const ComAtprotoServerDeleteAccount = __importStar(deleteAccount);
	const ComAtprotoServerDeleteSession = __importStar(deleteSession);
	const ComAtprotoServerDescribeServer = __importStar(describeServer);
	const ComAtprotoServerGetAccountInviteCodes = __importStar(getAccountInviteCodes);
	const ComAtprotoServerGetServiceAuth = __importStar(getServiceAuth);
	const ComAtprotoServerGetSession = __importStar(getSession);
	const ComAtprotoServerListAppPasswords = __importStar(listAppPasswords);
	const ComAtprotoServerRefreshSession = __importStar(refreshSession);
	const ComAtprotoServerRequestAccountDelete = __importStar(requestAccountDelete);
	const ComAtprotoServerRequestEmailConfirmation = __importStar(requestEmailConfirmation);
	const ComAtprotoServerRequestEmailUpdate = __importStar(requestEmailUpdate);
	const ComAtprotoServerRequestPasswordReset = __importStar(requestPasswordReset);
	const ComAtprotoServerReserveSigningKey = __importStar(reserveSigningKey);
	const ComAtprotoServerResetPassword = __importStar(resetPassword);
	const ComAtprotoServerRevokeAppPassword = __importStar(revokeAppPassword);
	const ComAtprotoServerUpdateEmail = __importStar(updateEmail);
	const ComAtprotoSyncGetBlob = __importStar(getBlob);
	const ComAtprotoSyncGetBlocks = __importStar(getBlocks$1);
	const ComAtprotoSyncGetCheckout = __importStar(getCheckout);
	const ComAtprotoSyncGetHead = __importStar(getHead);
	const ComAtprotoSyncGetLatestCommit = __importStar(getLatestCommit);
	const ComAtprotoSyncGetRecord = __importStar(getRecord$1);
	const ComAtprotoSyncGetRepo = __importStar(getRepo$1);
	const ComAtprotoSyncListBlobs = __importStar(listBlobs);
	const ComAtprotoSyncListRepos = __importStar(listRepos);
	const ComAtprotoSyncNotifyOfUpdate = __importStar(notifyOfUpdate);
	const ComAtprotoSyncRequestCrawl = __importStar(requestCrawl);
	const ComAtprotoTempCheckSignupQueue = __importStar(checkSignupQueue);
	const ComAtprotoTempFetchLabels = __importStar(fetchLabels);
	const ComAtprotoTempRequestPhoneVerification = __importStar(requestPhoneVerification);
	const AppBskyActorGetPreferences = __importStar(getPreferences);
	const AppBskyActorGetProfile = __importStar(getProfile);
	const AppBskyActorGetProfiles = __importStar(getProfiles);
	const AppBskyActorGetSuggestions = __importStar(getSuggestions);
	const AppBskyActorPutPreferences = __importStar(putPreferences);
	const AppBskyActorSearchActors = __importStar(searchActors);
	const AppBskyActorSearchActorsTypeahead = __importStar(searchActorsTypeahead);
	const AppBskyFeedDescribeFeedGenerator = __importStar(describeFeedGenerator);
	const AppBskyFeedGetActorFeeds = __importStar(getActorFeeds);
	const AppBskyFeedGetActorLikes = __importStar(getActorLikes);
	const AppBskyFeedGetAuthorFeed = __importStar(getAuthorFeed);
	const AppBskyFeedGetFeed = __importStar(getFeed);
	const AppBskyFeedGetFeedGenerator = __importStar(getFeedGenerator);
	const AppBskyFeedGetFeedGenerators = __importStar(getFeedGenerators);
	const AppBskyFeedGetFeedSkeleton = __importStar(getFeedSkeleton);
	const AppBskyFeedGetLikes = __importStar(getLikes);
	const AppBskyFeedGetListFeed = __importStar(getListFeed);
	const AppBskyFeedGetPostThread = __importStar(getPostThread);
	const AppBskyFeedGetPosts = __importStar(getPosts);
	const AppBskyFeedGetRepostedBy = __importStar(getRepostedBy);
	const AppBskyFeedGetSuggestedFeeds = __importStar(getSuggestedFeeds);
	const AppBskyFeedGetTimeline = __importStar(getTimeline);
	const AppBskyFeedSearchPosts = __importStar(searchPosts);
	const AppBskyFeedSendInteractions = __importStar(sendInteractions);
	const AppBskyGraphGetBlocks = __importStar(getBlocks);
	const AppBskyGraphGetFollowers = __importStar(getFollowers);
	const AppBskyGraphGetFollows = __importStar(getFollows);
	const AppBskyGraphGetList = __importStar(getList);
	const AppBskyGraphGetListBlocks = __importStar(getListBlocks);
	const AppBskyGraphGetListMutes = __importStar(getListMutes);
	const AppBskyGraphGetLists = __importStar(getLists);
	const AppBskyGraphGetMutes = __importStar(getMutes);
	const AppBskyGraphGetRelationships = __importStar(getRelationships);
	const AppBskyGraphGetSuggestedFollowsByActor = __importStar(getSuggestedFollowsByActor);
	const AppBskyGraphMuteActor = __importStar(muteActor);
	const AppBskyGraphMuteActorList = __importStar(muteActorList);
	const AppBskyGraphUnmuteActor = __importStar(unmuteActor);
	const AppBskyGraphUnmuteActorList = __importStar(unmuteActorList);
	const AppBskyLabelerGetServices = __importStar(getServices);
	const AppBskyNotificationGetUnreadCount = __importStar(getUnreadCount);
	const AppBskyNotificationListNotifications = __importStar(listNotifications);
	const AppBskyNotificationRegisterPush = __importStar(registerPush);
	const AppBskyNotificationUpdateSeen = __importStar(updateSeen);
	const AppBskyUnspeccedGetPopularFeedGenerators = __importStar(getPopularFeedGenerators);
	const AppBskyUnspeccedGetSuggestionsSkeleton = __importStar(getSuggestionsSkeleton);
	const AppBskyUnspeccedGetTaggedSuggestions = __importStar(getTaggedSuggestions);
	const AppBskyUnspeccedSearchActorsSkeleton = __importStar(searchActorsSkeleton);
	const AppBskyUnspeccedSearchPostsSkeleton = __importStar(searchPostsSkeleton);
	const ToolsOzoneCommunicationCreateTemplate = __importStar(createTemplate);
	const ToolsOzoneCommunicationDeleteTemplate = __importStar(deleteTemplate);
	const ToolsOzoneCommunicationListTemplates = __importStar(listTemplates);
	const ToolsOzoneCommunicationUpdateTemplate = __importStar(updateTemplate);
	const ToolsOzoneModerationEmitEvent = __importStar(emitEvent);
	const ToolsOzoneModerationGetEvent = __importStar(getEvent);
	const ToolsOzoneModerationGetRecord = __importStar(getRecord);
	const ToolsOzoneModerationGetRepo = __importStar(getRepo);
	const ToolsOzoneModerationQueryEvents = __importStar(queryEvents);
	const ToolsOzoneModerationQueryStatuses = __importStar(queryStatuses);
	const ToolsOzoneModerationSearchRepos = __importStar(searchRepos);
	client$1.ComAtprotoAdminDefs = __importStar(defs$a);
	client$1.ComAtprotoAdminDeleteAccount = __importStar(deleteAccount$1);
	client$1.ComAtprotoAdminDisableAccountInvites = __importStar(disableAccountInvites);
	client$1.ComAtprotoAdminDisableInviteCodes = __importStar(disableInviteCodes);
	client$1.ComAtprotoAdminEnableAccountInvites = __importStar(enableAccountInvites);
	client$1.ComAtprotoAdminGetAccountInfo = __importStar(getAccountInfo);
	client$1.ComAtprotoAdminGetAccountInfos = __importStar(getAccountInfos);
	client$1.ComAtprotoAdminGetInviteCodes = __importStar(getInviteCodes);
	client$1.ComAtprotoAdminGetSubjectStatus = __importStar(getSubjectStatus);
	client$1.ComAtprotoAdminSendEmail = __importStar(sendEmail);
	client$1.ComAtprotoAdminUpdateAccountEmail = __importStar(updateAccountEmail);
	client$1.ComAtprotoAdminUpdateAccountHandle = __importStar(updateAccountHandle);
	client$1.ComAtprotoAdminUpdateAccountPassword = __importStar(updateAccountPassword);
	client$1.ComAtprotoAdminUpdateSubjectStatus = __importStar(updateSubjectStatus);
	client$1.ComAtprotoIdentityGetRecommendedDidCredentials = __importStar(getRecommendedDidCredentials);
	client$1.ComAtprotoIdentityRequestPlcOperationSignature = __importStar(requestPlcOperationSignature);
	client$1.ComAtprotoIdentityResolveHandle = __importStar(resolveHandle);
	client$1.ComAtprotoIdentitySignPlcOperation = __importStar(signPlcOperation);
	client$1.ComAtprotoIdentitySubmitPlcOperation = __importStar(submitPlcOperation);
	client$1.ComAtprotoIdentityUpdateHandle = __importStar(updateHandle);
	client$1.ComAtprotoLabelDefs = __importStar(defs$9);
	client$1.ComAtprotoLabelQueryLabels = __importStar(queryLabels);
	client$1.ComAtprotoLabelSubscribeLabels = __importStar(subscribeLabels);
	client$1.ComAtprotoModerationCreateReport = __importStar(createReport);
	client$1.ComAtprotoModerationDefs = __importStar(defs$8);
	client$1.ComAtprotoRepoApplyWrites = __importStar(applyWrites);
	client$1.ComAtprotoRepoCreateRecord = __importStar(createRecord);
	client$1.ComAtprotoRepoDeleteRecord = __importStar(deleteRecord);
	client$1.ComAtprotoRepoDescribeRepo = __importStar(describeRepo);
	client$1.ComAtprotoRepoGetRecord = __importStar(getRecord$2);
	client$1.ComAtprotoRepoImportRepo = __importStar(importRepo);
	client$1.ComAtprotoRepoListMissingBlobs = __importStar(listMissingBlobs);
	client$1.ComAtprotoRepoListRecords = __importStar(listRecords);
	client$1.ComAtprotoRepoPutRecord = __importStar(putRecord);
	client$1.ComAtprotoRepoStrongRef = __importStar(strongRef);
	client$1.ComAtprotoRepoUploadBlob = __importStar(uploadBlob);
	client$1.ComAtprotoServerActivateAccount = __importStar(activateAccount);
	client$1.ComAtprotoServerCheckAccountStatus = __importStar(checkAccountStatus);
	client$1.ComAtprotoServerConfirmEmail = __importStar(confirmEmail);
	client$1.ComAtprotoServerCreateAccount = __importStar(createAccount);
	client$1.ComAtprotoServerCreateAppPassword = __importStar(createAppPassword);
	client$1.ComAtprotoServerCreateInviteCode = __importStar(createInviteCode);
	client$1.ComAtprotoServerCreateInviteCodes = __importStar(createInviteCodes);
	client$1.ComAtprotoServerCreateSession = __importStar(createSession);
	client$1.ComAtprotoServerDeactivateAccount = __importStar(deactivateAccount);
	client$1.ComAtprotoServerDefs = __importStar(defs$7);
	client$1.ComAtprotoServerDeleteAccount = __importStar(deleteAccount);
	client$1.ComAtprotoServerDeleteSession = __importStar(deleteSession);
	client$1.ComAtprotoServerDescribeServer = __importStar(describeServer);
	client$1.ComAtprotoServerGetAccountInviteCodes = __importStar(getAccountInviteCodes);
	client$1.ComAtprotoServerGetServiceAuth = __importStar(getServiceAuth);
	client$1.ComAtprotoServerGetSession = __importStar(getSession);
	client$1.ComAtprotoServerListAppPasswords = __importStar(listAppPasswords);
	client$1.ComAtprotoServerRefreshSession = __importStar(refreshSession);
	client$1.ComAtprotoServerRequestAccountDelete = __importStar(requestAccountDelete);
	client$1.ComAtprotoServerRequestEmailConfirmation = __importStar(requestEmailConfirmation);
	client$1.ComAtprotoServerRequestEmailUpdate = __importStar(requestEmailUpdate);
	client$1.ComAtprotoServerRequestPasswordReset = __importStar(requestPasswordReset);
	client$1.ComAtprotoServerReserveSigningKey = __importStar(reserveSigningKey);
	client$1.ComAtprotoServerResetPassword = __importStar(resetPassword);
	client$1.ComAtprotoServerRevokeAppPassword = __importStar(revokeAppPassword);
	client$1.ComAtprotoServerUpdateEmail = __importStar(updateEmail);
	client$1.ComAtprotoSyncGetBlob = __importStar(getBlob);
	client$1.ComAtprotoSyncGetBlocks = __importStar(getBlocks$1);
	client$1.ComAtprotoSyncGetCheckout = __importStar(getCheckout);
	client$1.ComAtprotoSyncGetHead = __importStar(getHead);
	client$1.ComAtprotoSyncGetLatestCommit = __importStar(getLatestCommit);
	client$1.ComAtprotoSyncGetRecord = __importStar(getRecord$1);
	client$1.ComAtprotoSyncGetRepo = __importStar(getRepo$1);
	client$1.ComAtprotoSyncListBlobs = __importStar(listBlobs);
	client$1.ComAtprotoSyncListRepos = __importStar(listRepos);
	client$1.ComAtprotoSyncNotifyOfUpdate = __importStar(notifyOfUpdate);
	client$1.ComAtprotoSyncRequestCrawl = __importStar(requestCrawl);
	client$1.ComAtprotoSyncSubscribeRepos = __importStar(subscribeRepos);
	client$1.ComAtprotoTempCheckSignupQueue = __importStar(checkSignupQueue);
	client$1.ComAtprotoTempFetchLabels = __importStar(fetchLabels);
	client$1.ComAtprotoTempRequestPhoneVerification = __importStar(requestPhoneVerification);
	client$1.AppBskyActorDefs = __importStar(defs$6);
	client$1.AppBskyActorGetPreferences = __importStar(getPreferences);
	client$1.AppBskyActorGetProfile = __importStar(getProfile);
	client$1.AppBskyActorGetProfiles = __importStar(getProfiles);
	client$1.AppBskyActorGetSuggestions = __importStar(getSuggestions);
	client$1.AppBskyActorProfile = __importStar(profile$1);
	client$1.AppBskyActorPutPreferences = __importStar(putPreferences);
	client$1.AppBskyActorSearchActors = __importStar(searchActors);
	client$1.AppBskyActorSearchActorsTypeahead = __importStar(searchActorsTypeahead);
	client$1.AppBskyEmbedExternal = __importStar(external);
	client$1.AppBskyEmbedImages = __importStar(images);
	client$1.AppBskyEmbedRecord = __importStar(record);
	client$1.AppBskyEmbedRecordWithMedia = __importStar(recordWithMedia);
	client$1.AppBskyFeedDefs = __importStar(defs$5);
	client$1.AppBskyFeedDescribeFeedGenerator = __importStar(describeFeedGenerator);
	client$1.AppBskyFeedGenerator = __importStar(generator);
	client$1.AppBskyFeedGetActorFeeds = __importStar(getActorFeeds);
	client$1.AppBskyFeedGetActorLikes = __importStar(getActorLikes);
	client$1.AppBskyFeedGetAuthorFeed = __importStar(getAuthorFeed);
	client$1.AppBskyFeedGetFeed = __importStar(getFeed);
	client$1.AppBskyFeedGetFeedGenerator = __importStar(getFeedGenerator);
	client$1.AppBskyFeedGetFeedGenerators = __importStar(getFeedGenerators);
	client$1.AppBskyFeedGetFeedSkeleton = __importStar(getFeedSkeleton);
	client$1.AppBskyFeedGetLikes = __importStar(getLikes);
	client$1.AppBskyFeedGetListFeed = __importStar(getListFeed);
	client$1.AppBskyFeedGetPostThread = __importStar(getPostThread);
	client$1.AppBskyFeedGetPosts = __importStar(getPosts);
	client$1.AppBskyFeedGetRepostedBy = __importStar(getRepostedBy);
	client$1.AppBskyFeedGetSuggestedFeeds = __importStar(getSuggestedFeeds);
	client$1.AppBskyFeedGetTimeline = __importStar(getTimeline);
	client$1.AppBskyFeedLike = __importStar(like);
	client$1.AppBskyFeedPost = __importStar(post$1);
	client$1.AppBskyFeedRepost = __importStar(repost);
	client$1.AppBskyFeedSearchPosts = __importStar(searchPosts);
	client$1.AppBskyFeedSendInteractions = __importStar(sendInteractions);
	client$1.AppBskyFeedThreadgate = __importStar(threadgate);
	client$1.AppBskyGraphBlock = __importStar(block);
	client$1.AppBskyGraphDefs = __importStar(defs$4);
	client$1.AppBskyGraphFollow = __importStar(follow);
	client$1.AppBskyGraphGetBlocks = __importStar(getBlocks);
	client$1.AppBskyGraphGetFollowers = __importStar(getFollowers);
	client$1.AppBskyGraphGetFollows = __importStar(getFollows);
	client$1.AppBskyGraphGetList = __importStar(getList);
	client$1.AppBskyGraphGetListBlocks = __importStar(getListBlocks);
	client$1.AppBskyGraphGetListMutes = __importStar(getListMutes);
	client$1.AppBskyGraphGetLists = __importStar(getLists);
	client$1.AppBskyGraphGetMutes = __importStar(getMutes);
	client$1.AppBskyGraphGetRelationships = __importStar(getRelationships);
	client$1.AppBskyGraphGetSuggestedFollowsByActor = __importStar(getSuggestedFollowsByActor);
	client$1.AppBskyGraphList = __importStar(list);
	client$1.AppBskyGraphListblock = __importStar(listblock);
	client$1.AppBskyGraphListitem = __importStar(listitem);
	client$1.AppBskyGraphMuteActor = __importStar(muteActor);
	client$1.AppBskyGraphMuteActorList = __importStar(muteActorList);
	client$1.AppBskyGraphUnmuteActor = __importStar(unmuteActor);
	client$1.AppBskyGraphUnmuteActorList = __importStar(unmuteActorList);
	client$1.AppBskyLabelerDefs = __importStar(defs$3);
	client$1.AppBskyLabelerGetServices = __importStar(getServices);
	client$1.AppBskyLabelerService = __importStar(service);
	client$1.AppBskyNotificationGetUnreadCount = __importStar(getUnreadCount);
	client$1.AppBskyNotificationListNotifications = __importStar(listNotifications);
	client$1.AppBskyNotificationRegisterPush = __importStar(registerPush);
	client$1.AppBskyNotificationUpdateSeen = __importStar(updateSeen);
	client$1.AppBskyRichtextFacet = __importStar(facet);
	client$1.AppBskyUnspeccedDefs = __importStar(defs$2);
	client$1.AppBskyUnspeccedGetPopularFeedGenerators = __importStar(getPopularFeedGenerators);
	client$1.AppBskyUnspeccedGetSuggestionsSkeleton = __importStar(getSuggestionsSkeleton);
	client$1.AppBskyUnspeccedGetTaggedSuggestions = __importStar(getTaggedSuggestions);
	client$1.AppBskyUnspeccedSearchActorsSkeleton = __importStar(searchActorsSkeleton);
	client$1.AppBskyUnspeccedSearchPostsSkeleton = __importStar(searchPostsSkeleton);
	client$1.ToolsOzoneCommunicationCreateTemplate = __importStar(createTemplate);
	client$1.ToolsOzoneCommunicationDefs = __importStar(defs$1);
	client$1.ToolsOzoneCommunicationDeleteTemplate = __importStar(deleteTemplate);
	client$1.ToolsOzoneCommunicationListTemplates = __importStar(listTemplates);
	client$1.ToolsOzoneCommunicationUpdateTemplate = __importStar(updateTemplate);
	client$1.ToolsOzoneModerationDefs = __importStar(defs);
	client$1.ToolsOzoneModerationEmitEvent = __importStar(emitEvent);
	client$1.ToolsOzoneModerationGetEvent = __importStar(getEvent);
	client$1.ToolsOzoneModerationGetRecord = __importStar(getRecord);
	client$1.ToolsOzoneModerationGetRepo = __importStar(getRepo);
	client$1.ToolsOzoneModerationQueryEvents = __importStar(queryEvents);
	client$1.ToolsOzoneModerationQueryStatuses = __importStar(queryStatuses);
	client$1.ToolsOzoneModerationSearchRepos = __importStar(searchRepos);
	client$1.COM_ATPROTO_MODERATION = {
	  DefsReasonSpam: 'com.atproto.moderation.defs#reasonSpam',
	  DefsReasonViolation: 'com.atproto.moderation.defs#reasonViolation',
	  DefsReasonMisleading: 'com.atproto.moderation.defs#reasonMisleading',
	  DefsReasonSexual: 'com.atproto.moderation.defs#reasonSexual',
	  DefsReasonRude: 'com.atproto.moderation.defs#reasonRude',
	  DefsReasonOther: 'com.atproto.moderation.defs#reasonOther',
	  DefsReasonAppeal: 'com.atproto.moderation.defs#reasonAppeal'
	};
	client$1.APP_BSKY_FEED = {
	  DefsRequestLess: 'app.bsky.feed.defs#requestLess',
	  DefsRequestMore: 'app.bsky.feed.defs#requestMore',
	  DefsClickthroughItem: 'app.bsky.feed.defs#clickthroughItem',
	  DefsClickthroughAuthor: 'app.bsky.feed.defs#clickthroughAuthor',
	  DefsClickthroughReposter: 'app.bsky.feed.defs#clickthroughReposter',
	  DefsClickthroughEmbed: 'app.bsky.feed.defs#clickthroughEmbed',
	  DefsInteractionSeen: 'app.bsky.feed.defs#interactionSeen',
	  DefsInteractionLike: 'app.bsky.feed.defs#interactionLike',
	  DefsInteractionRepost: 'app.bsky.feed.defs#interactionRepost',
	  DefsInteractionReply: 'app.bsky.feed.defs#interactionReply',
	  DefsInteractionQuote: 'app.bsky.feed.defs#interactionQuote',
	  DefsInteractionShare: 'app.bsky.feed.defs#interactionShare'
	};
	client$1.APP_BSKY_GRAPH = {
	  DefsModlist: 'app.bsky.graph.defs#modlist',
	  DefsCuratelist: 'app.bsky.graph.defs#curatelist'
	};
	client$1.TOOLS_OZONE_MODERATION = {
	  DefsReviewOpen: 'tools.ozone.moderation.defs#reviewOpen',
	  DefsReviewEscalated: 'tools.ozone.moderation.defs#reviewEscalated',
	  DefsReviewClosed: 'tools.ozone.moderation.defs#reviewClosed',
	  DefsReviewNone: 'tools.ozone.moderation.defs#reviewNone'
	};
	class AtpBaseClient {
	  constructor() {
	    Object.defineProperty(this, "xrpc", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: new xrpc_1$1.Client()
	    });
	    this.xrpc.addLexicons(lexicons_1.schemas);
	  }
	  service(serviceUri) {
	    return new AtpServiceClient(this, this.xrpc.service(serviceUri));
	  }
	}
	client$1.AtpBaseClient = AtpBaseClient;
	class AtpServiceClient {
	  constructor(baseClient, xrpcService) {
	    Object.defineProperty(this, "_baseClient", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "xrpc", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "com", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "app", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "tools", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._baseClient = baseClient;
	    this.xrpc = xrpcService;
	    this.com = new ComNS(this);
	    this.app = new AppNS(this);
	    this.tools = new ToolsNS(this);
	  }
	  setHeader(key, value) {
	    this.xrpc.setHeader(key, value);
	  }
	}
	client$1.AtpServiceClient = AtpServiceClient;
	class ComNS {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "atproto", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	    this.atproto = new ComAtprotoNS(service);
	  }
	}
	client$1.ComNS = ComNS;
	class ComAtprotoNS {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "admin", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "identity", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "label", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "moderation", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "repo", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "server", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "sync", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "temp", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	    this.admin = new ComAtprotoAdminNS(service);
	    this.identity = new ComAtprotoIdentityNS(service);
	    this.label = new ComAtprotoLabelNS(service);
	    this.moderation = new ComAtprotoModerationNS(service);
	    this.repo = new ComAtprotoRepoNS(service);
	    this.server = new ComAtprotoServerNS(service);
	    this.sync = new ComAtprotoSyncNS(service);
	    this.temp = new ComAtprotoTempNS(service);
	  }
	}
	client$1.ComAtprotoNS = ComAtprotoNS;
	class ComAtprotoAdminNS {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	  deleteAccount(data, opts) {
	    return this._service.xrpc.call('com.atproto.admin.deleteAccount', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoAdminDeleteAccount.toKnownErr(e);
	    });
	  }
	  disableAccountInvites(data, opts) {
	    return this._service.xrpc.call('com.atproto.admin.disableAccountInvites', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoAdminDisableAccountInvites.toKnownErr(e);
	    });
	  }
	  disableInviteCodes(data, opts) {
	    return this._service.xrpc.call('com.atproto.admin.disableInviteCodes', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoAdminDisableInviteCodes.toKnownErr(e);
	    });
	  }
	  enableAccountInvites(data, opts) {
	    return this._service.xrpc.call('com.atproto.admin.enableAccountInvites', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoAdminEnableAccountInvites.toKnownErr(e);
	    });
	  }
	  getAccountInfo(params, opts) {
	    return this._service.xrpc.call('com.atproto.admin.getAccountInfo', params, undefined, opts).catch(e => {
	      throw ComAtprotoAdminGetAccountInfo.toKnownErr(e);
	    });
	  }
	  getAccountInfos(params, opts) {
	    return this._service.xrpc.call('com.atproto.admin.getAccountInfos', params, undefined, opts).catch(e => {
	      throw ComAtprotoAdminGetAccountInfos.toKnownErr(e);
	    });
	  }
	  getInviteCodes(params, opts) {
	    return this._service.xrpc.call('com.atproto.admin.getInviteCodes', params, undefined, opts).catch(e => {
	      throw ComAtprotoAdminGetInviteCodes.toKnownErr(e);
	    });
	  }
	  getSubjectStatus(params, opts) {
	    return this._service.xrpc.call('com.atproto.admin.getSubjectStatus', params, undefined, opts).catch(e => {
	      throw ComAtprotoAdminGetSubjectStatus.toKnownErr(e);
	    });
	  }
	  sendEmail(data, opts) {
	    return this._service.xrpc.call('com.atproto.admin.sendEmail', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoAdminSendEmail.toKnownErr(e);
	    });
	  }
	  updateAccountEmail(data, opts) {
	    return this._service.xrpc.call('com.atproto.admin.updateAccountEmail', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoAdminUpdateAccountEmail.toKnownErr(e);
	    });
	  }
	  updateAccountHandle(data, opts) {
	    return this._service.xrpc.call('com.atproto.admin.updateAccountHandle', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoAdminUpdateAccountHandle.toKnownErr(e);
	    });
	  }
	  updateAccountPassword(data, opts) {
	    return this._service.xrpc.call('com.atproto.admin.updateAccountPassword', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoAdminUpdateAccountPassword.toKnownErr(e);
	    });
	  }
	  updateSubjectStatus(data, opts) {
	    return this._service.xrpc.call('com.atproto.admin.updateSubjectStatus', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoAdminUpdateSubjectStatus.toKnownErr(e);
	    });
	  }
	}
	client$1.ComAtprotoAdminNS = ComAtprotoAdminNS;
	class ComAtprotoIdentityNS {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	  getRecommendedDidCredentials(params, opts) {
	    return this._service.xrpc.call('com.atproto.identity.getRecommendedDidCredentials', params, undefined, opts).catch(e => {
	      throw ComAtprotoIdentityGetRecommendedDidCredentials.toKnownErr(e);
	    });
	  }
	  requestPlcOperationSignature(data, opts) {
	    return this._service.xrpc.call('com.atproto.identity.requestPlcOperationSignature', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoIdentityRequestPlcOperationSignature.toKnownErr(e);
	    });
	  }
	  resolveHandle(params, opts) {
	    return this._service.xrpc.call('com.atproto.identity.resolveHandle', params, undefined, opts).catch(e => {
	      throw ComAtprotoIdentityResolveHandle.toKnownErr(e);
	    });
	  }
	  signPlcOperation(data, opts) {
	    return this._service.xrpc.call('com.atproto.identity.signPlcOperation', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoIdentitySignPlcOperation.toKnownErr(e);
	    });
	  }
	  submitPlcOperation(data, opts) {
	    return this._service.xrpc.call('com.atproto.identity.submitPlcOperation', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoIdentitySubmitPlcOperation.toKnownErr(e);
	    });
	  }
	  updateHandle(data, opts) {
	    return this._service.xrpc.call('com.atproto.identity.updateHandle', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoIdentityUpdateHandle.toKnownErr(e);
	    });
	  }
	}
	client$1.ComAtprotoIdentityNS = ComAtprotoIdentityNS;
	class ComAtprotoLabelNS {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	  queryLabels(params, opts) {
	    return this._service.xrpc.call('com.atproto.label.queryLabels', params, undefined, opts).catch(e => {
	      throw ComAtprotoLabelQueryLabels.toKnownErr(e);
	    });
	  }
	}
	client$1.ComAtprotoLabelNS = ComAtprotoLabelNS;
	class ComAtprotoModerationNS {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	  createReport(data, opts) {
	    return this._service.xrpc.call('com.atproto.moderation.createReport', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoModerationCreateReport.toKnownErr(e);
	    });
	  }
	}
	client$1.ComAtprotoModerationNS = ComAtprotoModerationNS;
	class ComAtprotoRepoNS {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	  applyWrites(data, opts) {
	    return this._service.xrpc.call('com.atproto.repo.applyWrites', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoRepoApplyWrites.toKnownErr(e);
	    });
	  }
	  createRecord(data, opts) {
	    return this._service.xrpc.call('com.atproto.repo.createRecord', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoRepoCreateRecord.toKnownErr(e);
	    });
	  }
	  deleteRecord(data, opts) {
	    return this._service.xrpc.call('com.atproto.repo.deleteRecord', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoRepoDeleteRecord.toKnownErr(e);
	    });
	  }
	  describeRepo(params, opts) {
	    return this._service.xrpc.call('com.atproto.repo.describeRepo', params, undefined, opts).catch(e => {
	      throw ComAtprotoRepoDescribeRepo.toKnownErr(e);
	    });
	  }
	  getRecord(params, opts) {
	    return this._service.xrpc.call('com.atproto.repo.getRecord', params, undefined, opts).catch(e => {
	      throw ComAtprotoRepoGetRecord.toKnownErr(e);
	    });
	  }
	  importRepo(data, opts) {
	    return this._service.xrpc.call('com.atproto.repo.importRepo', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoRepoImportRepo.toKnownErr(e);
	    });
	  }
	  listMissingBlobs(params, opts) {
	    return this._service.xrpc.call('com.atproto.repo.listMissingBlobs', params, undefined, opts).catch(e => {
	      throw ComAtprotoRepoListMissingBlobs.toKnownErr(e);
	    });
	  }
	  listRecords(params, opts) {
	    return this._service.xrpc.call('com.atproto.repo.listRecords', params, undefined, opts).catch(e => {
	      throw ComAtprotoRepoListRecords.toKnownErr(e);
	    });
	  }
	  putRecord(data, opts) {
	    return this._service.xrpc.call('com.atproto.repo.putRecord', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoRepoPutRecord.toKnownErr(e);
	    });
	  }
	  uploadBlob(data, opts) {
	    return this._service.xrpc.call('com.atproto.repo.uploadBlob', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoRepoUploadBlob.toKnownErr(e);
	    });
	  }
	}
	client$1.ComAtprotoRepoNS = ComAtprotoRepoNS;
	class ComAtprotoServerNS {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	  activateAccount(data, opts) {
	    return this._service.xrpc.call('com.atproto.server.activateAccount', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoServerActivateAccount.toKnownErr(e);
	    });
	  }
	  checkAccountStatus(params, opts) {
	    return this._service.xrpc.call('com.atproto.server.checkAccountStatus', params, undefined, opts).catch(e => {
	      throw ComAtprotoServerCheckAccountStatus.toKnownErr(e);
	    });
	  }
	  confirmEmail(data, opts) {
	    return this._service.xrpc.call('com.atproto.server.confirmEmail', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoServerConfirmEmail.toKnownErr(e);
	    });
	  }
	  createAccount(data, opts) {
	    return this._service.xrpc.call('com.atproto.server.createAccount', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoServerCreateAccount.toKnownErr(e);
	    });
	  }
	  createAppPassword(data, opts) {
	    return this._service.xrpc.call('com.atproto.server.createAppPassword', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoServerCreateAppPassword.toKnownErr(e);
	    });
	  }
	  createInviteCode(data, opts) {
	    return this._service.xrpc.call('com.atproto.server.createInviteCode', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoServerCreateInviteCode.toKnownErr(e);
	    });
	  }
	  createInviteCodes(data, opts) {
	    return this._service.xrpc.call('com.atproto.server.createInviteCodes', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoServerCreateInviteCodes.toKnownErr(e);
	    });
	  }
	  createSession(data, opts) {
	    return this._service.xrpc.call('com.atproto.server.createSession', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoServerCreateSession.toKnownErr(e);
	    });
	  }
	  deactivateAccount(data, opts) {
	    return this._service.xrpc.call('com.atproto.server.deactivateAccount', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoServerDeactivateAccount.toKnownErr(e);
	    });
	  }
	  deleteAccount(data, opts) {
	    return this._service.xrpc.call('com.atproto.server.deleteAccount', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoServerDeleteAccount.toKnownErr(e);
	    });
	  }
	  deleteSession(data, opts) {
	    return this._service.xrpc.call('com.atproto.server.deleteSession', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoServerDeleteSession.toKnownErr(e);
	    });
	  }
	  describeServer(params, opts) {
	    return this._service.xrpc.call('com.atproto.server.describeServer', params, undefined, opts).catch(e => {
	      throw ComAtprotoServerDescribeServer.toKnownErr(e);
	    });
	  }
	  getAccountInviteCodes(params, opts) {
	    return this._service.xrpc.call('com.atproto.server.getAccountInviteCodes', params, undefined, opts).catch(e => {
	      throw ComAtprotoServerGetAccountInviteCodes.toKnownErr(e);
	    });
	  }
	  getServiceAuth(params, opts) {
	    return this._service.xrpc.call('com.atproto.server.getServiceAuth', params, undefined, opts).catch(e => {
	      throw ComAtprotoServerGetServiceAuth.toKnownErr(e);
	    });
	  }
	  getSession(params, opts) {
	    return this._service.xrpc.call('com.atproto.server.getSession', params, undefined, opts).catch(e => {
	      throw ComAtprotoServerGetSession.toKnownErr(e);
	    });
	  }
	  listAppPasswords(params, opts) {
	    return this._service.xrpc.call('com.atproto.server.listAppPasswords', params, undefined, opts).catch(e => {
	      throw ComAtprotoServerListAppPasswords.toKnownErr(e);
	    });
	  }
	  refreshSession(data, opts) {
	    return this._service.xrpc.call('com.atproto.server.refreshSession', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoServerRefreshSession.toKnownErr(e);
	    });
	  }
	  requestAccountDelete(data, opts) {
	    return this._service.xrpc.call('com.atproto.server.requestAccountDelete', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoServerRequestAccountDelete.toKnownErr(e);
	    });
	  }
	  requestEmailConfirmation(data, opts) {
	    return this._service.xrpc.call('com.atproto.server.requestEmailConfirmation', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoServerRequestEmailConfirmation.toKnownErr(e);
	    });
	  }
	  requestEmailUpdate(data, opts) {
	    return this._service.xrpc.call('com.atproto.server.requestEmailUpdate', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoServerRequestEmailUpdate.toKnownErr(e);
	    });
	  }
	  requestPasswordReset(data, opts) {
	    return this._service.xrpc.call('com.atproto.server.requestPasswordReset', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoServerRequestPasswordReset.toKnownErr(e);
	    });
	  }
	  reserveSigningKey(data, opts) {
	    return this._service.xrpc.call('com.atproto.server.reserveSigningKey', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoServerReserveSigningKey.toKnownErr(e);
	    });
	  }
	  resetPassword(data, opts) {
	    return this._service.xrpc.call('com.atproto.server.resetPassword', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoServerResetPassword.toKnownErr(e);
	    });
	  }
	  revokeAppPassword(data, opts) {
	    return this._service.xrpc.call('com.atproto.server.revokeAppPassword', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoServerRevokeAppPassword.toKnownErr(e);
	    });
	  }
	  updateEmail(data, opts) {
	    return this._service.xrpc.call('com.atproto.server.updateEmail', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoServerUpdateEmail.toKnownErr(e);
	    });
	  }
	}
	client$1.ComAtprotoServerNS = ComAtprotoServerNS;
	class ComAtprotoSyncNS {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	  getBlob(params, opts) {
	    return this._service.xrpc.call('com.atproto.sync.getBlob', params, undefined, opts).catch(e => {
	      throw ComAtprotoSyncGetBlob.toKnownErr(e);
	    });
	  }
	  getBlocks(params, opts) {
	    return this._service.xrpc.call('com.atproto.sync.getBlocks', params, undefined, opts).catch(e => {
	      throw ComAtprotoSyncGetBlocks.toKnownErr(e);
	    });
	  }
	  getCheckout(params, opts) {
	    return this._service.xrpc.call('com.atproto.sync.getCheckout', params, undefined, opts).catch(e => {
	      throw ComAtprotoSyncGetCheckout.toKnownErr(e);
	    });
	  }
	  getHead(params, opts) {
	    return this._service.xrpc.call('com.atproto.sync.getHead', params, undefined, opts).catch(e => {
	      throw ComAtprotoSyncGetHead.toKnownErr(e);
	    });
	  }
	  getLatestCommit(params, opts) {
	    return this._service.xrpc.call('com.atproto.sync.getLatestCommit', params, undefined, opts).catch(e => {
	      throw ComAtprotoSyncGetLatestCommit.toKnownErr(e);
	    });
	  }
	  getRecord(params, opts) {
	    return this._service.xrpc.call('com.atproto.sync.getRecord', params, undefined, opts).catch(e => {
	      throw ComAtprotoSyncGetRecord.toKnownErr(e);
	    });
	  }
	  getRepo(params, opts) {
	    return this._service.xrpc.call('com.atproto.sync.getRepo', params, undefined, opts).catch(e => {
	      throw ComAtprotoSyncGetRepo.toKnownErr(e);
	    });
	  }
	  listBlobs(params, opts) {
	    return this._service.xrpc.call('com.atproto.sync.listBlobs', params, undefined, opts).catch(e => {
	      throw ComAtprotoSyncListBlobs.toKnownErr(e);
	    });
	  }
	  listRepos(params, opts) {
	    return this._service.xrpc.call('com.atproto.sync.listRepos', params, undefined, opts).catch(e => {
	      throw ComAtprotoSyncListRepos.toKnownErr(e);
	    });
	  }
	  notifyOfUpdate(data, opts) {
	    return this._service.xrpc.call('com.atproto.sync.notifyOfUpdate', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoSyncNotifyOfUpdate.toKnownErr(e);
	    });
	  }
	  requestCrawl(data, opts) {
	    return this._service.xrpc.call('com.atproto.sync.requestCrawl', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoSyncRequestCrawl.toKnownErr(e);
	    });
	  }
	}
	client$1.ComAtprotoSyncNS = ComAtprotoSyncNS;
	class ComAtprotoTempNS {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	  checkSignupQueue(params, opts) {
	    return this._service.xrpc.call('com.atproto.temp.checkSignupQueue', params, undefined, opts).catch(e => {
	      throw ComAtprotoTempCheckSignupQueue.toKnownErr(e);
	    });
	  }
	  fetchLabels(params, opts) {
	    return this._service.xrpc.call('com.atproto.temp.fetchLabels', params, undefined, opts).catch(e => {
	      throw ComAtprotoTempFetchLabels.toKnownErr(e);
	    });
	  }
	  requestPhoneVerification(data, opts) {
	    return this._service.xrpc.call('com.atproto.temp.requestPhoneVerification', opts?.qp, data, opts).catch(e => {
	      throw ComAtprotoTempRequestPhoneVerification.toKnownErr(e);
	    });
	  }
	}
	client$1.ComAtprotoTempNS = ComAtprotoTempNS;
	class AppNS {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "bsky", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	    this.bsky = new AppBskyNS(service);
	  }
	}
	client$1.AppNS = AppNS;
	class AppBskyNS {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "actor", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "embed", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "feed", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "graph", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "labeler", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "notification", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "richtext", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "unspecced", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	    this.actor = new AppBskyActorNS(service);
	    this.embed = new AppBskyEmbedNS(service);
	    this.feed = new AppBskyFeedNS(service);
	    this.graph = new AppBskyGraphNS(service);
	    this.labeler = new AppBskyLabelerNS(service);
	    this.notification = new AppBskyNotificationNS(service);
	    this.richtext = new AppBskyRichtextNS(service);
	    this.unspecced = new AppBskyUnspeccedNS(service);
	  }
	}
	client$1.AppBskyNS = AppBskyNS;
	class AppBskyActorNS {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "profile", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	    this.profile = new ProfileRecord(service);
	  }
	  getPreferences(params, opts) {
	    return this._service.xrpc.call('app.bsky.actor.getPreferences', params, undefined, opts).catch(e => {
	      throw AppBskyActorGetPreferences.toKnownErr(e);
	    });
	  }
	  getProfile(params, opts) {
	    return this._service.xrpc.call('app.bsky.actor.getProfile', params, undefined, opts).catch(e => {
	      throw AppBskyActorGetProfile.toKnownErr(e);
	    });
	  }
	  getProfiles(params, opts) {
	    return this._service.xrpc.call('app.bsky.actor.getProfiles', params, undefined, opts).catch(e => {
	      throw AppBskyActorGetProfiles.toKnownErr(e);
	    });
	  }
	  getSuggestions(params, opts) {
	    return this._service.xrpc.call('app.bsky.actor.getSuggestions', params, undefined, opts).catch(e => {
	      throw AppBskyActorGetSuggestions.toKnownErr(e);
	    });
	  }
	  putPreferences(data, opts) {
	    return this._service.xrpc.call('app.bsky.actor.putPreferences', opts?.qp, data, opts).catch(e => {
	      throw AppBskyActorPutPreferences.toKnownErr(e);
	    });
	  }
	  searchActors(params, opts) {
	    return this._service.xrpc.call('app.bsky.actor.searchActors', params, undefined, opts).catch(e => {
	      throw AppBskyActorSearchActors.toKnownErr(e);
	    });
	  }
	  searchActorsTypeahead(params, opts) {
	    return this._service.xrpc.call('app.bsky.actor.searchActorsTypeahead', params, undefined, opts).catch(e => {
	      throw AppBskyActorSearchActorsTypeahead.toKnownErr(e);
	    });
	  }
	}
	client$1.AppBskyActorNS = AppBskyActorNS;
	class ProfileRecord {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	  async list(params) {
	    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {
	      collection: 'app.bsky.actor.profile',
	      ...params
	    });
	    return res.data;
	  }
	  async get(params) {
	    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {
	      collection: 'app.bsky.actor.profile',
	      ...params
	    });
	    return res.data;
	  }
	  async create(params, record, headers) {
	    record.$type = 'app.bsky.actor.profile';
	    const res = await this._service.xrpc.call('com.atproto.repo.createRecord', undefined, {
	      collection: 'app.bsky.actor.profile',
	      rkey: 'self',
	      ...params,
	      record
	    }, {
	      encoding: 'application/json',
	      headers
	    });
	    return res.data;
	  }
	  async delete(params, headers) {
	    await this._service.xrpc.call('com.atproto.repo.deleteRecord', undefined, {
	      collection: 'app.bsky.actor.profile',
	      ...params
	    }, {
	      headers
	    });
	  }
	}
	client$1.ProfileRecord = ProfileRecord;
	class AppBskyEmbedNS {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	}
	client$1.AppBskyEmbedNS = AppBskyEmbedNS;
	class AppBskyFeedNS {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "generator", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "like", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "post", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "repost", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "threadgate", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	    this.generator = new GeneratorRecord(service);
	    this.like = new LikeRecord(service);
	    this.post = new PostRecord(service);
	    this.repost = new RepostRecord(service);
	    this.threadgate = new ThreadgateRecord(service);
	  }
	  describeFeedGenerator(params, opts) {
	    return this._service.xrpc.call('app.bsky.feed.describeFeedGenerator', params, undefined, opts).catch(e => {
	      throw AppBskyFeedDescribeFeedGenerator.toKnownErr(e);
	    });
	  }
	  getActorFeeds(params, opts) {
	    return this._service.xrpc.call('app.bsky.feed.getActorFeeds', params, undefined, opts).catch(e => {
	      throw AppBskyFeedGetActorFeeds.toKnownErr(e);
	    });
	  }
	  getActorLikes(params, opts) {
	    return this._service.xrpc.call('app.bsky.feed.getActorLikes', params, undefined, opts).catch(e => {
	      throw AppBskyFeedGetActorLikes.toKnownErr(e);
	    });
	  }
	  getAuthorFeed(params, opts) {
	    return this._service.xrpc.call('app.bsky.feed.getAuthorFeed', params, undefined, opts).catch(e => {
	      throw AppBskyFeedGetAuthorFeed.toKnownErr(e);
	    });
	  }
	  getFeed(params, opts) {
	    return this._service.xrpc.call('app.bsky.feed.getFeed', params, undefined, opts).catch(e => {
	      throw AppBskyFeedGetFeed.toKnownErr(e);
	    });
	  }
	  getFeedGenerator(params, opts) {
	    return this._service.xrpc.call('app.bsky.feed.getFeedGenerator', params, undefined, opts).catch(e => {
	      throw AppBskyFeedGetFeedGenerator.toKnownErr(e);
	    });
	  }
	  getFeedGenerators(params, opts) {
	    return this._service.xrpc.call('app.bsky.feed.getFeedGenerators', params, undefined, opts).catch(e => {
	      throw AppBskyFeedGetFeedGenerators.toKnownErr(e);
	    });
	  }
	  getFeedSkeleton(params, opts) {
	    return this._service.xrpc.call('app.bsky.feed.getFeedSkeleton', params, undefined, opts).catch(e => {
	      throw AppBskyFeedGetFeedSkeleton.toKnownErr(e);
	    });
	  }
	  getLikes(params, opts) {
	    return this._service.xrpc.call('app.bsky.feed.getLikes', params, undefined, opts).catch(e => {
	      throw AppBskyFeedGetLikes.toKnownErr(e);
	    });
	  }
	  getListFeed(params, opts) {
	    return this._service.xrpc.call('app.bsky.feed.getListFeed', params, undefined, opts).catch(e => {
	      throw AppBskyFeedGetListFeed.toKnownErr(e);
	    });
	  }
	  getPostThread(params, opts) {
	    return this._service.xrpc.call('app.bsky.feed.getPostThread', params, undefined, opts).catch(e => {
	      throw AppBskyFeedGetPostThread.toKnownErr(e);
	    });
	  }
	  getPosts(params, opts) {
	    return this._service.xrpc.call('app.bsky.feed.getPosts', params, undefined, opts).catch(e => {
	      throw AppBskyFeedGetPosts.toKnownErr(e);
	    });
	  }
	  getRepostedBy(params, opts) {
	    return this._service.xrpc.call('app.bsky.feed.getRepostedBy', params, undefined, opts).catch(e => {
	      throw AppBskyFeedGetRepostedBy.toKnownErr(e);
	    });
	  }
	  getSuggestedFeeds(params, opts) {
	    return this._service.xrpc.call('app.bsky.feed.getSuggestedFeeds', params, undefined, opts).catch(e => {
	      throw AppBskyFeedGetSuggestedFeeds.toKnownErr(e);
	    });
	  }
	  getTimeline(params, opts) {
	    return this._service.xrpc.call('app.bsky.feed.getTimeline', params, undefined, opts).catch(e => {
	      throw AppBskyFeedGetTimeline.toKnownErr(e);
	    });
	  }
	  searchPosts(params, opts) {
	    return this._service.xrpc.call('app.bsky.feed.searchPosts', params, undefined, opts).catch(e => {
	      throw AppBskyFeedSearchPosts.toKnownErr(e);
	    });
	  }
	  sendInteractions(data, opts) {
	    return this._service.xrpc.call('app.bsky.feed.sendInteractions', opts?.qp, data, opts).catch(e => {
	      throw AppBskyFeedSendInteractions.toKnownErr(e);
	    });
	  }
	}
	client$1.AppBskyFeedNS = AppBskyFeedNS;
	class GeneratorRecord {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	  async list(params) {
	    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {
	      collection: 'app.bsky.feed.generator',
	      ...params
	    });
	    return res.data;
	  }
	  async get(params) {
	    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {
	      collection: 'app.bsky.feed.generator',
	      ...params
	    });
	    return res.data;
	  }
	  async create(params, record, headers) {
	    record.$type = 'app.bsky.feed.generator';
	    const res = await this._service.xrpc.call('com.atproto.repo.createRecord', undefined, {
	      collection: 'app.bsky.feed.generator',
	      ...params,
	      record
	    }, {
	      encoding: 'application/json',
	      headers
	    });
	    return res.data;
	  }
	  async delete(params, headers) {
	    await this._service.xrpc.call('com.atproto.repo.deleteRecord', undefined, {
	      collection: 'app.bsky.feed.generator',
	      ...params
	    }, {
	      headers
	    });
	  }
	}
	client$1.GeneratorRecord = GeneratorRecord;
	class LikeRecord {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	  async list(params) {
	    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {
	      collection: 'app.bsky.feed.like',
	      ...params
	    });
	    return res.data;
	  }
	  async get(params) {
	    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {
	      collection: 'app.bsky.feed.like',
	      ...params
	    });
	    return res.data;
	  }
	  async create(params, record, headers) {
	    record.$type = 'app.bsky.feed.like';
	    const res = await this._service.xrpc.call('com.atproto.repo.createRecord', undefined, {
	      collection: 'app.bsky.feed.like',
	      ...params,
	      record
	    }, {
	      encoding: 'application/json',
	      headers
	    });
	    return res.data;
	  }
	  async delete(params, headers) {
	    await this._service.xrpc.call('com.atproto.repo.deleteRecord', undefined, {
	      collection: 'app.bsky.feed.like',
	      ...params
	    }, {
	      headers
	    });
	  }
	}
	client$1.LikeRecord = LikeRecord;
	class PostRecord {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	  async list(params) {
	    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {
	      collection: 'app.bsky.feed.post',
	      ...params
	    });
	    return res.data;
	  }
	  async get(params) {
	    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {
	      collection: 'app.bsky.feed.post',
	      ...params
	    });
	    return res.data;
	  }
	  async create(params, record, headers) {
	    record.$type = 'app.bsky.feed.post';
	    const res = await this._service.xrpc.call('com.atproto.repo.createRecord', undefined, {
	      collection: 'app.bsky.feed.post',
	      ...params,
	      record
	    }, {
	      encoding: 'application/json',
	      headers
	    });
	    return res.data;
	  }
	  async delete(params, headers) {
	    await this._service.xrpc.call('com.atproto.repo.deleteRecord', undefined, {
	      collection: 'app.bsky.feed.post',
	      ...params
	    }, {
	      headers
	    });
	  }
	}
	client$1.PostRecord = PostRecord;
	class RepostRecord {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	  async list(params) {
	    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {
	      collection: 'app.bsky.feed.repost',
	      ...params
	    });
	    return res.data;
	  }
	  async get(params) {
	    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {
	      collection: 'app.bsky.feed.repost',
	      ...params
	    });
	    return res.data;
	  }
	  async create(params, record, headers) {
	    record.$type = 'app.bsky.feed.repost';
	    const res = await this._service.xrpc.call('com.atproto.repo.createRecord', undefined, {
	      collection: 'app.bsky.feed.repost',
	      ...params,
	      record
	    }, {
	      encoding: 'application/json',
	      headers
	    });
	    return res.data;
	  }
	  async delete(params, headers) {
	    await this._service.xrpc.call('com.atproto.repo.deleteRecord', undefined, {
	      collection: 'app.bsky.feed.repost',
	      ...params
	    }, {
	      headers
	    });
	  }
	}
	client$1.RepostRecord = RepostRecord;
	class ThreadgateRecord {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	  async list(params) {
	    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {
	      collection: 'app.bsky.feed.threadgate',
	      ...params
	    });
	    return res.data;
	  }
	  async get(params) {
	    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {
	      collection: 'app.bsky.feed.threadgate',
	      ...params
	    });
	    return res.data;
	  }
	  async create(params, record, headers) {
	    record.$type = 'app.bsky.feed.threadgate';
	    const res = await this._service.xrpc.call('com.atproto.repo.createRecord', undefined, {
	      collection: 'app.bsky.feed.threadgate',
	      ...params,
	      record
	    }, {
	      encoding: 'application/json',
	      headers
	    });
	    return res.data;
	  }
	  async delete(params, headers) {
	    await this._service.xrpc.call('com.atproto.repo.deleteRecord', undefined, {
	      collection: 'app.bsky.feed.threadgate',
	      ...params
	    }, {
	      headers
	    });
	  }
	}
	client$1.ThreadgateRecord = ThreadgateRecord;
	class AppBskyGraphNS {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "block", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "follow", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "list", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "listblock", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "listitem", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	    this.block = new BlockRecord(service);
	    this.follow = new FollowRecord(service);
	    this.list = new ListRecord(service);
	    this.listblock = new ListblockRecord(service);
	    this.listitem = new ListitemRecord(service);
	  }
	  getBlocks(params, opts) {
	    return this._service.xrpc.call('app.bsky.graph.getBlocks', params, undefined, opts).catch(e => {
	      throw AppBskyGraphGetBlocks.toKnownErr(e);
	    });
	  }
	  getFollowers(params, opts) {
	    return this._service.xrpc.call('app.bsky.graph.getFollowers', params, undefined, opts).catch(e => {
	      throw AppBskyGraphGetFollowers.toKnownErr(e);
	    });
	  }
	  getFollows(params, opts) {
	    return this._service.xrpc.call('app.bsky.graph.getFollows', params, undefined, opts).catch(e => {
	      throw AppBskyGraphGetFollows.toKnownErr(e);
	    });
	  }
	  getList(params, opts) {
	    return this._service.xrpc.call('app.bsky.graph.getList', params, undefined, opts).catch(e => {
	      throw AppBskyGraphGetList.toKnownErr(e);
	    });
	  }
	  getListBlocks(params, opts) {
	    return this._service.xrpc.call('app.bsky.graph.getListBlocks', params, undefined, opts).catch(e => {
	      throw AppBskyGraphGetListBlocks.toKnownErr(e);
	    });
	  }
	  getListMutes(params, opts) {
	    return this._service.xrpc.call('app.bsky.graph.getListMutes', params, undefined, opts).catch(e => {
	      throw AppBskyGraphGetListMutes.toKnownErr(e);
	    });
	  }
	  getLists(params, opts) {
	    return this._service.xrpc.call('app.bsky.graph.getLists', params, undefined, opts).catch(e => {
	      throw AppBskyGraphGetLists.toKnownErr(e);
	    });
	  }
	  getMutes(params, opts) {
	    return this._service.xrpc.call('app.bsky.graph.getMutes', params, undefined, opts).catch(e => {
	      throw AppBskyGraphGetMutes.toKnownErr(e);
	    });
	  }
	  getRelationships(params, opts) {
	    return this._service.xrpc.call('app.bsky.graph.getRelationships', params, undefined, opts).catch(e => {
	      throw AppBskyGraphGetRelationships.toKnownErr(e);
	    });
	  }
	  getSuggestedFollowsByActor(params, opts) {
	    return this._service.xrpc.call('app.bsky.graph.getSuggestedFollowsByActor', params, undefined, opts).catch(e => {
	      throw AppBskyGraphGetSuggestedFollowsByActor.toKnownErr(e);
	    });
	  }
	  muteActor(data, opts) {
	    return this._service.xrpc.call('app.bsky.graph.muteActor', opts?.qp, data, opts).catch(e => {
	      throw AppBskyGraphMuteActor.toKnownErr(e);
	    });
	  }
	  muteActorList(data, opts) {
	    return this._service.xrpc.call('app.bsky.graph.muteActorList', opts?.qp, data, opts).catch(e => {
	      throw AppBskyGraphMuteActorList.toKnownErr(e);
	    });
	  }
	  unmuteActor(data, opts) {
	    return this._service.xrpc.call('app.bsky.graph.unmuteActor', opts?.qp, data, opts).catch(e => {
	      throw AppBskyGraphUnmuteActor.toKnownErr(e);
	    });
	  }
	  unmuteActorList(data, opts) {
	    return this._service.xrpc.call('app.bsky.graph.unmuteActorList', opts?.qp, data, opts).catch(e => {
	      throw AppBskyGraphUnmuteActorList.toKnownErr(e);
	    });
	  }
	}
	client$1.AppBskyGraphNS = AppBskyGraphNS;
	class BlockRecord {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	  async list(params) {
	    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {
	      collection: 'app.bsky.graph.block',
	      ...params
	    });
	    return res.data;
	  }
	  async get(params) {
	    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {
	      collection: 'app.bsky.graph.block',
	      ...params
	    });
	    return res.data;
	  }
	  async create(params, record, headers) {
	    record.$type = 'app.bsky.graph.block';
	    const res = await this._service.xrpc.call('com.atproto.repo.createRecord', undefined, {
	      collection: 'app.bsky.graph.block',
	      ...params,
	      record
	    }, {
	      encoding: 'application/json',
	      headers
	    });
	    return res.data;
	  }
	  async delete(params, headers) {
	    await this._service.xrpc.call('com.atproto.repo.deleteRecord', undefined, {
	      collection: 'app.bsky.graph.block',
	      ...params
	    }, {
	      headers
	    });
	  }
	}
	client$1.BlockRecord = BlockRecord;
	class FollowRecord {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	  async list(params) {
	    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {
	      collection: 'app.bsky.graph.follow',
	      ...params
	    });
	    return res.data;
	  }
	  async get(params) {
	    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {
	      collection: 'app.bsky.graph.follow',
	      ...params
	    });
	    return res.data;
	  }
	  async create(params, record, headers) {
	    record.$type = 'app.bsky.graph.follow';
	    const res = await this._service.xrpc.call('com.atproto.repo.createRecord', undefined, {
	      collection: 'app.bsky.graph.follow',
	      ...params,
	      record
	    }, {
	      encoding: 'application/json',
	      headers
	    });
	    return res.data;
	  }
	  async delete(params, headers) {
	    await this._service.xrpc.call('com.atproto.repo.deleteRecord', undefined, {
	      collection: 'app.bsky.graph.follow',
	      ...params
	    }, {
	      headers
	    });
	  }
	}
	client$1.FollowRecord = FollowRecord;
	class ListRecord {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	  async list(params) {
	    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {
	      collection: 'app.bsky.graph.list',
	      ...params
	    });
	    return res.data;
	  }
	  async get(params) {
	    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {
	      collection: 'app.bsky.graph.list',
	      ...params
	    });
	    return res.data;
	  }
	  async create(params, record, headers) {
	    record.$type = 'app.bsky.graph.list';
	    const res = await this._service.xrpc.call('com.atproto.repo.createRecord', undefined, {
	      collection: 'app.bsky.graph.list',
	      ...params,
	      record
	    }, {
	      encoding: 'application/json',
	      headers
	    });
	    return res.data;
	  }
	  async delete(params, headers) {
	    await this._service.xrpc.call('com.atproto.repo.deleteRecord', undefined, {
	      collection: 'app.bsky.graph.list',
	      ...params
	    }, {
	      headers
	    });
	  }
	}
	client$1.ListRecord = ListRecord;
	class ListblockRecord {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	  async list(params) {
	    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {
	      collection: 'app.bsky.graph.listblock',
	      ...params
	    });
	    return res.data;
	  }
	  async get(params) {
	    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {
	      collection: 'app.bsky.graph.listblock',
	      ...params
	    });
	    return res.data;
	  }
	  async create(params, record, headers) {
	    record.$type = 'app.bsky.graph.listblock';
	    const res = await this._service.xrpc.call('com.atproto.repo.createRecord', undefined, {
	      collection: 'app.bsky.graph.listblock',
	      ...params,
	      record
	    }, {
	      encoding: 'application/json',
	      headers
	    });
	    return res.data;
	  }
	  async delete(params, headers) {
	    await this._service.xrpc.call('com.atproto.repo.deleteRecord', undefined, {
	      collection: 'app.bsky.graph.listblock',
	      ...params
	    }, {
	      headers
	    });
	  }
	}
	client$1.ListblockRecord = ListblockRecord;
	class ListitemRecord {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	  async list(params) {
	    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {
	      collection: 'app.bsky.graph.listitem',
	      ...params
	    });
	    return res.data;
	  }
	  async get(params) {
	    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {
	      collection: 'app.bsky.graph.listitem',
	      ...params
	    });
	    return res.data;
	  }
	  async create(params, record, headers) {
	    record.$type = 'app.bsky.graph.listitem';
	    const res = await this._service.xrpc.call('com.atproto.repo.createRecord', undefined, {
	      collection: 'app.bsky.graph.listitem',
	      ...params,
	      record
	    }, {
	      encoding: 'application/json',
	      headers
	    });
	    return res.data;
	  }
	  async delete(params, headers) {
	    await this._service.xrpc.call('com.atproto.repo.deleteRecord', undefined, {
	      collection: 'app.bsky.graph.listitem',
	      ...params
	    }, {
	      headers
	    });
	  }
	}
	client$1.ListitemRecord = ListitemRecord;
	class AppBskyLabelerNS {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	    this.service = new ServiceRecord(service);
	  }
	  getServices(params, opts) {
	    return this._service.xrpc.call('app.bsky.labeler.getServices', params, undefined, opts).catch(e => {
	      throw AppBskyLabelerGetServices.toKnownErr(e);
	    });
	  }
	}
	client$1.AppBskyLabelerNS = AppBskyLabelerNS;
	class ServiceRecord {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	  async list(params) {
	    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {
	      collection: 'app.bsky.labeler.service',
	      ...params
	    });
	    return res.data;
	  }
	  async get(params) {
	    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {
	      collection: 'app.bsky.labeler.service',
	      ...params
	    });
	    return res.data;
	  }
	  async create(params, record, headers) {
	    record.$type = 'app.bsky.labeler.service';
	    const res = await this._service.xrpc.call('com.atproto.repo.createRecord', undefined, {
	      collection: 'app.bsky.labeler.service',
	      rkey: 'self',
	      ...params,
	      record
	    }, {
	      encoding: 'application/json',
	      headers
	    });
	    return res.data;
	  }
	  async delete(params, headers) {
	    await this._service.xrpc.call('com.atproto.repo.deleteRecord', undefined, {
	      collection: 'app.bsky.labeler.service',
	      ...params
	    }, {
	      headers
	    });
	  }
	}
	client$1.ServiceRecord = ServiceRecord;
	class AppBskyNotificationNS {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	  getUnreadCount(params, opts) {
	    return this._service.xrpc.call('app.bsky.notification.getUnreadCount', params, undefined, opts).catch(e => {
	      throw AppBskyNotificationGetUnreadCount.toKnownErr(e);
	    });
	  }
	  listNotifications(params, opts) {
	    return this._service.xrpc.call('app.bsky.notification.listNotifications', params, undefined, opts).catch(e => {
	      throw AppBskyNotificationListNotifications.toKnownErr(e);
	    });
	  }
	  registerPush(data, opts) {
	    return this._service.xrpc.call('app.bsky.notification.registerPush', opts?.qp, data, opts).catch(e => {
	      throw AppBskyNotificationRegisterPush.toKnownErr(e);
	    });
	  }
	  updateSeen(data, opts) {
	    return this._service.xrpc.call('app.bsky.notification.updateSeen', opts?.qp, data, opts).catch(e => {
	      throw AppBskyNotificationUpdateSeen.toKnownErr(e);
	    });
	  }
	}
	client$1.AppBskyNotificationNS = AppBskyNotificationNS;
	class AppBskyRichtextNS {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	}
	client$1.AppBskyRichtextNS = AppBskyRichtextNS;
	class AppBskyUnspeccedNS {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	  getPopularFeedGenerators(params, opts) {
	    return this._service.xrpc.call('app.bsky.unspecced.getPopularFeedGenerators', params, undefined, opts).catch(e => {
	      throw AppBskyUnspeccedGetPopularFeedGenerators.toKnownErr(e);
	    });
	  }
	  getSuggestionsSkeleton(params, opts) {
	    return this._service.xrpc.call('app.bsky.unspecced.getSuggestionsSkeleton', params, undefined, opts).catch(e => {
	      throw AppBskyUnspeccedGetSuggestionsSkeleton.toKnownErr(e);
	    });
	  }
	  getTaggedSuggestions(params, opts) {
	    return this._service.xrpc.call('app.bsky.unspecced.getTaggedSuggestions', params, undefined, opts).catch(e => {
	      throw AppBskyUnspeccedGetTaggedSuggestions.toKnownErr(e);
	    });
	  }
	  searchActorsSkeleton(params, opts) {
	    return this._service.xrpc.call('app.bsky.unspecced.searchActorsSkeleton', params, undefined, opts).catch(e => {
	      throw AppBskyUnspeccedSearchActorsSkeleton.toKnownErr(e);
	    });
	  }
	  searchPostsSkeleton(params, opts) {
	    return this._service.xrpc.call('app.bsky.unspecced.searchPostsSkeleton', params, undefined, opts).catch(e => {
	      throw AppBskyUnspeccedSearchPostsSkeleton.toKnownErr(e);
	    });
	  }
	}
	client$1.AppBskyUnspeccedNS = AppBskyUnspeccedNS;
	class ToolsNS {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "ozone", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	    this.ozone = new ToolsOzoneNS(service);
	  }
	}
	client$1.ToolsNS = ToolsNS;
	class ToolsOzoneNS {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "communication", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "moderation", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	    this.communication = new ToolsOzoneCommunicationNS(service);
	    this.moderation = new ToolsOzoneModerationNS(service);
	  }
	}
	client$1.ToolsOzoneNS = ToolsOzoneNS;
	class ToolsOzoneCommunicationNS {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	  createTemplate(data, opts) {
	    return this._service.xrpc.call('tools.ozone.communication.createTemplate', opts?.qp, data, opts).catch(e => {
	      throw ToolsOzoneCommunicationCreateTemplate.toKnownErr(e);
	    });
	  }
	  deleteTemplate(data, opts) {
	    return this._service.xrpc.call('tools.ozone.communication.deleteTemplate', opts?.qp, data, opts).catch(e => {
	      throw ToolsOzoneCommunicationDeleteTemplate.toKnownErr(e);
	    });
	  }
	  listTemplates(params, opts) {
	    return this._service.xrpc.call('tools.ozone.communication.listTemplates', params, undefined, opts).catch(e => {
	      throw ToolsOzoneCommunicationListTemplates.toKnownErr(e);
	    });
	  }
	  updateTemplate(data, opts) {
	    return this._service.xrpc.call('tools.ozone.communication.updateTemplate', opts?.qp, data, opts).catch(e => {
	      throw ToolsOzoneCommunicationUpdateTemplate.toKnownErr(e);
	    });
	  }
	}
	client$1.ToolsOzoneCommunicationNS = ToolsOzoneCommunicationNS;
	class ToolsOzoneModerationNS {
	  constructor(service) {
	    Object.defineProperty(this, "_service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this._service = service;
	  }
	  emitEvent(data, opts) {
	    return this._service.xrpc.call('tools.ozone.moderation.emitEvent', opts?.qp, data, opts).catch(e => {
	      throw ToolsOzoneModerationEmitEvent.toKnownErr(e);
	    });
	  }
	  getEvent(params, opts) {
	    return this._service.xrpc.call('tools.ozone.moderation.getEvent', params, undefined, opts).catch(e => {
	      throw ToolsOzoneModerationGetEvent.toKnownErr(e);
	    });
	  }
	  getRecord(params, opts) {
	    return this._service.xrpc.call('tools.ozone.moderation.getRecord', params, undefined, opts).catch(e => {
	      throw ToolsOzoneModerationGetRecord.toKnownErr(e);
	    });
	  }
	  getRepo(params, opts) {
	    return this._service.xrpc.call('tools.ozone.moderation.getRepo', params, undefined, opts).catch(e => {
	      throw ToolsOzoneModerationGetRepo.toKnownErr(e);
	    });
	  }
	  queryEvents(params, opts) {
	    return this._service.xrpc.call('tools.ozone.moderation.queryEvents', params, undefined, opts).catch(e => {
	      throw ToolsOzoneModerationQueryEvents.toKnownErr(e);
	    });
	  }
	  queryStatuses(params, opts) {
	    return this._service.xrpc.call('tools.ozone.moderation.queryStatuses', params, undefined, opts).catch(e => {
	      throw ToolsOzoneModerationQueryStatuses.toKnownErr(e);
	    });
	  }
	  searchRepos(params, opts) {
	    return this._service.xrpc.call('tools.ozone.moderation.searchRepos', params, undefined, opts).catch(e => {
	      throw ToolsOzoneModerationSearchRepos.toKnownErr(e);
	    });
	  }
	}
	client$1.ToolsOzoneModerationNS = ToolsOzoneModerationNS;

	var agent = {};

	Object.defineProperty(agent, "__esModule", {
	  value: true
	});
	agent.AtpAgent = void 0;
	const xrpc_1 = dist;
	const xrpc_2 = dist;
	const common_web_1$2 = dist$2;
	const client_1$5 = client$1;
	const const_1 = _const;
	const MAX_LABELERS = 10;
	const REFRESH_SESSION = 'com.atproto.server.refreshSession';
	/**
	 * An ATP "Agent"
	 * Manages session token lifecycles and provides convenience methods.
	 */
	class AtpAgent {
	  get com() {
	    return this.api.com;
	  }
	  /**
	   * Configures the API globally.
	   */
	  static configure(opts) {
	    if (opts.fetch) {
	      AtpAgent.fetch = opts.fetch;
	    }
	    if (opts.appLabelers) {
	      AtpAgent.appLabelers = opts.appLabelers;
	    }
	  }
	  constructor(opts) {
	    Object.defineProperty(this, "service", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "api", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "session", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "labelersHeader", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: []
	    });
	    Object.defineProperty(this, "proxyHeader", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "pdsUrl", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    }); // The PDS URL, driven by the did doc. May be undefined.
	    Object.defineProperty(this, "_baseClient", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "_persistSession", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "_refreshSessionPromise", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    /**
	     * Upload a binary blob to the server
	     */
	    Object.defineProperty(this, "uploadBlob", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: (data, opts) => this.api.com.atproto.repo.uploadBlob(data, opts)
	    });
	    /**
	     * Resolve a handle to a DID
	     */
	    Object.defineProperty(this, "resolveHandle", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: (params, opts) => this.api.com.atproto.identity.resolveHandle(params, opts)
	    });
	    /**
	     * Change the user's handle
	     */
	    Object.defineProperty(this, "updateHandle", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: (data, opts) => this.api.com.atproto.identity.updateHandle(data, opts)
	    });
	    /**
	     * Create a moderation report
	     */
	    Object.defineProperty(this, "createModerationReport", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: (data, opts) => this.api.com.atproto.moderation.createReport(data, opts)
	    });
	    this.service = opts.service instanceof URL ? opts.service : new URL(opts.service);
	    this._persistSession = opts.persistSession;
	    // create an ATP client instance for this agent
	    this._baseClient = new client_1$5.AtpBaseClient();
	    this._baseClient.xrpc.fetch = this._fetch.bind(this); // patch its fetch implementation
	    this.api = this._baseClient.service(opts.service);
	  }
	  clone() {
	    const inst = new AtpAgent({
	      service: this.service
	    });
	    this.copyInto(inst);
	    return inst;
	  }
	  copyInto(inst) {
	    inst.session = this.session;
	    inst.labelersHeader = this.labelersHeader;
	    inst.proxyHeader = this.proxyHeader;
	    inst.pdsUrl = this.pdsUrl;
	    inst.api.xrpc.uri = this.pdsUrl || this.service;
	  }
	  withProxy(serviceType, did) {
	    const inst = this.clone();
	    inst.configureProxyHeader(serviceType, did);
	    return inst;
	  }
	  /**
	   * Is there any active session?
	   */
	  get hasSession() {
	    return !!this.session;
	  }
	  /**
	   * Sets the "Persist Session" method which can be used to store access tokens
	   * as they change.
	   */
	  setPersistSessionHandler(handler) {
	    this._persistSession = handler;
	  }
	  /**
	   * Configures the moderation services to be applied on requests.
	   * NOTE: this is called automatically by getPreferences() and the relevant moderation config
	   * methods in BskyAgent instances.
	   */
	  configureLabelersHeader(labelerDids) {
	    this.labelersHeader = labelerDids;
	  }
	  /**
	   * Configures the atproto-proxy header to be applied on requests
	   */
	  configureProxyHeader(serviceType, did) {
	    if (did.startsWith('did:')) {
	      this.proxyHeader = `${did}#${serviceType}`;
	    }
	  }
	  /**
	   * Create a new account and hydrate its session in this agent.
	   */
	  async createAccount(opts) {
	    try {
	      const res = await this.api.com.atproto.server.createAccount(opts);
	      this.session = {
	        accessJwt: res.data.accessJwt,
	        refreshJwt: res.data.refreshJwt,
	        handle: res.data.handle,
	        did: res.data.did,
	        email: opts.email,
	        emailConfirmed: false,
	        emailAuthFactor: false
	      };
	      this._updateApiEndpoint(res.data.didDoc);
	      return res;
	    } catch (e) {
	      this.session = undefined;
	      throw e;
	    } finally {
	      if (this.session) {
	        this._persistSession?.('create', this.session);
	      } else {
	        this._persistSession?.('create-failed', undefined);
	      }
	    }
	  }
	  /**
	   * Start a new session with this agent.
	   */
	  async login(opts) {
	    try {
	      const res = await this.api.com.atproto.server.createSession({
	        identifier: opts.identifier,
	        password: opts.password,
	        authFactorToken: opts.authFactorToken
	      });
	      this.session = {
	        accessJwt: res.data.accessJwt,
	        refreshJwt: res.data.refreshJwt,
	        handle: res.data.handle,
	        did: res.data.did,
	        email: res.data.email,
	        emailConfirmed: res.data.emailConfirmed,
	        emailAuthFactor: res.data.emailAuthFactor
	      };
	      this._updateApiEndpoint(res.data.didDoc);
	      return res;
	    } catch (e) {
	      this.session = undefined;
	      throw e;
	    } finally {
	      if (this.session) {
	        this._persistSession?.('create', this.session);
	      } else {
	        this._persistSession?.('create-failed', undefined);
	      }
	    }
	  }
	  /**
	   * Resume a pre-existing session with this agent.
	   */
	  async resumeSession(session) {
	    try {
	      this.session = session;
	      const res = await this.api.com.atproto.server.getSession();
	      if (res.data.did !== this.session.did) {
	        throw new xrpc_2.XRPCError(xrpc_2.ResponseType.InvalidRequest, 'Invalid session', 'InvalidDID');
	      }
	      this.session.email = res.data.email;
	      this.session.handle = res.data.handle;
	      this.session.emailConfirmed = res.data.emailConfirmed;
	      this.session.emailAuthFactor = res.data.emailAuthFactor;
	      this._updateApiEndpoint(res.data.didDoc);
	      this._persistSession?.('update', this.session);
	      return res;
	    } catch (e) {
	      this.session = undefined;
	      if (e instanceof xrpc_2.XRPCError) {
	        /*
	         * `ExpiredToken` and `InvalidToken` are handled in
	         * `this_refreshSession`, and emit an `expired` event there.
	         *
	         * Everything else is handled here.
	         */
	        if ([1, 408, 425, 429, 500, 502, 503, 504, 522, 524].includes(e.status)) {
	          this._persistSession?.('network-error', undefined);
	        } else {
	          this._persistSession?.('expired', undefined);
	        }
	      } else {
	        this._persistSession?.('network-error', undefined);
	      }
	      throw e;
	    }
	  }
	  /**
	   * Internal helper to add authorization headers to requests.
	   */
	  _addHeaders(reqHeaders) {
	    if (!reqHeaders.authorization && this.session?.accessJwt) {
	      reqHeaders = {
	        ...reqHeaders,
	        authorization: `Bearer ${this.session.accessJwt}`
	      };
	    }
	    if (this.proxyHeader) {
	      reqHeaders = {
	        ...reqHeaders,
	        'atproto-proxy': this.proxyHeader
	      };
	    }
	    reqHeaders = {
	      ...reqHeaders,
	      'atproto-accept-labelers': AtpAgent.appLabelers.map(str => `${str};redact`).concat(this.labelersHeader.filter(str => str.startsWith('did:'))).slice(0, MAX_LABELERS).join(', ')
	    };
	    return reqHeaders;
	  }
	  /**
	   * Internal fetch handler which adds access-token management
	   */
	  async _fetch(reqUri, reqMethod, reqHeaders, reqBody) {
	    if (!AtpAgent.fetch) {
	      throw new Error('AtpAgent fetch() method not configured');
	    }
	    // wait for any active session-refreshes to finish
	    await this._refreshSessionPromise;
	    // send the request
	    let res = await AtpAgent.fetch(reqUri, reqMethod, this._addHeaders(reqHeaders), reqBody);
	    // handle session-refreshes as needed
	    if (isErrorResponse(res, ['ExpiredToken']) && this.session?.refreshJwt) {
	      // attempt refresh
	      await this.refreshSession();
	      // resend the request with the new access token
	      res = await AtpAgent.fetch(reqUri, reqMethod, this._addHeaders(reqHeaders), reqBody);
	    }
	    return res;
	  }
	  /**
	   * Internal helper to refresh sessions
	   * - Wraps the actual implementation in a promise-guard to ensure only
	   *   one refresh is attempted at a time.
	   */
	  async refreshSession() {
	    if (this._refreshSessionPromise) {
	      return this._refreshSessionPromise;
	    }
	    this._refreshSessionPromise = this._refreshSessionInner();
	    try {
	      await this._refreshSessionPromise;
	    } finally {
	      this._refreshSessionPromise = undefined;
	    }
	  }
	  /**
	   * Internal helper to refresh sessions (actual behavior)
	   */
	  async _refreshSessionInner() {
	    if (!AtpAgent.fetch) {
	      throw new Error('AtpAgent fetch() method not configured');
	    }
	    if (!this.session?.refreshJwt) {
	      return;
	    }
	    // send the refresh request
	    const url = new URL((this.pdsUrl || this.service).origin);
	    url.pathname = `/xrpc/${REFRESH_SESSION}`;
	    const res = await AtpAgent.fetch(url.toString(), 'POST', {
	      authorization: `Bearer ${this.session.refreshJwt}`
	    }, undefined);
	    if (isErrorResponse(res, ['ExpiredToken', 'InvalidToken'])) {
	      // failed due to a bad refresh token
	      this.session = undefined;
	      this._persistSession?.('expired', undefined);
	    } else if (isNewSessionObject(this._baseClient, res.body)) {
	      // succeeded, update the session
	      this.session = {
	        ...(this.session || {}),
	        accessJwt: res.body.accessJwt,
	        refreshJwt: res.body.refreshJwt,
	        handle: res.body.handle,
	        did: res.body.did
	      };
	      this._updateApiEndpoint(res.body.didDoc);
	      this._persistSession?.('update', this.session);
	    }
	    // else: other failures should be ignored - the issue will
	    // propagate in the _fetch() handler's second attempt to run
	    // the request
	  }
	  /**
	   * Helper to update the pds endpoint dynamically.
	   *
	   * The session methods (create, resume, refresh) may respond with the user's
	   * did document which contains the user's canonical PDS endpoint. That endpoint
	   * may differ from the endpoint used to contact the server. We capture that
	   * PDS endpoint and update the client to use that given endpoint for future
	   * requests. (This helps ensure smooth migrations between PDSes, especially
	   * when the PDSes are operated by a single org.)
	   */
	  _updateApiEndpoint(didDoc) {
	    if ((0, common_web_1$2.isValidDidDoc)(didDoc)) {
	      const endpoint = (0, common_web_1$2.getPdsEndpoint)(didDoc);
	      this.pdsUrl = endpoint ? new URL(endpoint) : undefined;
	    }
	    this.api.xrpc.uri = this.pdsUrl || this.service;
	  }
	}
	agent.AtpAgent = AtpAgent;
	/**
	 * The `fetch` implementation; must be implemented for your platform.
	 */
	Object.defineProperty(AtpAgent, "fetch", {
	  enumerable: true,
	  configurable: true,
	  writable: true,
	  value: xrpc_2.defaultFetchHandler
	});
	/**
	 * The labelers to be used across all requests with the takedown capability
	 */
	Object.defineProperty(AtpAgent, "appLabelers", {
	  enumerable: true,
	  configurable: true,
	  writable: true,
	  value: [const_1.BSKY_LABELER_DID]
	});
	function isErrorObject(v) {
	  return xrpc_1.errorResponseBody.safeParse(v).success;
	}
	function isErrorResponse(res, errorNames) {
	  if (res.status !== 400) {
	    return false;
	  }
	  if (!isErrorObject(res.body)) {
	    return false;
	  }
	  return typeof res.body.error === 'string' && errorNames.includes(res.body.error);
	}
	function isNewSessionObject(client, v) {
	  try {
	    client.xrpc.lex.assertValidXrpcOutput('com.atproto.server.refreshSession', v);
	    return true;
	  } catch {
	    return false;
	  }
	}

	var richText = {};

	var unicode = {};

	/**
	 * Javascript uses utf16-encoded strings while most environments and specs
	 * have standardized around utf8 (including JSON).
	 *
	 * After some lengthy debated we decided that richtext facets need to use
	 * utf8 indices. This means we need tools to convert indices between utf8
	 * and utf16, and that's precisely what this library handles.
	 */
	Object.defineProperty(unicode, "__esModule", {
	  value: true
	});
	unicode.UnicodeString = void 0;
	const common_web_1$1 = dist$2;
	const encoder = new TextEncoder();
	const decoder = new TextDecoder();
	class UnicodeString {
	  constructor(utf16) {
	    Object.defineProperty(this, "utf16", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "utf8", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "_graphemeLen", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this.utf16 = utf16;
	    this.utf8 = encoder.encode(utf16);
	  }
	  get length() {
	    return this.utf8.byteLength;
	  }
	  get graphemeLength() {
	    if (!this._graphemeLen) {
	      this._graphemeLen = (0, common_web_1$1.graphemeLen)(this.utf16);
	    }
	    return this._graphemeLen;
	  }
	  slice(start, end) {
	    return decoder.decode(this.utf8.slice(start, end));
	  }
	  utf16IndexToUtf8Index(i) {
	    return encoder.encode(this.utf16.slice(0, i)).byteLength;
	  }
	  toString() {
	    return this.utf16;
	  }
	}
	unicode.UnicodeString = UnicodeString;

	var sanitization = {};

	Object.defineProperty(sanitization, "__esModule", {
	  value: true
	});
	sanitization.sanitizeRichText = void 0;
	const unicode_1$1 = unicode;
	// this regex is intentionally matching on the zero-with-separator codepoint
	// eslint-disable-next-line no-misleading-character-class
	const EXCESS_SPACE_RE = /[\r\n]([\u00AD\u2060\u200D\u200C\u200B\s]*[\r\n]){2,}/;
	const REPLACEMENT_STR = '\n\n';
	function sanitizeRichText(richText, opts) {
	  if (opts.cleanNewlines) {
	    richText = clean(richText, EXCESS_SPACE_RE, REPLACEMENT_STR);
	  }
	  return richText;
	}
	sanitization.sanitizeRichText = sanitizeRichText;
	function clean(richText, targetRegexp, replacementString) {
	  richText = richText.clone();
	  let match = richText.unicodeText.utf16.match(targetRegexp);
	  while (match && typeof match.index !== 'undefined') {
	    const oldText = richText.unicodeText;
	    const removeStartIndex = richText.unicodeText.utf16IndexToUtf8Index(match.index);
	    const removeEndIndex = removeStartIndex + new unicode_1$1.UnicodeString(match[0]).length;
	    richText.delete(removeStartIndex, removeEndIndex);
	    if (richText.unicodeText.utf16 === oldText.utf16) {
	      break; // sanity check
	    }
	    richText.insert(removeStartIndex, replacementString);
	    match = richText.unicodeText.utf16.match(targetRegexp);
	  }
	  return richText;
	}

	var detection = {};

	var require$$0 = [
		"aaa",
		"aarp",
		"abb",
		"abbott",
		"abbvie",
		"abc",
		"able",
		"abogado",
		"abudhabi",
		"ac",
		"academy",
		"accenture",
		"accountant",
		"accountants",
		"aco",
		"actor",
		"ad",
		"ads",
		"adult",
		"ae",
		"aeg",
		"aero",
		"aetna",
		"af",
		"afl",
		"africa",
		"ag",
		"agakhan",
		"agency",
		"ai",
		"aig",
		"airbus",
		"airforce",
		"airtel",
		"akdn",
		"al",
		"alibaba",
		"alipay",
		"allfinanz",
		"allstate",
		"ally",
		"alsace",
		"alstom",
		"am",
		"amazon",
		"americanexpress",
		"americanfamily",
		"amex",
		"amfam",
		"amica",
		"amsterdam",
		"analytics",
		"android",
		"anquan",
		"anz",
		"ao",
		"aol",
		"apartments",
		"app",
		"apple",
		"aq",
		"aquarelle",
		"ar",
		"arab",
		"aramco",
		"archi",
		"army",
		"arpa",
		"art",
		"arte",
		"as",
		"asda",
		"asia",
		"associates",
		"at",
		"athleta",
		"attorney",
		"au",
		"auction",
		"audi",
		"audible",
		"audio",
		"auspost",
		"author",
		"auto",
		"autos",
		"aw",
		"aws",
		"ax",
		"axa",
		"az",
		"azure",
		"ba",
		"baby",
		"baidu",
		"banamex",
		"band",
		"bank",
		"bar",
		"barcelona",
		"barclaycard",
		"barclays",
		"barefoot",
		"bargains",
		"baseball",
		"basketball",
		"bauhaus",
		"bayern",
		"bb",
		"bbc",
		"bbt",
		"bbva",
		"bcg",
		"bcn",
		"bd",
		"be",
		"beats",
		"beauty",
		"beer",
		"bentley",
		"berlin",
		"best",
		"bestbuy",
		"bet",
		"bf",
		"bg",
		"bh",
		"bharti",
		"bi",
		"bible",
		"bid",
		"bike",
		"bing",
		"bingo",
		"bio",
		"biz",
		"bj",
		"black",
		"blackfriday",
		"blockbuster",
		"blog",
		"bloomberg",
		"blue",
		"bm",
		"bms",
		"bmw",
		"bn",
		"bnpparibas",
		"bo",
		"boats",
		"boehringer",
		"bofa",
		"bom",
		"bond",
		"boo",
		"book",
		"booking",
		"bosch",
		"bostik",
		"boston",
		"bot",
		"boutique",
		"box",
		"br",
		"bradesco",
		"bridgestone",
		"broadway",
		"broker",
		"brother",
		"brussels",
		"bs",
		"bt",
		"build",
		"builders",
		"business",
		"buy",
		"buzz",
		"bv",
		"bw",
		"by",
		"bz",
		"bzh",
		"ca",
		"cab",
		"cafe",
		"cal",
		"call",
		"calvinklein",
		"cam",
		"camera",
		"camp",
		"canon",
		"capetown",
		"capital",
		"capitalone",
		"car",
		"caravan",
		"cards",
		"care",
		"career",
		"careers",
		"cars",
		"casa",
		"case",
		"cash",
		"casino",
		"cat",
		"catering",
		"catholic",
		"cba",
		"cbn",
		"cbre",
		"cc",
		"cd",
		"center",
		"ceo",
		"cern",
		"cf",
		"cfa",
		"cfd",
		"cg",
		"ch",
		"chanel",
		"channel",
		"charity",
		"chase",
		"chat",
		"cheap",
		"chintai",
		"christmas",
		"chrome",
		"church",
		"ci",
		"cipriani",
		"circle",
		"cisco",
		"citadel",
		"citi",
		"citic",
		"city",
		"ck",
		"cl",
		"claims",
		"cleaning",
		"click",
		"clinic",
		"clinique",
		"clothing",
		"cloud",
		"club",
		"clubmed",
		"cm",
		"cn",
		"co",
		"coach",
		"codes",
		"coffee",
		"college",
		"cologne",
		"com",
		"commbank",
		"community",
		"company",
		"compare",
		"computer",
		"comsec",
		"condos",
		"construction",
		"consulting",
		"contact",
		"contractors",
		"cooking",
		"cool",
		"coop",
		"corsica",
		"country",
		"coupon",
		"coupons",
		"courses",
		"cpa",
		"cr",
		"credit",
		"creditcard",
		"creditunion",
		"cricket",
		"crown",
		"crs",
		"cruise",
		"cruises",
		"cu",
		"cuisinella",
		"cv",
		"cw",
		"cx",
		"cy",
		"cymru",
		"cyou",
		"cz",
		"dabur",
		"dad",
		"dance",
		"data",
		"date",
		"dating",
		"datsun",
		"day",
		"dclk",
		"dds",
		"de",
		"deal",
		"dealer",
		"deals",
		"degree",
		"delivery",
		"dell",
		"deloitte",
		"delta",
		"democrat",
		"dental",
		"dentist",
		"desi",
		"design",
		"dev",
		"dhl",
		"diamonds",
		"diet",
		"digital",
		"direct",
		"directory",
		"discount",
		"discover",
		"dish",
		"diy",
		"dj",
		"dk",
		"dm",
		"dnp",
		"do",
		"docs",
		"doctor",
		"dog",
		"domains",
		"dot",
		"download",
		"drive",
		"dtv",
		"dubai",
		"dunlop",
		"dupont",
		"durban",
		"dvag",
		"dvr",
		"dz",
		"earth",
		"eat",
		"ec",
		"eco",
		"edeka",
		"edu",
		"education",
		"ee",
		"eg",
		"email",
		"emerck",
		"energy",
		"engineer",
		"engineering",
		"enterprises",
		"epson",
		"equipment",
		"er",
		"ericsson",
		"erni",
		"es",
		"esq",
		"estate",
		"et",
		"eu",
		"eurovision",
		"eus",
		"events",
		"exchange",
		"expert",
		"exposed",
		"express",
		"extraspace",
		"fage",
		"fail",
		"fairwinds",
		"faith",
		"family",
		"fan",
		"fans",
		"farm",
		"farmers",
		"fashion",
		"fast",
		"fedex",
		"feedback",
		"ferrari",
		"ferrero",
		"fi",
		"fidelity",
		"fido",
		"film",
		"final",
		"finance",
		"financial",
		"fire",
		"firestone",
		"firmdale",
		"fish",
		"fishing",
		"fit",
		"fitness",
		"fj",
		"fk",
		"flickr",
		"flights",
		"flir",
		"florist",
		"flowers",
		"fly",
		"fm",
		"fo",
		"foo",
		"food",
		"football",
		"ford",
		"forex",
		"forsale",
		"forum",
		"foundation",
		"fox",
		"fr",
		"free",
		"fresenius",
		"frl",
		"frogans",
		"frontier",
		"ftr",
		"fujitsu",
		"fun",
		"fund",
		"furniture",
		"futbol",
		"fyi",
		"ga",
		"gal",
		"gallery",
		"gallo",
		"gallup",
		"game",
		"games",
		"gap",
		"garden",
		"gay",
		"gb",
		"gbiz",
		"gd",
		"gdn",
		"ge",
		"gea",
		"gent",
		"genting",
		"george",
		"gf",
		"gg",
		"ggee",
		"gh",
		"gi",
		"gift",
		"gifts",
		"gives",
		"giving",
		"gl",
		"glass",
		"gle",
		"global",
		"globo",
		"gm",
		"gmail",
		"gmbh",
		"gmo",
		"gmx",
		"gn",
		"godaddy",
		"gold",
		"goldpoint",
		"golf",
		"goo",
		"goodyear",
		"goog",
		"google",
		"gop",
		"got",
		"gov",
		"gp",
		"gq",
		"gr",
		"grainger",
		"graphics",
		"gratis",
		"green",
		"gripe",
		"grocery",
		"group",
		"gs",
		"gt",
		"gu",
		"gucci",
		"guge",
		"guide",
		"guitars",
		"guru",
		"gw",
		"gy",
		"hair",
		"hamburg",
		"hangout",
		"haus",
		"hbo",
		"hdfc",
		"hdfcbank",
		"health",
		"healthcare",
		"help",
		"helsinki",
		"here",
		"hermes",
		"hiphop",
		"hisamitsu",
		"hitachi",
		"hiv",
		"hk",
		"hkt",
		"hm",
		"hn",
		"hockey",
		"holdings",
		"holiday",
		"homedepot",
		"homegoods",
		"homes",
		"homesense",
		"honda",
		"horse",
		"hospital",
		"host",
		"hosting",
		"hot",
		"hotels",
		"hotmail",
		"house",
		"how",
		"hr",
		"hsbc",
		"ht",
		"hu",
		"hughes",
		"hyatt",
		"hyundai",
		"ibm",
		"icbc",
		"ice",
		"icu",
		"id",
		"ie",
		"ieee",
		"ifm",
		"ikano",
		"il",
		"im",
		"imamat",
		"imdb",
		"immo",
		"immobilien",
		"in",
		"inc",
		"industries",
		"infiniti",
		"info",
		"ing",
		"ink",
		"institute",
		"insurance",
		"insure",
		"int",
		"international",
		"intuit",
		"investments",
		"io",
		"ipiranga",
		"iq",
		"ir",
		"irish",
		"is",
		"ismaili",
		"ist",
		"istanbul",
		"it",
		"itau",
		"itv",
		"jaguar",
		"java",
		"jcb",
		"je",
		"jeep",
		"jetzt",
		"jewelry",
		"jio",
		"jll",
		"jm",
		"jmp",
		"jnj",
		"jo",
		"jobs",
		"joburg",
		"jot",
		"joy",
		"jp",
		"jpmorgan",
		"jprs",
		"juegos",
		"juniper",
		"kaufen",
		"kddi",
		"ke",
		"kerryhotels",
		"kerrylogistics",
		"kerryproperties",
		"kfh",
		"kg",
		"kh",
		"ki",
		"kia",
		"kids",
		"kim",
		"kindle",
		"kitchen",
		"kiwi",
		"km",
		"kn",
		"koeln",
		"komatsu",
		"kosher",
		"kp",
		"kpmg",
		"kpn",
		"kr",
		"krd",
		"kred",
		"kuokgroup",
		"kw",
		"ky",
		"kyoto",
		"kz",
		"la",
		"lacaixa",
		"lamborghini",
		"lamer",
		"lancaster",
		"land",
		"landrover",
		"lanxess",
		"lasalle",
		"lat",
		"latino",
		"latrobe",
		"law",
		"lawyer",
		"lb",
		"lc",
		"lds",
		"lease",
		"leclerc",
		"lefrak",
		"legal",
		"lego",
		"lexus",
		"lgbt",
		"li",
		"lidl",
		"life",
		"lifeinsurance",
		"lifestyle",
		"lighting",
		"like",
		"lilly",
		"limited",
		"limo",
		"lincoln",
		"link",
		"lipsy",
		"live",
		"living",
		"lk",
		"llc",
		"llp",
		"loan",
		"loans",
		"locker",
		"locus",
		"lol",
		"london",
		"lotte",
		"lotto",
		"love",
		"lpl",
		"lplfinancial",
		"lr",
		"ls",
		"lt",
		"ltd",
		"ltda",
		"lu",
		"lundbeck",
		"luxe",
		"luxury",
		"lv",
		"ly",
		"ma",
		"madrid",
		"maif",
		"maison",
		"makeup",
		"man",
		"management",
		"mango",
		"map",
		"market",
		"marketing",
		"markets",
		"marriott",
		"marshalls",
		"mattel",
		"mba",
		"mc",
		"mckinsey",
		"md",
		"me",
		"med",
		"media",
		"meet",
		"melbourne",
		"meme",
		"memorial",
		"men",
		"menu",
		"merckmsd",
		"mg",
		"mh",
		"miami",
		"microsoft",
		"mil",
		"mini",
		"mint",
		"mit",
		"mitsubishi",
		"mk",
		"ml",
		"mlb",
		"mls",
		"mm",
		"mma",
		"mn",
		"mo",
		"mobi",
		"mobile",
		"moda",
		"moe",
		"moi",
		"mom",
		"monash",
		"money",
		"monster",
		"mormon",
		"mortgage",
		"moscow",
		"moto",
		"motorcycles",
		"mov",
		"movie",
		"mp",
		"mq",
		"mr",
		"ms",
		"msd",
		"mt",
		"mtn",
		"mtr",
		"mu",
		"museum",
		"music",
		"mv",
		"mw",
		"mx",
		"my",
		"mz",
		"na",
		"nab",
		"nagoya",
		"name",
		"natura",
		"navy",
		"nba",
		"nc",
		"ne",
		"nec",
		"net",
		"netbank",
		"netflix",
		"network",
		"neustar",
		"new",
		"news",
		"next",
		"nextdirect",
		"nexus",
		"nf",
		"nfl",
		"ng",
		"ngo",
		"nhk",
		"ni",
		"nico",
		"nike",
		"nikon",
		"ninja",
		"nissan",
		"nissay",
		"nl",
		"no",
		"nokia",
		"norton",
		"now",
		"nowruz",
		"nowtv",
		"np",
		"nr",
		"nra",
		"nrw",
		"ntt",
		"nu",
		"nyc",
		"nz",
		"obi",
		"observer",
		"office",
		"okinawa",
		"olayan",
		"olayangroup",
		"ollo",
		"om",
		"omega",
		"one",
		"ong",
		"onl",
		"online",
		"ooo",
		"open",
		"oracle",
		"orange",
		"org",
		"organic",
		"origins",
		"osaka",
		"otsuka",
		"ott",
		"ovh",
		"pa",
		"page",
		"panasonic",
		"paris",
		"pars",
		"partners",
		"parts",
		"party",
		"pay",
		"pccw",
		"pe",
		"pet",
		"pf",
		"pfizer",
		"pg",
		"ph",
		"pharmacy",
		"phd",
		"philips",
		"phone",
		"photo",
		"photography",
		"photos",
		"physio",
		"pics",
		"pictet",
		"pictures",
		"pid",
		"pin",
		"ping",
		"pink",
		"pioneer",
		"pizza",
		"pk",
		"pl",
		"place",
		"play",
		"playstation",
		"plumbing",
		"plus",
		"pm",
		"pn",
		"pnc",
		"pohl",
		"poker",
		"politie",
		"porn",
		"post",
		"pr",
		"pramerica",
		"praxi",
		"press",
		"prime",
		"pro",
		"prod",
		"productions",
		"prof",
		"progressive",
		"promo",
		"properties",
		"property",
		"protection",
		"pru",
		"prudential",
		"ps",
		"pt",
		"pub",
		"pw",
		"pwc",
		"py",
		"qa",
		"qpon",
		"quebec",
		"quest",
		"racing",
		"radio",
		"re",
		"read",
		"realestate",
		"realtor",
		"realty",
		"recipes",
		"red",
		"redstone",
		"redumbrella",
		"rehab",
		"reise",
		"reisen",
		"reit",
		"reliance",
		"ren",
		"rent",
		"rentals",
		"repair",
		"report",
		"republican",
		"rest",
		"restaurant",
		"review",
		"reviews",
		"rexroth",
		"rich",
		"richardli",
		"ricoh",
		"ril",
		"rio",
		"rip",
		"ro",
		"rocks",
		"rodeo",
		"rogers",
		"room",
		"rs",
		"rsvp",
		"ru",
		"rugby",
		"ruhr",
		"run",
		"rw",
		"rwe",
		"ryukyu",
		"sa",
		"saarland",
		"safe",
		"safety",
		"sakura",
		"sale",
		"salon",
		"samsclub",
		"samsung",
		"sandvik",
		"sandvikcoromant",
		"sanofi",
		"sap",
		"sarl",
		"sas",
		"save",
		"saxo",
		"sb",
		"sbi",
		"sbs",
		"sc",
		"scb",
		"schaeffler",
		"schmidt",
		"scholarships",
		"school",
		"schule",
		"schwarz",
		"science",
		"scot",
		"sd",
		"se",
		"search",
		"seat",
		"secure",
		"security",
		"seek",
		"select",
		"sener",
		"services",
		"seven",
		"sew",
		"sex",
		"sexy",
		"sfr",
		"sg",
		"sh",
		"shangrila",
		"sharp",
		"shaw",
		"shell",
		"shia",
		"shiksha",
		"shoes",
		"shop",
		"shopping",
		"shouji",
		"show",
		"si",
		"silk",
		"sina",
		"singles",
		"site",
		"sj",
		"sk",
		"ski",
		"skin",
		"sky",
		"skype",
		"sl",
		"sling",
		"sm",
		"smart",
		"smile",
		"sn",
		"sncf",
		"so",
		"soccer",
		"social",
		"softbank",
		"software",
		"sohu",
		"solar",
		"solutions",
		"song",
		"sony",
		"soy",
		"spa",
		"space",
		"sport",
		"spot",
		"sr",
		"srl",
		"ss",
		"st",
		"stada",
		"staples",
		"star",
		"statebank",
		"statefarm",
		"stc",
		"stcgroup",
		"stockholm",
		"storage",
		"store",
		"stream",
		"studio",
		"study",
		"style",
		"su",
		"sucks",
		"supplies",
		"supply",
		"support",
		"surf",
		"surgery",
		"suzuki",
		"sv",
		"swatch",
		"swiss",
		"sx",
		"sy",
		"sydney",
		"systems",
		"sz",
		"tab",
		"taipei",
		"talk",
		"taobao",
		"target",
		"tatamotors",
		"tatar",
		"tattoo",
		"tax",
		"taxi",
		"tc",
		"tci",
		"td",
		"tdk",
		"team",
		"tech",
		"technology",
		"tel",
		"temasek",
		"tennis",
		"teva",
		"tf",
		"tg",
		"th",
		"thd",
		"theater",
		"theatre",
		"tiaa",
		"tickets",
		"tienda",
		"tips",
		"tires",
		"tirol",
		"tj",
		"tjmaxx",
		"tjx",
		"tk",
		"tkmaxx",
		"tl",
		"tm",
		"tmall",
		"tn",
		"to",
		"today",
		"tokyo",
		"tools",
		"top",
		"toray",
		"toshiba",
		"total",
		"tours",
		"town",
		"toyota",
		"toys",
		"tr",
		"trade",
		"trading",
		"training",
		"travel",
		"travelers",
		"travelersinsurance",
		"trust",
		"trv",
		"tt",
		"tube",
		"tui",
		"tunes",
		"tushu",
		"tv",
		"tvs",
		"tw",
		"tz",
		"ua",
		"ubank",
		"ubs",
		"ug",
		"uk",
		"unicom",
		"university",
		"uno",
		"uol",
		"ups",
		"us",
		"uy",
		"uz",
		"va",
		"vacations",
		"vana",
		"vanguard",
		"vc",
		"ve",
		"vegas",
		"ventures",
		"verisign",
		"vermögensberater",
		"vermögensberatung",
		"versicherung",
		"vet",
		"vg",
		"vi",
		"viajes",
		"video",
		"vig",
		"viking",
		"villas",
		"vin",
		"vip",
		"virgin",
		"visa",
		"vision",
		"viva",
		"vivo",
		"vlaanderen",
		"vn",
		"vodka",
		"volvo",
		"vote",
		"voting",
		"voto",
		"voyage",
		"vu",
		"wales",
		"walmart",
		"walter",
		"wang",
		"wanggou",
		"watch",
		"watches",
		"weather",
		"weatherchannel",
		"webcam",
		"weber",
		"website",
		"wed",
		"wedding",
		"weibo",
		"weir",
		"wf",
		"whoswho",
		"wien",
		"wiki",
		"williamhill",
		"win",
		"windows",
		"wine",
		"winners",
		"wme",
		"wolterskluwer",
		"woodside",
		"work",
		"works",
		"world",
		"wow",
		"ws",
		"wtc",
		"wtf",
		"xbox",
		"xerox",
		"xihuan",
		"xin",
		"xxx",
		"xyz",
		"yachts",
		"yahoo",
		"yamaxun",
		"yandex",
		"ye",
		"yodobashi",
		"yoga",
		"yokohama",
		"you",
		"youtube",
		"yt",
		"yun",
		"za",
		"zappos",
		"zara",
		"zero",
		"zip",
		"zm",
		"zone",
		"zuerich",
		"zw",
		"ελ",
		"ευ",
		"бг",
		"бел",
		"дети",
		"ею",
		"католик",
		"ком",
		"мкд",
		"мон",
		"москва",
		"онлайн",
		"орг",
		"рус",
		"рф",
		"сайт",
		"срб",
		"укр",
		"қаз",
		"հայ",
		"ישראל",
		"קום",
		"ابوظبي",
		"ارامكو",
		"الاردن",
		"البحرين",
		"الجزائر",
		"السعودية",
		"العليان",
		"المغرب",
		"امارات",
		"ایران",
		"بارت",
		"بازار",
		"بيتك",
		"بھارت",
		"تونس",
		"سودان",
		"سورية",
		"شبكة",
		"عراق",
		"عرب",
		"عمان",
		"فلسطين",
		"قطر",
		"كاثوليك",
		"كوم",
		"مصر",
		"مليسيا",
		"موريتانيا",
		"موقع",
		"همراه",
		"پاکستان",
		"ڀارت",
		"कॉम",
		"नेट",
		"भारत",
		"भारतम्",
		"भारोत",
		"संगठन",
		"বাংলা",
		"ভারত",
		"ভাৰত",
		"ਭਾਰਤ",
		"ભારત",
		"ଭାରତ",
		"இந்தியா",
		"இலங்கை",
		"சிங்கப்பூர்",
		"భారత్",
		"ಭಾರತ",
		"ഭാരതം",
		"ලංකා",
		"คอม",
		"ไทย",
		"ລາວ",
		"გე",
		"みんな",
		"アマゾン",
		"クラウド",
		"グーグル",
		"コム",
		"ストア",
		"セール",
		"ファッション",
		"ポイント",
		"世界",
		"中信",
		"中国",
		"中國",
		"中文网",
		"亚马逊",
		"企业",
		"佛山",
		"信息",
		"健康",
		"八卦",
		"公司",
		"公益",
		"台湾",
		"台灣",
		"商城",
		"商店",
		"商标",
		"嘉里",
		"嘉里大酒店",
		"在线",
		"大拿",
		"天主教",
		"娱乐",
		"家電",
		"广东",
		"微博",
		"慈善",
		"我爱你",
		"手机",
		"招聘",
		"政务",
		"政府",
		"新加坡",
		"新闻",
		"时尚",
		"書籍",
		"机构",
		"淡马锡",
		"游戏",
		"澳門",
		"点看",
		"移动",
		"组织机构",
		"网址",
		"网店",
		"网站",
		"网络",
		"联通",
		"谷歌",
		"购物",
		"通販",
		"集团",
		"電訊盈科",
		"飞利浦",
		"食品",
		"餐厅",
		"香格里拉",
		"香港",
		"닷넷",
		"닷컴",
		"삼성",
		"한국"
	];

	var util$1 = {};

	Object.defineProperty(util$1, "__esModule", {
	  value: true
	});
	util$1.TAG_REGEX = util$1.TRAILING_PUNCTUATION_REGEX = util$1.URL_REGEX = util$1.MENTION_REGEX = void 0;
	util$1.MENTION_REGEX = /(^|\s|\()(@)([a-zA-Z0-9.-]+)(\b)/g;
	util$1.URL_REGEX = /(^|\s|\()((https?:\/\/[\S]+)|((?<domain>[a-z][a-z0-9]*(\.[a-z0-9]+)+)[\S]*))/gim;
	util$1.TRAILING_PUNCTUATION_REGEX = /\p{P}+$/gu;
	/**
	 * `\ufe0f` emoji modifier
	 * `\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2` zero-width spaces (likely incomplete)
	 */
	util$1.TAG_REGEX = /(^|\s)[#＃]((?!\ufe0f)[^\s\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]*[^\d\s\p{P}\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]+[^\s\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]*)?/gu;

	var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
	  return mod && mod.__esModule ? mod : {
	    "default": mod
	  };
	};
	Object.defineProperty(detection, "__esModule", {
	  value: true
	});
	detection.detectFacets = void 0;
	const tlds_1 = __importDefault(require$$0);
	const util_1$1 = util$1;
	function detectFacets(text) {
	  let match;
	  const facets = [];
	  {
	    // mentions
	    const re = util_1$1.MENTION_REGEX;
	    while (match = re.exec(text.utf16)) {
	      if (!isValidDomain(match[3]) && !match[3].endsWith('.test')) {
	        continue; // probably not a handle
	      }
	      const start = text.utf16.indexOf(match[3], match.index) - 1;
	      facets.push({
	        $type: 'app.bsky.richtext.facet',
	        index: {
	          byteStart: text.utf16IndexToUtf8Index(start),
	          byteEnd: text.utf16IndexToUtf8Index(start + match[3].length + 1)
	        },
	        features: [{
	          $type: 'app.bsky.richtext.facet#mention',
	          did: match[3] // must be resolved afterwards
	        }]
	      });
	    }
	  }
	  {
	    // links
	    const re = util_1$1.URL_REGEX;
	    while (match = re.exec(text.utf16)) {
	      let uri = match[2];
	      if (!uri.startsWith('http')) {
	        const domain = match.groups?.domain;
	        if (!domain || !isValidDomain(domain)) {
	          continue;
	        }
	        uri = `https://${uri}`;
	      }
	      const start = text.utf16.indexOf(match[2], match.index);
	      const index = {
	        start,
	        end: start + match[2].length
	      };
	      // strip ending puncuation
	      if (/[.,;:!?]$/.test(uri)) {
	        uri = uri.slice(0, -1);
	        index.end--;
	      }
	      if (/[)]$/.test(uri) && !uri.includes('(')) {
	        uri = uri.slice(0, -1);
	        index.end--;
	      }
	      facets.push({
	        index: {
	          byteStart: text.utf16IndexToUtf8Index(index.start),
	          byteEnd: text.utf16IndexToUtf8Index(index.end)
	        },
	        features: [{
	          $type: 'app.bsky.richtext.facet#link',
	          uri
	        }]
	      });
	    }
	  }
	  {
	    const re = util_1$1.TAG_REGEX;
	    while (match = re.exec(text.utf16)) {
	      let [, leading, tag] = match;
	      if (!tag) continue;
	      // strip ending punctuation and any spaces
	      tag = tag.trim().replace(util_1$1.TRAILING_PUNCTUATION_REGEX, '');
	      if (tag.length === 0 || tag.length > 64) continue;
	      const index = match.index + leading.length;
	      facets.push({
	        index: {
	          byteStart: text.utf16IndexToUtf8Index(index),
	          byteEnd: text.utf16IndexToUtf8Index(index + 1 + tag.length)
	        },
	        features: [{
	          $type: 'app.bsky.richtext.facet#tag',
	          tag: tag
	        }]
	      });
	    }
	  }
	  return facets.length > 0 ? facets : undefined;
	}
	detection.detectFacets = detectFacets;
	function isValidDomain(str) {
	  return !!tlds_1.default.find(tld => {
	    const i = str.lastIndexOf(tld);
	    if (i === -1) {
	      return false;
	    }
	    return str.charAt(i - 1) === '.' && i === str.length - tld.length;
	  });
	}

	/*
	= Rich Text Manipulation

	When we sanitize rich text, we have to update the entity indices as the
	text is modified. This can be modeled as inserts() and deletes() of the
	rich text string. The possible scenarios are outlined below, along with
	their expected behaviors.

	NOTE: Slices are start inclusive, end exclusive

	== richTextInsert()

	Target string:

	   0 1 2 3 4 5 6 7 8 910   // string indices
	   h e l l o   w o r l d   // string value
	       ^-------^           // target slice {start: 2, end: 7}

	Scenarios:

	A: ^                       // insert "test" at 0
	B:        ^                // insert "test" at 4
	C:                 ^       // insert "test" at 8

	A = before           -> move both by num added
	B = inner            -> move end by num added
	C = after            -> noop

	Results:

	A: 0 1 2 3 4 5 6 7 8 910   // string indices
	   t e s t h e l l o   w   // string value
	               ^-------^   // target slice {start: 6, end: 11}

	B: 0 1 2 3 4 5 6 7 8 910   // string indices
	   h e l l t e s t o   w   // string value
	       ^---------------^   // target slice {start: 2, end: 11}

	C: 0 1 2 3 4 5 6 7 8 910   // string indices
	   h e l l o   w o t e s   // string value
	       ^-------^           // target slice {start: 2, end: 7}

	== richTextDelete()

	Target string:

	   0 1 2 3 4 5 6 7 8 910   // string indices
	   h e l l o   w o r l d   // string value
	       ^-------^           // target slice {start: 2, end: 7}

	Scenarios:

	A: ^---------------^       // remove slice {start: 0, end: 9}
	B:               ^-----^   // remove slice {start: 7, end: 11}
	C:         ^-----------^   // remove slice {start: 4, end: 11}
	D:       ^-^               // remove slice {start: 3, end: 5}
	E:   ^-----^               // remove slice {start: 1, end: 5}
	F: ^-^                     // remove slice {start: 0, end: 2}

	A = entirely outer   -> delete slice
	B = entirely after   -> noop
	C = partially after  -> move end to remove-start
	D = entirely inner   -> move end by num removed
	E = partially before -> move start to remove-start index, move end by num removed
	F = entirely before  -> move both by num removed

	Results:

	A: 0 1 2 3 4 5 6 7 8 910   // string indices
	   l d                     // string value
	                           // target slice (deleted)

	B: 0 1 2 3 4 5 6 7 8 910   // string indices
	   h e l l o   w           // string value
	       ^-------^           // target slice {start: 2, end: 7}

	C: 0 1 2 3 4 5 6 7 8 910   // string indices
	   h e l l                 // string value
	       ^-^                 // target slice {start: 2, end: 4}

	D: 0 1 2 3 4 5 6 7 8 910   // string indices
	   h e l   w o r l d       // string value
	       ^---^               // target slice {start: 2, end: 5}

	E: 0 1 2 3 4 5 6 7 8 910   // string indices
	   h   w o r l d           // string value
	     ^-^                   // target slice {start: 1, end: 3}

	F: 0 1 2 3 4 5 6 7 8 910   // string indices
	   l l o   w o r l d       // string value
	   ^-------^               // target slice {start: 0, end: 5}
	 */
	Object.defineProperty(richText, "__esModule", {
	  value: true
	});
	richText.RichText = richText.RichTextSegment = void 0;
	const client_1$4 = client$1;
	const unicode_1 = unicode;
	const sanitization_1 = sanitization;
	const detection_1 = detection;
	class RichTextSegment {
	  constructor(text, facet) {
	    Object.defineProperty(this, "text", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: text
	    });
	    Object.defineProperty(this, "facet", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: facet
	    });
	  }
	  get link() {
	    const link = this.facet?.features.find(client_1$4.AppBskyRichtextFacet.isLink);
	    if (client_1$4.AppBskyRichtextFacet.isLink(link)) {
	      return link;
	    }
	    return undefined;
	  }
	  isLink() {
	    return !!this.link;
	  }
	  get mention() {
	    const mention = this.facet?.features.find(client_1$4.AppBskyRichtextFacet.isMention);
	    if (client_1$4.AppBskyRichtextFacet.isMention(mention)) {
	      return mention;
	    }
	    return undefined;
	  }
	  isMention() {
	    return !!this.mention;
	  }
	  get tag() {
	    const tag = this.facet?.features.find(client_1$4.AppBskyRichtextFacet.isTag);
	    if (client_1$4.AppBskyRichtextFacet.isTag(tag)) {
	      return tag;
	    }
	    return undefined;
	  }
	  isTag() {
	    return !!this.tag;
	  }
	}
	richText.RichTextSegment = RichTextSegment;
	class RichText {
	  constructor(props, opts) {
	    Object.defineProperty(this, "unicodeText", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, "facets", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: void 0
	    });
	    this.unicodeText = new unicode_1.UnicodeString(props.text);
	    this.facets = props.facets;
	    if (!this.facets?.length && props.entities?.length) {
	      this.facets = entitiesToFacets(this.unicodeText, props.entities);
	    }
	    if (this.facets) {
	      this.facets.sort(facetSort);
	    }
	    if (opts?.cleanNewlines) {
	      (0, sanitization_1.sanitizeRichText)(this, {
	        cleanNewlines: true
	      }).copyInto(this);
	    }
	  }
	  get text() {
	    return this.unicodeText.toString();
	  }
	  get length() {
	    return this.unicodeText.length;
	  }
	  get graphemeLength() {
	    return this.unicodeText.graphemeLength;
	  }
	  clone() {
	    return new RichText({
	      text: this.unicodeText.utf16,
	      facets: cloneDeep(this.facets)
	    });
	  }
	  copyInto(target) {
	    target.unicodeText = this.unicodeText;
	    target.facets = cloneDeep(this.facets);
	  }
	  *segments() {
	    const facets = this.facets || [];
	    if (!facets.length) {
	      yield new RichTextSegment(this.unicodeText.utf16);
	      return;
	    }
	    let textCursor = 0;
	    let facetCursor = 0;
	    do {
	      const currFacet = facets[facetCursor];
	      if (textCursor < currFacet.index.byteStart) {
	        yield new RichTextSegment(this.unicodeText.slice(textCursor, currFacet.index.byteStart));
	      } else if (textCursor > currFacet.index.byteStart) {
	        facetCursor++;
	        continue;
	      }
	      if (currFacet.index.byteStart < currFacet.index.byteEnd) {
	        const subtext = this.unicodeText.slice(currFacet.index.byteStart, currFacet.index.byteEnd);
	        if (!subtext.trim()) {
	          // dont empty string entities
	          yield new RichTextSegment(subtext);
	        } else {
	          yield new RichTextSegment(subtext, currFacet);
	        }
	      }
	      textCursor = currFacet.index.byteEnd;
	      facetCursor++;
	    } while (facetCursor < facets.length);
	    if (textCursor < this.unicodeText.length) {
	      yield new RichTextSegment(this.unicodeText.slice(textCursor, this.unicodeText.length));
	    }
	  }
	  insert(insertIndex, insertText) {
	    this.unicodeText = new unicode_1.UnicodeString(this.unicodeText.slice(0, insertIndex) + insertText + this.unicodeText.slice(insertIndex));
	    if (!this.facets?.length) {
	      return this;
	    }
	    const numCharsAdded = insertText.length;
	    for (const ent of this.facets) {
	      // see comment at top of file for labels of each scenario
	      // scenario A (before)
	      if (insertIndex <= ent.index.byteStart) {
	        // move both by num added
	        ent.index.byteStart += numCharsAdded;
	        ent.index.byteEnd += numCharsAdded;
	      }
	      // scenario B (inner)
	      else if (insertIndex >= ent.index.byteStart && insertIndex < ent.index.byteEnd) {
	        // move end by num added
	        ent.index.byteEnd += numCharsAdded;
	      }
	      // scenario C (after)
	      // noop
	    }
	    return this;
	  }
	  delete(removeStartIndex, removeEndIndex) {
	    this.unicodeText = new unicode_1.UnicodeString(this.unicodeText.slice(0, removeStartIndex) + this.unicodeText.slice(removeEndIndex));
	    if (!this.facets?.length) {
	      return this;
	    }
	    const numCharsRemoved = removeEndIndex - removeStartIndex;
	    for (const ent of this.facets) {
	      // see comment at top of file for labels of each scenario
	      // scenario A (entirely outer)
	      if (removeStartIndex <= ent.index.byteStart && removeEndIndex >= ent.index.byteEnd) {
	        // delete slice (will get removed in final pass)
	        ent.index.byteStart = 0;
	        ent.index.byteEnd = 0;
	      }
	      // scenario B (entirely after)
	      else if (removeStartIndex > ent.index.byteEnd) ;
	      // scenario C (partially after)
	      else if (removeStartIndex > ent.index.byteStart && removeStartIndex <= ent.index.byteEnd && removeEndIndex > ent.index.byteEnd) {
	        // move end to remove start
	        ent.index.byteEnd = removeStartIndex;
	      }
	      // scenario D (entirely inner)
	      else if (removeStartIndex >= ent.index.byteStart && removeEndIndex <= ent.index.byteEnd) {
	        // move end by num removed
	        ent.index.byteEnd -= numCharsRemoved;
	      }
	      // scenario E (partially before)
	      else if (removeStartIndex < ent.index.byteStart && removeEndIndex >= ent.index.byteStart && removeEndIndex <= ent.index.byteEnd) {
	        // move start to remove-start index, move end by num removed
	        ent.index.byteStart = removeStartIndex;
	        ent.index.byteEnd -= numCharsRemoved;
	      }
	      // scenario F (entirely before)
	      else if (removeEndIndex < ent.index.byteStart) {
	        // move both by num removed
	        ent.index.byteStart -= numCharsRemoved;
	        ent.index.byteEnd -= numCharsRemoved;
	      }
	    }
	    // filter out any facets that were made irrelevant
	    this.facets = this.facets.filter(ent => ent.index.byteStart < ent.index.byteEnd);
	    return this;
	  }
	  /**
	   * Detects facets such as links and mentions
	   * Note: Overwrites the existing facets with auto-detected facets
	   */
	  async detectFacets(agent) {
	    this.facets = (0, detection_1.detectFacets)(this.unicodeText);
	    if (this.facets) {
	      for (const facet of this.facets) {
	        for (const feature of facet.features) {
	          if (client_1$4.AppBskyRichtextFacet.isMention(feature)) {
	            const did = await agent.resolveHandle({
	              handle: feature.did
	            }).catch(_ => undefined).then(res => res?.data.did);
	            feature.did = did || '';
	          }
	        }
	      }
	      this.facets.sort(facetSort);
	    }
	  }
	  /**
	   * Detects facets such as links and mentions but does not resolve them
	   * Will produce invalid facets! For instance, mentions will not have their DIDs set.
	   * Note: Overwrites the existing facets with auto-detected facets
	   */
	  detectFacetsWithoutResolution() {
	    this.facets = (0, detection_1.detectFacets)(this.unicodeText);
	    if (this.facets) {
	      this.facets.sort(facetSort);
	    }
	  }
	}
	richText.RichText = RichText;
	const facetSort = (a, b) => a.index.byteStart - b.index.byteStart;
	function entitiesToFacets(text, entities) {
	  const facets = [];
	  for (const ent of entities) {
	    if (ent.type === 'link') {
	      facets.push({
	        $type: 'app.bsky.richtext.facet',
	        index: {
	          byteStart: text.utf16IndexToUtf8Index(ent.index.start),
	          byteEnd: text.utf16IndexToUtf8Index(ent.index.end)
	        },
	        features: [{
	          $type: 'app.bsky.richtext.facet#link',
	          uri: ent.value
	        }]
	      });
	    } else if (ent.type === 'mention') {
	      facets.push({
	        $type: 'app.bsky.richtext.facet',
	        index: {
	          byteStart: text.utf16IndexToUtf8Index(ent.index.start),
	          byteEnd: text.utf16IndexToUtf8Index(ent.index.end)
	        },
	        features: [{
	          $type: 'app.bsky.richtext.facet#mention',
	          did: ent.value
	        }]
	      });
	    }
	  }
	  return facets;
	}
	function cloneDeep(v) {
	  if (typeof v === 'undefined') {
	    return v;
	  }
	  return JSON.parse(JSON.stringify(v));
	}

	var moderation = {};

	var account = {};

	var decision = {};

	var types = {};

	Object.defineProperty(types, "__esModule", {
	  value: true
	});
	types.NOOP_BEHAVIOR = types.HIDE_BEHAVIOR = types.MUTEWORD_BEHAVIOR = types.MUTE_BEHAVIOR = types.BLOCK_BEHAVIOR = types.CUSTOM_LABEL_VALUE_RE = void 0;
	// syntax
	// =
	types.CUSTOM_LABEL_VALUE_RE = /^[a-z-]+$/;
	types.BLOCK_BEHAVIOR = {
	  profileList: 'blur',
	  profileView: 'alert',
	  avatar: 'blur',
	  banner: 'blur',
	  contentList: 'blur',
	  contentView: 'blur'
	};
	types.MUTE_BEHAVIOR = {
	  profileList: 'inform',
	  profileView: 'alert',
	  contentList: 'blur',
	  contentView: 'inform'
	};
	types.MUTEWORD_BEHAVIOR = {
	  contentList: 'blur',
	  contentView: 'blur'
	};
	types.HIDE_BEHAVIOR = {
	  contentList: 'blur',
	  contentView: 'blur'
	};
	types.NOOP_BEHAVIOR = {};

	var ui = {};

	Object.defineProperty(ui, "__esModule", {
	  value: true
	});
	ui.ModerationUI = void 0;
	class ModerationUI {
	  constructor() {
	    Object.defineProperty(this, "noOverride", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: false
	    });
	    Object.defineProperty(this, "filters", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: []
	    });
	    Object.defineProperty(this, "blurs", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: []
	    });
	    Object.defineProperty(this, "alerts", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: []
	    });
	    Object.defineProperty(this, "informs", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: []
	    });
	  }
	  get filter() {
	    return this.filters.length !== 0;
	  }
	  get blur() {
	    return this.blurs.length !== 0;
	  }
	  get alert() {
	    return this.alerts.length !== 0;
	  }
	  get inform() {
	    return this.informs.length !== 0;
	  }
	}
	ui.ModerationUI = ModerationUI;

	var labels = {};

	Object.defineProperty(labels, "__esModule", {
	  value: true
	});
	labels.LABELS = labels.DEFAULT_LABEL_SETTINGS = void 0;
	labels.DEFAULT_LABEL_SETTINGS = {
	  porn: 'hide',
	  sexual: 'warn',
	  nudity: 'ignore',
	  'graphic-media': 'warn'
	};
	labels.LABELS = {
	  '!hide': {
	    identifier: '!hide',
	    configurable: false,
	    defaultSetting: 'hide',
	    flags: ['no-override', 'no-self'],
	    severity: 'alert',
	    blurs: 'content',
	    behaviors: {
	      account: {
	        profileList: 'blur',
	        profileView: 'blur',
	        avatar: 'blur',
	        banner: 'blur',
	        displayName: 'blur',
	        contentList: 'blur',
	        contentView: 'blur'
	      },
	      profile: {
	        avatar: 'blur',
	        banner: 'blur',
	        displayName: 'blur'
	      },
	      content: {
	        contentList: 'blur',
	        contentView: 'blur'
	      }
	    },
	    locales: []
	  },
	  '!warn': {
	    identifier: '!warn',
	    configurable: false,
	    defaultSetting: 'warn',
	    flags: ['no-self'],
	    severity: 'none',
	    blurs: 'content',
	    behaviors: {
	      account: {
	        profileList: 'blur',
	        profileView: 'blur',
	        avatar: 'blur',
	        banner: 'blur',
	        contentList: 'blur',
	        contentView: 'blur'
	      },
	      profile: {
	        avatar: 'blur',
	        banner: 'blur',
	        displayName: 'blur'
	      },
	      content: {
	        contentList: 'blur',
	        contentView: 'blur'
	      }
	    },
	    locales: []
	  },
	  '!no-unauthenticated': {
	    identifier: '!no-unauthenticated',
	    configurable: false,
	    defaultSetting: 'hide',
	    flags: ['no-override', 'unauthed'],
	    severity: 'none',
	    blurs: 'content',
	    behaviors: {
	      account: {
	        profileList: 'blur',
	        profileView: 'blur',
	        avatar: 'blur',
	        banner: 'blur',
	        displayName: 'blur',
	        contentList: 'blur',
	        contentView: 'blur'
	      },
	      profile: {
	        avatar: 'blur',
	        banner: 'blur',
	        displayName: 'blur'
	      },
	      content: {
	        contentList: 'blur',
	        contentView: 'blur'
	      }
	    },
	    locales: []
	  },
	  porn: {
	    identifier: 'porn',
	    configurable: true,
	    defaultSetting: 'hide',
	    flags: ['adult'],
	    severity: 'none',
	    blurs: 'media',
	    behaviors: {
	      account: {
	        avatar: 'blur',
	        banner: 'blur'
	      },
	      profile: {
	        avatar: 'blur',
	        banner: 'blur'
	      },
	      content: {
	        contentMedia: 'blur'
	      }
	    },
	    locales: []
	  },
	  sexual: {
	    identifier: 'sexual',
	    configurable: true,
	    defaultSetting: 'warn',
	    flags: ['adult'],
	    severity: 'none',
	    blurs: 'media',
	    behaviors: {
	      account: {
	        avatar: 'blur',
	        banner: 'blur'
	      },
	      profile: {
	        avatar: 'blur',
	        banner: 'blur'
	      },
	      content: {
	        contentMedia: 'blur'
	      }
	    },
	    locales: []
	  },
	  nudity: {
	    identifier: 'nudity',
	    configurable: true,
	    defaultSetting: 'ignore',
	    flags: [],
	    severity: 'none',
	    blurs: 'media',
	    behaviors: {
	      account: {
	        avatar: 'blur',
	        banner: 'blur'
	      },
	      profile: {
	        avatar: 'blur',
	        banner: 'blur'
	      },
	      content: {
	        contentMedia: 'blur'
	      }
	    },
	    locales: []
	  },
	  'graphic-media': {
	    identifier: 'graphic-media',
	    flags: ['adult'],
	    configurable: true,
	    defaultSetting: 'warn',
	    severity: 'none',
	    blurs: 'media',
	    behaviors: {
	      account: {
	        avatar: 'blur',
	        banner: 'blur'
	      },
	      profile: {
	        avatar: 'blur',
	        banner: 'blur'
	      },
	      content: {
	        contentMedia: 'blur'
	      }
	    },
	    locales: []
	  }
	};

	Object.defineProperty(decision, "__esModule", {
	  value: true
	});
	decision.ModerationDecision = void 0;
	const types_1 = types;
	const ui_1 = ui;
	const labels_1$1 = labels;
	var ModerationBehaviorSeverity;
	(function (ModerationBehaviorSeverity) {
	  ModerationBehaviorSeverity[ModerationBehaviorSeverity["High"] = 0] = "High";
	  ModerationBehaviorSeverity[ModerationBehaviorSeverity["Medium"] = 1] = "Medium";
	  ModerationBehaviorSeverity[ModerationBehaviorSeverity["Low"] = 2] = "Low";
	})(ModerationBehaviorSeverity || (ModerationBehaviorSeverity = {}));
	class ModerationDecision {
	  constructor() {
	    Object.defineProperty(this, "did", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: ''
	    });
	    Object.defineProperty(this, "isMe", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: false
	    });
	    Object.defineProperty(this, "causes", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: []
	    });
	  }
	  static merge(...decisions) {
	    const decisionsFiltered = decisions.filter(v => !!v);
	    const decision = new ModerationDecision();
	    if (decisionsFiltered[0]) {
	      decision.did = decisionsFiltered[0].did;
	      decision.isMe = decisionsFiltered[0].isMe;
	    }
	    decision.causes = decisionsFiltered.flatMap(d => d.causes);
	    return decision;
	  }
	  downgrade() {
	    for (const cause of this.causes) {
	      cause.downgraded = true;
	    }
	    return this;
	  }
	  get blocked() {
	    return !!this.blockCause;
	  }
	  get muted() {
	    return !!this.muteCause;
	  }
	  get blockCause() {
	    return this.causes.find(cause => cause.type === 'blocking' || cause.type === 'blocked-by' || cause.type === 'block-other');
	  }
	  get muteCause() {
	    return this.causes.find(cause => cause.type === 'muted');
	  }
	  get labelCauses() {
	    return this.causes.filter(cause => cause.type === 'label');
	  }
	  ui(context) {
	    const ui = new ui_1.ModerationUI();
	    if (this.isMe) {
	      return ui;
	    }
	    for (const cause of this.causes) {
	      if (cause.type === 'blocking' || cause.type === 'blocked-by' || cause.type === 'block-other') {
	        if (context === 'profileList' || context === 'contentList') {
	          ui.filters.push(cause);
	        }
	        if (!cause.downgraded) {
	          if (types_1.BLOCK_BEHAVIOR[context] === 'blur') {
	            ui.noOverride = true;
	            ui.blurs.push(cause);
	          } else if (types_1.BLOCK_BEHAVIOR[context] === 'alert') {
	            ui.alerts.push(cause);
	          } else if (types_1.BLOCK_BEHAVIOR[context] === 'inform') {
	            ui.informs.push(cause);
	          }
	        }
	      } else if (cause.type === 'muted') {
	        if (context === 'profileList' || context === 'contentList') {
	          ui.filters.push(cause);
	        }
	        if (!cause.downgraded) {
	          if (types_1.MUTE_BEHAVIOR[context] === 'blur') {
	            ui.blurs.push(cause);
	          } else if (types_1.MUTE_BEHAVIOR[context] === 'alert') {
	            ui.alerts.push(cause);
	          } else if (types_1.MUTE_BEHAVIOR[context] === 'inform') {
	            ui.informs.push(cause);
	          }
	        }
	      } else if (cause.type === 'mute-word') {
	        if (context === 'contentList') {
	          ui.filters.push(cause);
	        }
	        if (!cause.downgraded) {
	          if (types_1.MUTEWORD_BEHAVIOR[context] === 'blur') {
	            ui.blurs.push(cause);
	          } else if (types_1.MUTEWORD_BEHAVIOR[context] === 'alert') {
	            ui.alerts.push(cause);
	          } else if (types_1.MUTEWORD_BEHAVIOR[context] === 'inform') {
	            ui.informs.push(cause);
	          }
	        }
	      } else if (cause.type === 'hidden') {
	        if (context === 'profileList' || context === 'contentList') {
	          ui.filters.push(cause);
	        }
	        if (!cause.downgraded) {
	          if (types_1.HIDE_BEHAVIOR[context] === 'blur') {
	            ui.blurs.push(cause);
	          } else if (types_1.HIDE_BEHAVIOR[context] === 'alert') {
	            ui.alerts.push(cause);
	          } else if (types_1.HIDE_BEHAVIOR[context] === 'inform') {
	            ui.informs.push(cause);
	          }
	        }
	      } else if (cause.type === 'label') {
	        if (context === 'profileList' && cause.target === 'account') {
	          if (cause.setting === 'hide') {
	            ui.filters.push(cause);
	          }
	        } else if (context === 'contentList' && (cause.target === 'account' || cause.target === 'content')) {
	          if (cause.setting === 'hide') {
	            ui.filters.push(cause);
	          }
	        }
	        if (!cause.downgraded) {
	          if (cause.behavior[context] === 'blur') {
	            ui.blurs.push(cause);
	            if (cause.noOverride) {
	              ui.noOverride = true;
	            }
	          } else if (cause.behavior[context] === 'alert') {
	            ui.alerts.push(cause);
	          } else if (cause.behavior[context] === 'inform') {
	            ui.informs.push(cause);
	          }
	        }
	      }
	    }
	    ui.filters.sort(sortByPriority);
	    ui.blurs.sort(sortByPriority);
	    return ui;
	  }
	  setDid(did) {
	    this.did = did;
	  }
	  setIsMe(isMe) {
	    this.isMe = isMe;
	  }
	  addHidden(hidden) {
	    if (hidden) {
	      this.causes.push({
	        type: 'hidden',
	        source: {
	          type: 'user'
	        },
	        priority: 6
	      });
	    }
	  }
	  addMutedWord(mutedWord) {
	    if (mutedWord) {
	      this.causes.push({
	        type: 'mute-word',
	        source: {
	          type: 'user'
	        },
	        priority: 6
	      });
	    }
	  }
	  addBlocking(blocking) {
	    if (blocking) {
	      this.causes.push({
	        type: 'blocking',
	        source: {
	          type: 'user'
	        },
	        priority: 3
	      });
	    }
	  }
	  addBlockingByList(blockingByList) {
	    if (blockingByList) {
	      this.causes.push({
	        type: 'blocking',
	        source: {
	          type: 'list',
	          list: blockingByList
	        },
	        priority: 3
	      });
	    }
	  }
	  addBlockedBy(blockedBy) {
	    if (blockedBy) {
	      this.causes.push({
	        type: 'blocked-by',
	        source: {
	          type: 'user'
	        },
	        priority: 4
	      });
	    }
	  }
	  addBlockOther(blockOther) {
	    if (blockOther) {
	      this.causes.push({
	        type: 'block-other',
	        source: {
	          type: 'user'
	        },
	        priority: 4
	      });
	    }
	  }
	  addLabel(target, label, opts) {
	    // look up the label definition
	    const labelDef = types_1.CUSTOM_LABEL_VALUE_RE.test(label.val) ? opts.labelDefs?.[label.src]?.find(def => def.identifier === label.val) || labels_1$1.LABELS[label.val] : labels_1$1.LABELS[label.val];
	    if (!labelDef) {
	      // ignore labels we don't understand
	      return;
	    }
	    // look up the label preference
	    const isSelf = label.src === this.did;
	    const labeler = isSelf ? undefined : opts.prefs.labelers.find(s => s.did === label.src);
	    if (!isSelf && !labeler) {
	      return; // skip labelers not configured by the user
	    }
	    if (isSelf && labelDef.flags.includes('no-self')) {
	      return; // skip self-labels that arent supported
	    }
	    // establish the label preference for interpretation
	    let labelPref = labelDef.defaultSetting || 'ignore';
	    if (!labelDef.configurable) {
	      labelPref = labelDef.defaultSetting || 'hide';
	    } else if (labelDef.flags.includes('adult') && !opts.prefs.adultContentEnabled) {
	      labelPref = 'hide';
	    } else if (labeler?.labels[labelDef.identifier]) {
	      labelPref = labeler?.labels[labelDef.identifier];
	    } else if (opts.prefs.labels[labelDef.identifier]) {
	      labelPref = opts.prefs.labels[labelDef.identifier];
	    }
	    // ignore labels the user has asked to ignore
	    if (labelPref === 'ignore') {
	      return;
	    }
	    // ignore 'unauthed' labels when the user is authed
	    if (labelDef.flags.includes('unauthed') && !!opts.userDid) {
	      return;
	    }
	    // establish the priority of the label
	    let priority;
	    const severity = measureModerationBehaviorSeverity(labelDef.behaviors[target]);
	    if (labelDef.flags.includes('no-override') || labelDef.flags.includes('adult') && !opts.prefs.adultContentEnabled) {
	      priority = 1;
	    } else if (labelPref === 'hide') {
	      priority = 2;
	    } else if (severity === ModerationBehaviorSeverity.High) {
	      // blurring profile view or content view
	      priority = 5;
	    } else if (severity === ModerationBehaviorSeverity.Medium) {
	      // blurring content list or content media
	      priority = 7;
	    } else {
	      // blurring avatar, adding alerts
	      priority = 8;
	    }
	    let noOverride = false;
	    if (labelDef.flags.includes('no-override')) {
	      noOverride = true;
	    } else if (labelDef.flags.includes('adult') && !opts.prefs.adultContentEnabled) {
	      noOverride = true;
	    }
	    this.causes.push({
	      type: 'label',
	      source: isSelf || !labeler ? {
	        type: 'user'
	      } : {
	        type: 'labeler',
	        did: labeler.did
	      },
	      label,
	      labelDef,
	      target,
	      setting: labelPref,
	      behavior: labelDef.behaviors[target] || types_1.NOOP_BEHAVIOR,
	      noOverride,
	      priority
	    });
	  }
	  addMuted(muted) {
	    if (muted) {
	      this.causes.push({
	        type: 'muted',
	        source: {
	          type: 'user'
	        },
	        priority: 6
	      });
	    }
	  }
	  addMutedByList(mutedByList) {
	    if (mutedByList) {
	      this.causes.push({
	        type: 'muted',
	        source: {
	          type: 'list',
	          list: mutedByList
	        },
	        priority: 6
	      });
	    }
	  }
	}
	decision.ModerationDecision = ModerationDecision;
	function measureModerationBehaviorSeverity(beh) {
	  if (!beh) {
	    return ModerationBehaviorSeverity.Low;
	  }
	  if (beh.profileView === 'blur' || beh.contentView === 'blur') {
	    return ModerationBehaviorSeverity.High;
	  }
	  if (beh.contentList === 'blur' || beh.contentMedia === 'blur') {
	    return ModerationBehaviorSeverity.Medium;
	  }
	  return ModerationBehaviorSeverity.Low;
	}
	function sortByPriority(a, b) {
	  return a.priority - b.priority;
	}

	Object.defineProperty(account, "__esModule", {
	  value: true
	});
	account.filterAccountLabels = account.decideAccount = void 0;
	const decision_1$5 = decision;
	function decideAccount(subject, opts) {
	  const acc = new decision_1$5.ModerationDecision();
	  acc.setDid(subject.did);
	  acc.setIsMe(subject.did === opts.userDid);
	  if (subject.viewer?.muted) {
	    if (subject.viewer?.mutedByList) {
	      acc.addMutedByList(subject.viewer?.mutedByList);
	    } else {
	      acc.addMuted(subject.viewer?.muted);
	    }
	  }
	  if (subject.viewer?.blocking) {
	    if (subject.viewer?.blockingByList) {
	      acc.addBlockingByList(subject.viewer?.blockingByList);
	    } else {
	      acc.addBlocking(subject.viewer?.blocking);
	    }
	  }
	  acc.addBlockedBy(subject.viewer?.blockedBy);
	  for (const label of filterAccountLabels(subject.labels)) {
	    acc.addLabel('account', label, opts);
	  }
	  return acc;
	}
	account.decideAccount = decideAccount;
	function filterAccountLabels(labels) {
	  if (!labels) {
	    return [];
	  }
	  return labels.filter(label => !label.uri.endsWith('/app.bsky.actor.profile/self') || label.val === '!no-unauthenticated');
	}
	account.filterAccountLabels = filterAccountLabels;

	var profile = {};

	Object.defineProperty(profile, "__esModule", {
	  value: true
	});
	profile.filterProfileLabels = profile.decideProfile = void 0;
	const decision_1$4 = decision;
	function decideProfile(subject, opts) {
	  const acc = new decision_1$4.ModerationDecision();
	  acc.setDid(subject.did);
	  acc.setIsMe(subject.did === opts.userDid);
	  for (const label of filterProfileLabels(subject.labels)) {
	    acc.addLabel('profile', label, opts);
	  }
	  return acc;
	}
	profile.decideProfile = decideProfile;
	function filterProfileLabels(labels) {
	  if (!labels) {
	    return [];
	  }
	  return labels.filter(label => label.uri.endsWith('/app.bsky.actor.profile/self'));
	}
	profile.filterProfileLabels = filterProfileLabels;

	var notification = {};

	Object.defineProperty(notification, "__esModule", {
	  value: true
	});
	notification.decideNotification = void 0;
	const decision_1$3 = decision;
	const account_1$3 = account;
	const profile_1$3 = profile;
	function decideNotification(subject, opts) {
	  const acc = new decision_1$3.ModerationDecision();
	  acc.setDid(subject.author.did);
	  acc.setIsMe(subject.author.did === opts.userDid);
	  if (subject.labels?.length) {
	    for (const label of subject.labels) {
	      acc.addLabel('content', label, opts);
	    }
	  }
	  return decision_1$3.ModerationDecision.merge(acc, (0, account_1$3.decideAccount)(subject.author, opts), (0, profile_1$3.decideProfile)(subject.author, opts));
	}
	notification.decideNotification = decideNotification;

	var post = {};

	var mutewords = {};

	Object.defineProperty(mutewords, "__esModule", {
	  value: true
	});
	mutewords.hasMutedWord = void 0;
	const client_1$3 = client$1;
	const REGEX = {
	  LEADING_TRAILING_PUNCTUATION: /(?:^\p{P}+|\p{P}+$)/gu,
	  ESCAPE: /[[\]{}()*+?.\\^$|\s]/g,
	  SEPARATORS: /[/\-–—()[\]_]+/g,
	  WORD_BOUNDARY: /[\s\n\t\r\f\v]+?/g
	};
	/**
	 * List of 2-letter lang codes for languages that either don't use spaces, or
	 * don't use spaces in a way conducive to word-based filtering.
	 *
	 * For these, we use a simple `String.includes` to check for a match.
	 */
	const LANGUAGE_EXCEPTIONS = ['ja',
	// Japanese
	'zh',
	// Chinese
	'ko',
	// Korean
	'th',
	// Thai
	'vi' // Vietnamese
	];
	function hasMutedWord({
	  mutedWords,
	  text,
	  facets,
	  outlineTags,
	  languages
	}) {
	  const exception = LANGUAGE_EXCEPTIONS.includes(languages?.[0] || '');
	  const tags = [].concat(outlineTags || []).concat(facets?.filter(facet => {
	    return facet.features.find(feature => client_1$3.AppBskyRichtextFacet.isTag(feature));
	  }).map(t => t.features[0].tag) || []).map(t => t.toLowerCase());
	  for (const mute of mutedWords) {
	    const mutedWord = mute.value.toLowerCase();
	    const postText = text.toLowerCase();
	    // `content` applies to tags as well
	    if (tags.includes(mutedWord)) return true;
	    // rest of the checks are for `content` only
	    if (!mute.targets.includes('content')) continue;
	    // single character or other exception, has to use includes
	    if ((mutedWord.length === 1 || exception) && postText.includes(mutedWord)) return true;
	    // too long
	    if (mutedWord.length > postText.length) continue;
	    // exact match
	    if (mutedWord === postText) return true;
	    // any muted phrase with space or punctuation
	    if (/(?:\s|\p{P})+?/u.test(mutedWord) && postText.includes(mutedWord)) return true;
	    // check individual character groups
	    const words = postText.split(REGEX.WORD_BOUNDARY);
	    for (const word of words) {
	      if (word === mutedWord) return true;
	      // compare word without leading/trailing punctuation, but allow internal
	      // punctuation (such as `s@ssy`)
	      const wordTrimmedPunctuation = word.replace(REGEX.LEADING_TRAILING_PUNCTUATION, '');
	      if (mutedWord === wordTrimmedPunctuation) return true;
	      if (mutedWord.length > wordTrimmedPunctuation.length) continue;
	      if (/\p{P}+/u.test(wordTrimmedPunctuation)) {
	        const spacedWord = wordTrimmedPunctuation.replace(/\p{P}+/gu, ' ');
	        if (spacedWord === mutedWord) return true;
	        const contiguousWord = spacedWord.replace(/\s/gu, '');
	        if (contiguousWord === mutedWord) return true;
	        const wordParts = wordTrimmedPunctuation.split(/\p{P}+/u);
	        for (const wordPart of wordParts) {
	          if (wordPart === mutedWord) return true;
	        }
	      }
	    }
	  }
	  return false;
	}
	mutewords.hasMutedWord = hasMutedWord;

	Object.defineProperty(post, "__esModule", {
	  value: true
	});
	post.decidePost = void 0;
	const decision_1$2 = decision;
	const client_1$2 = client$1;
	const mutewords_1 = mutewords;
	const account_1$2 = account;
	const profile_1$2 = profile;
	function decidePost(subject, opts) {
	  const acc = new decision_1$2.ModerationDecision();
	  acc.setDid(subject.author.did);
	  acc.setIsMe(subject.author.did === opts.userDid);
	  if (subject.labels?.length) {
	    for (const label of subject.labels) {
	      acc.addLabel('content', label, opts);
	    }
	  }
	  acc.addHidden(checkHiddenPost(subject, opts.prefs.hiddenPosts));
	  if (!acc.isMe) {
	    acc.addMutedWord(checkMutedWords(subject, opts.prefs.mutedWords));
	  }
	  let embedAcc;
	  if (subject.embed) {
	    if (client_1$2.AppBskyEmbedRecord.isViewRecord(subject.embed.record)) {
	      // quote post
	      embedAcc = decideQuotedPost(subject.embed.record, opts);
	    } else if (client_1$2.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1$2.AppBskyEmbedRecord.isViewRecord(subject.embed.record.record)) {
	      // quoted post with media
	      embedAcc = decideQuotedPost(subject.embed.record.record, opts);
	    } else if (client_1$2.AppBskyEmbedRecord.isViewBlocked(subject.embed.record)) {
	      // blocked quote post
	      embedAcc = decideBlockedQuotedPost(subject.embed.record, opts);
	    } else if (client_1$2.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1$2.AppBskyEmbedRecord.isViewBlocked(subject.embed.record.record)) {
	      // blocked quoted post with media
	      embedAcc = decideBlockedQuotedPost(subject.embed.record.record, opts);
	    }
	  }
	  return decision_1$2.ModerationDecision.merge(acc, embedAcc?.downgrade(), (0, account_1$2.decideAccount)(subject.author, opts), (0, profile_1$2.decideProfile)(subject.author, opts));
	}
	post.decidePost = decidePost;
	function decideQuotedPost(subject, opts) {
	  const acc = new decision_1$2.ModerationDecision();
	  acc.setDid(subject.author.did);
	  acc.setIsMe(subject.author.did === opts.userDid);
	  if (subject.labels?.length) {
	    for (const label of subject.labels) {
	      acc.addLabel('content', label, opts);
	    }
	  }
	  return decision_1$2.ModerationDecision.merge(acc, (0, account_1$2.decideAccount)(subject.author, opts), (0, profile_1$2.decideProfile)(subject.author, opts));
	}
	function decideBlockedQuotedPost(subject, opts) {
	  const acc = new decision_1$2.ModerationDecision();
	  acc.setDid(subject.author.did);
	  acc.setIsMe(subject.author.did === opts.userDid);
	  if (subject.author.viewer?.muted) {
	    if (subject.author.viewer?.mutedByList) {
	      acc.addMutedByList(subject.author.viewer?.mutedByList);
	    } else {
	      acc.addMuted(subject.author.viewer?.muted);
	    }
	  }
	  if (subject.author.viewer?.blocking) {
	    if (subject.author.viewer?.blockingByList) {
	      acc.addBlockingByList(subject.author.viewer?.blockingByList);
	    } else {
	      acc.addBlocking(subject.author.viewer?.blocking);
	    }
	  }
	  acc.addBlockedBy(subject.author.viewer?.blockedBy);
	  return acc;
	}
	function checkHiddenPost(subject, hiddenPosts) {
	  if (!hiddenPosts?.length) {
	    return false;
	  }
	  if (hiddenPosts.includes(subject.uri)) {
	    return true;
	  }
	  if (subject.embed) {
	    if (client_1$2.AppBskyEmbedRecord.isViewRecord(subject.embed.record) && hiddenPosts.includes(subject.embed.record.uri)) {
	      return true;
	    }
	    if (client_1$2.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1$2.AppBskyEmbedRecord.isViewRecord(subject.embed.record.record) && hiddenPosts.includes(subject.embed.record.record.uri)) {
	      return true;
	    }
	  }
	  return false;
	}
	function checkMutedWords(subject, mutedWords) {
	  if (!mutedWords?.length) {
	    return false;
	  }
	  if (client_1$2.AppBskyFeedPost.isRecord(subject.record)) {
	    // post text
	    if ((0, mutewords_1.hasMutedWord)({
	      mutedWords,
	      text: subject.record.text,
	      facets: subject.record.facets,
	      outlineTags: subject.record.tags,
	      languages: subject.record.langs
	    })) {
	      return true;
	    }
	    if (subject.record.embed && client_1$2.AppBskyEmbedImages.isMain(subject.record.embed)) {
	      // post images
	      for (const image of subject.record.embed.images) {
	        if ((0, mutewords_1.hasMutedWord)({
	          mutedWords,
	          text: image.alt,
	          languages: subject.record.langs
	        })) {
	          return true;
	        }
	      }
	    }
	  }
	  if (subject.embed) {
	    // quote post
	    if (client_1$2.AppBskyEmbedRecord.isViewRecord(subject.embed.record)) {
	      if (client_1$2.AppBskyFeedPost.isRecord(subject.embed.record.value)) {
	        const embeddedPost = subject.embed.record.value;
	        // quoted post text
	        if ((0, mutewords_1.hasMutedWord)({
	          mutedWords,
	          text: embeddedPost.text,
	          facets: embeddedPost.facets,
	          outlineTags: embeddedPost.tags,
	          languages: embeddedPost.langs
	        })) {
	          return true;
	        }
	        // quoted post's images
	        if (client_1$2.AppBskyEmbedImages.isMain(embeddedPost.embed)) {
	          for (const image of embeddedPost.embed.images) {
	            if ((0, mutewords_1.hasMutedWord)({
	              mutedWords,
	              text: image.alt,
	              languages: embeddedPost.langs
	            })) {
	              return true;
	            }
	          }
	        }
	        // quoted post's link card
	        if (client_1$2.AppBskyEmbedExternal.isMain(embeddedPost.embed)) {
	          const {
	            external
	          } = embeddedPost.embed;
	          if ((0, mutewords_1.hasMutedWord)({
	            mutedWords,
	            text: external.title + ' ' + external.description,
	            languages: []
	          })) {
	            return true;
	          }
	        }
	        if (client_1$2.AppBskyEmbedRecordWithMedia.isMain(embeddedPost.embed)) {
	          // quoted post's link card when it did a quote + media
	          if (client_1$2.AppBskyEmbedExternal.isMain(embeddedPost.embed.media)) {
	            const {
	              external
	            } = embeddedPost.embed.media;
	            if ((0, mutewords_1.hasMutedWord)({
	              mutedWords,
	              text: external.title + ' ' + external.description,
	              languages: []
	            })) {
	              return true;
	            }
	          }
	          // quoted post's images when it did a quote + media
	          if (client_1$2.AppBskyEmbedImages.isMain(embeddedPost.embed.media)) {
	            for (const image of embeddedPost.embed.media.images) {
	              if ((0, mutewords_1.hasMutedWord)({
	                mutedWords,
	                text: image.alt,
	                languages: client_1$2.AppBskyFeedPost.isRecord(embeddedPost.record) ? embeddedPost.langs : []
	              })) {
	                return true;
	              }
	            }
	          }
	        }
	      }
	    }
	    // link card
	    else if (client_1$2.AppBskyEmbedExternal.isView(subject.embed)) {
	      const {
	        external
	      } = subject.embed;
	      if ((0, mutewords_1.hasMutedWord)({
	        mutedWords,
	        text: external.title + ' ' + external.description,
	        languages: []
	      })) {
	        return true;
	      }
	    }
	    // quote post with media
	    else if (client_1$2.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1$2.AppBskyEmbedRecord.isViewRecord(subject.embed.record.record)) {
	      // quoted post text
	      if (client_1$2.AppBskyFeedPost.isRecord(subject.embed.record.record.value)) {
	        const post = subject.embed.record.record.value;
	        if ((0, mutewords_1.hasMutedWord)({
	          mutedWords,
	          text: post.text,
	          facets: post.facets,
	          outlineTags: post.tags,
	          languages: post.langs
	        })) {
	          return true;
	        }
	      }
	      // quoted post images
	      if (client_1$2.AppBskyEmbedImages.isView(subject.embed.media)) {
	        for (const image of subject.embed.media.images) {
	          if ((0, mutewords_1.hasMutedWord)({
	            mutedWords,
	            text: image.alt,
	            languages: client_1$2.AppBskyFeedPost.isRecord(subject.record) ? subject.record.langs : []
	          })) {
	            return true;
	          }
	        }
	      }
	    }
	  }
	  return false;
	}

	var feedGenerator = {};

	Object.defineProperty(feedGenerator, "__esModule", {
	  value: true
	});
	feedGenerator.decideFeedGenerator = void 0;
	const decision_1$1 = decision;
	const account_1$1 = account;
	const profile_1$1 = profile;
	function decideFeedGenerator(subject, opts) {
	  const acc = new decision_1$1.ModerationDecision();
	  acc.setDid(subject.creator.did);
	  acc.setIsMe(subject.creator.did === opts.userDid);
	  if (subject.labels?.length) {
	    for (const label of subject.labels) {
	      acc.addLabel('content', label, opts);
	    }
	  }
	  return decision_1$1.ModerationDecision.merge(acc, (0, account_1$1.decideAccount)(subject.creator, opts), (0, profile_1$1.decideProfile)(subject.creator, opts));
	}
	feedGenerator.decideFeedGenerator = decideFeedGenerator;

	var userList = {};

	Object.defineProperty(userList, "__esModule", {
	  value: true
	});
	userList.decideUserList = void 0;
	const syntax_1$1 = dist$4;
	const decision_1 = decision;
	const account_1 = account;
	const profile_1 = profile;
	function decideUserList(subject, opts) {
	  const acc = new decision_1.ModerationDecision();
	  const creator = isProfile(subject.creator) ? subject.creator : undefined;
	  if (creator) {
	    acc.setDid(creator.did);
	    acc.setIsMe(creator.did === opts.userDid);
	    if (subject.labels?.length) {
	      for (const label of subject.labels) {
	        acc.addLabel('content', label, opts);
	      }
	    }
	    return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(creator, opts), (0, profile_1.decideProfile)(creator, opts));
	  }
	  const creatorDid = new syntax_1$1.AtUri(subject.uri).hostname;
	  acc.setDid(creatorDid);
	  acc.setIsMe(creatorDid === opts.userDid);
	  if (subject.labels?.length) {
	    for (const label of subject.labels) {
	      acc.addLabel('content', label, opts);
	    }
	  }
	  return acc;
	}
	userList.decideUserList = decideUserList;
	function isProfile(v) {
	  return v && typeof v === 'object' && 'did' in v;
	}

	var util = {};

	Object.defineProperty(util, "__esModule", {
	  value: true
	});
	util.interpretLabelValueDefinitions = util.interpretLabelValueDefinition = util.isQuotedPostWithMedia = util.isQuotedPost = void 0;
	const client_1$1 = client$1;
	function isQuotedPost(embed) {
	  return Boolean(embed && client_1$1.AppBskyEmbedRecord.isView(embed));
	}
	util.isQuotedPost = isQuotedPost;
	function isQuotedPostWithMedia(embed) {
	  return Boolean(embed && client_1$1.AppBskyEmbedRecordWithMedia.isView(embed));
	}
	util.isQuotedPostWithMedia = isQuotedPostWithMedia;
	function interpretLabelValueDefinition(def, definedBy) {
	  const behaviors = {
	    account: {},
	    profile: {},
	    content: {}
	  };
	  const alertOrInform = def.severity === 'alert' ? 'alert' : def.severity === 'inform' ? 'inform' : undefined;
	  if (def.blurs === 'content') {
	    // target=account, blurs=content
	    behaviors.account.profileList = alertOrInform;
	    behaviors.account.profileView = alertOrInform;
	    behaviors.account.contentList = 'blur';
	    behaviors.account.contentView = def.adultOnly ? 'blur' : alertOrInform;
	    // target=profile, blurs=content
	    behaviors.profile.profileList = alertOrInform;
	    behaviors.profile.profileView = alertOrInform;
	    // target=content, blurs=content
	    behaviors.content.contentList = 'blur';
	    behaviors.content.contentView = def.adultOnly ? 'blur' : alertOrInform;
	  } else if (def.blurs === 'media') {
	    // target=account, blurs=media
	    behaviors.account.profileList = alertOrInform;
	    behaviors.account.profileView = alertOrInform;
	    behaviors.account.avatar = 'blur';
	    behaviors.account.banner = 'blur';
	    // target=profile, blurs=media
	    behaviors.profile.profileList = alertOrInform;
	    behaviors.profile.profileView = alertOrInform;
	    behaviors.profile.avatar = 'blur';
	    behaviors.profile.banner = 'blur';
	    // target=content, blurs=media
	    behaviors.content.contentMedia = 'blur';
	  } else if (def.blurs === 'none') {
	    // target=account, blurs=none
	    behaviors.account.profileList = alertOrInform;
	    behaviors.account.profileView = alertOrInform;
	    behaviors.account.contentList = alertOrInform;
	    behaviors.account.contentView = alertOrInform;
	    // target=profile, blurs=none
	    behaviors.profile.profileList = alertOrInform;
	    behaviors.profile.profileView = alertOrInform;
	    // target=content, blurs=none
	    behaviors.content.contentList = alertOrInform;
	    behaviors.content.contentView = alertOrInform;
	  }
	  let defaultSetting = 'warn';
	  if (def.defaultSetting === 'hide' || def.defaultSetting === 'ignore') {
	    defaultSetting = def.defaultSetting;
	  }
	  const flags = ['no-self'];
	  if (def.adultOnly) {
	    flags.push('adult');
	  }
	  return {
	    ...def,
	    definedBy,
	    configurable: true,
	    defaultSetting,
	    flags,
	    behaviors
	  };
	}
	util.interpretLabelValueDefinition = interpretLabelValueDefinition;
	function interpretLabelValueDefinitions(labelerView) {
	  return (labelerView.policies?.labelValueDefinitions || []).filter(labelValDef => client_1$1.ComAtprotoLabelDefs.validateLabelValueDefinition(labelValDef).success).map(labelValDef => interpretLabelValueDefinition(labelValDef, labelerView.creator.did));
	}
	util.interpretLabelValueDefinitions = interpretLabelValueDefinitions;

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.moderateUserList = exports.moderateFeedGenerator = exports.moderateNotification = exports.moderatePost = exports.moderateProfile = exports.interpretLabelValueDefinitions = exports.interpretLabelValueDefinition = exports.hasMutedWord = exports.ModerationDecision = exports.ModerationUI = void 0;
	  const account_1 = account;
	  const profile_1 = profile;
	  const notification_1 = notification;
	  const post_1 = post;
	  const feed_generator_1 = feedGenerator;
	  const user_list_1 = userList;
	  const decision_1 = decision;
	  var ui_1 = ui;
	  Object.defineProperty(exports, "ModerationUI", {
	    enumerable: true,
	    get: function () {
	      return ui_1.ModerationUI;
	    }
	  });
	  var decision_2 = decision;
	  Object.defineProperty(exports, "ModerationDecision", {
	    enumerable: true,
	    get: function () {
	      return decision_2.ModerationDecision;
	    }
	  });
	  var mutewords_1 = mutewords;
	  Object.defineProperty(exports, "hasMutedWord", {
	    enumerable: true,
	    get: function () {
	      return mutewords_1.hasMutedWord;
	    }
	  });
	  var util_1 = util;
	  Object.defineProperty(exports, "interpretLabelValueDefinition", {
	    enumerable: true,
	    get: function () {
	      return util_1.interpretLabelValueDefinition;
	    }
	  });
	  Object.defineProperty(exports, "interpretLabelValueDefinitions", {
	    enumerable: true,
	    get: function () {
	      return util_1.interpretLabelValueDefinitions;
	    }
	  });
	  function moderateProfile(subject, opts) {
	    return decision_1.ModerationDecision.merge((0, account_1.decideAccount)(subject, opts), (0, profile_1.decideProfile)(subject, opts));
	  }
	  exports.moderateProfile = moderateProfile;
	  function moderatePost(subject, opts) {
	    return (0, post_1.decidePost)(subject, opts);
	  }
	  exports.moderatePost = moderatePost;
	  function moderateNotification(subject, opts) {
	    return (0, notification_1.decideNotification)(subject, opts);
	  }
	  exports.moderateNotification = moderateNotification;
	  function moderateFeedGenerator(subject, opts) {
	    return (0, feed_generator_1.decideFeedGenerator)(subject, opts);
	  }
	  exports.moderateFeedGenerator = moderateFeedGenerator;
	  function moderateUserList(subject, opts) {
	    return (0, user_list_1.decideUserList)(subject, opts);
	  }
	  exports.moderateUserList = moderateUserList;
	})(moderation);

	var mocker = {};

	Object.defineProperty(mocker, "__esModule", {
	  value: true
	});
	mocker.mock = void 0;
	const FAKE_CID = 'bafyreiclp443lavogvhj3d2ob2cxbfuscni2k5jk7bebjzg7khl3esabwq';
	mocker.mock = {
	  post({
	    text,
	    facets,
	    reply,
	    embed
	  }) {
	    return {
	      $type: 'app.bsky.feed.post',
	      text,
	      facets,
	      reply,
	      embed,
	      langs: ['en'],
	      createdAt: new Date().toISOString()
	    };
	  },
	  postView({
	    record,
	    author,
	    embed,
	    replyCount,
	    repostCount,
	    likeCount,
	    viewer,
	    labels
	  }) {
	    return {
	      $type: 'app.bsky.feed.defs#postView',
	      uri: `at://${author.did}/app.bsky.feed.post/fake`,
	      cid: FAKE_CID,
	      author,
	      record,
	      embed,
	      replyCount,
	      repostCount,
	      likeCount,
	      indexedAt: new Date().toISOString(),
	      viewer,
	      labels
	    };
	  },
	  embedRecordView({
	    record,
	    author,
	    labels
	  }) {
	    return {
	      $type: 'app.bsky.embed.record#view',
	      record: {
	        $type: 'app.bsky.embed.record#viewRecord',
	        uri: `at://${author.did}/app.bsky.feed.post/fake`,
	        cid: FAKE_CID,
	        author,
	        value: record,
	        labels,
	        indexedAt: new Date().toISOString()
	      }
	    };
	  },
	  profileViewBasic({
	    handle,
	    displayName,
	    description,
	    viewer,
	    labels
	  }) {
	    return {
	      did: `did:web:${handle}`,
	      handle,
	      displayName,
	      description,
	      // technically not in ProfileViewBasic but useful in some cases
	      viewer,
	      labels
	    };
	  },
	  actorViewerState({
	    muted,
	    mutedByList,
	    blockedBy,
	    blocking,
	    blockingByList,
	    following,
	    followedBy
	  }) {
	    return {
	      muted,
	      mutedByList,
	      blockedBy,
	      blocking,
	      blockingByList,
	      following,
	      followedBy
	    };
	  },
	  listViewBasic({
	    name
	  }) {
	    return {
	      uri: 'at://did:plc:fake/app.bsky.graph.list/fake',
	      cid: FAKE_CID,
	      name,
	      purpose: 'app.bsky.graph.defs#modlist',
	      indexedAt: new Date().toISOString()
	    };
	  },
	  replyNotification({
	    author,
	    record,
	    labels
	  }) {
	    return {
	      uri: `at://${author.did}/app.bsky.feed.post/fake`,
	      cid: FAKE_CID,
	      author,
	      reason: 'reply',
	      reasonSubject: `at://${author.did}/app.bsky.feed.post/fake-parent`,
	      record,
	      isRead: false,
	      indexedAt: new Date().toISOString(),
	      labels
	    };
	  },
	  followNotification({
	    author,
	    subjectDid,
	    labels
	  }) {
	    return {
	      uri: `at://${author.did}/app.bsky.graph.follow/fake`,
	      cid: FAKE_CID,
	      author,
	      reason: 'follow',
	      record: {
	        $type: 'app.bsky.graph.follow',
	        createdAt: new Date().toISOString(),
	        subject: subjectDid
	      },
	      isRead: false,
	      indexedAt: new Date().toISOString(),
	      labels
	    };
	  },
	  label({
	    val,
	    uri,
	    src
	  }) {
	    return {
	      src: src || 'did:plc:fake-labeler',
	      uri,
	      val,
	      cts: new Date().toISOString()
	    };
	  }
	};

	var bskyAgent = {};

	Object.defineProperty(bskyAgent, "__esModule", {
	  value: true
	});
	bskyAgent.BskyAgent = void 0;
	const syntax_1 = dist$4;
	const common_web_1 = dist$2;
	const agent_1 = agent;
	const client_1 = client$1;
	const labels_1 = labels;
	const util_1 = util$4;
	const moderation_1 = moderation;
	const FEED_VIEW_PREF_DEFAULTS = {
	  hideReplies: false,
	  hideRepliesByUnfollowed: true,
	  hideRepliesByLikeCount: 0,
	  hideReposts: false,
	  hideQuotePosts: false
	};
	const THREAD_VIEW_PREF_DEFAULTS = {
	  sort: 'oldest',
	  prioritizeFollowedUsers: true
	};
	class BskyAgent extends agent_1.AtpAgent {
	  constructor() {
	    super(...arguments);
	    Object.defineProperty(this, "getTimeline", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: (params, opts) => this.api.app.bsky.feed.getTimeline(params, opts)
	    });
	    Object.defineProperty(this, "getAuthorFeed", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: (params, opts) => this.api.app.bsky.feed.getAuthorFeed(params, opts)
	    });
	    Object.defineProperty(this, "getActorLikes", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: (params, opts) => this.api.app.bsky.feed.getActorLikes(params, opts)
	    });
	    Object.defineProperty(this, "getPostThread", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: (params, opts) => this.api.app.bsky.feed.getPostThread(params, opts)
	    });
	    Object.defineProperty(this, "getPost", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: params => this.api.app.bsky.feed.post.get(params)
	    });
	    Object.defineProperty(this, "getPosts", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: (params, opts) => this.api.app.bsky.feed.getPosts(params, opts)
	    });
	    Object.defineProperty(this, "getLikes", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: (params, opts) => this.api.app.bsky.feed.getLikes(params, opts)
	    });
	    Object.defineProperty(this, "getRepostedBy", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: (params, opts) => this.api.app.bsky.feed.getRepostedBy(params, opts)
	    });
	    Object.defineProperty(this, "getFollows", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: (params, opts) => this.api.app.bsky.graph.getFollows(params, opts)
	    });
	    Object.defineProperty(this, "getFollowers", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: (params, opts) => this.api.app.bsky.graph.getFollowers(params, opts)
	    });
	    Object.defineProperty(this, "getProfile", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: (params, opts) => this.api.app.bsky.actor.getProfile(params, opts)
	    });
	    Object.defineProperty(this, "getProfiles", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: (params, opts) => this.api.app.bsky.actor.getProfiles(params, opts)
	    });
	    Object.defineProperty(this, "getSuggestions", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: (params, opts) => this.api.app.bsky.actor.getSuggestions(params, opts)
	    });
	    Object.defineProperty(this, "searchActors", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: (params, opts) => this.api.app.bsky.actor.searchActors(params, opts)
	    });
	    Object.defineProperty(this, "searchActorsTypeahead", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: (params, opts) => this.api.app.bsky.actor.searchActorsTypeahead(params, opts)
	    });
	    Object.defineProperty(this, "listNotifications", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: (params, opts) => this.api.app.bsky.notification.listNotifications(params, opts)
	    });
	    Object.defineProperty(this, "countUnreadNotifications", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: (params, opts) => this.api.app.bsky.notification.getUnreadCount(params, opts)
	    });
	    Object.defineProperty(this, "getLabelers", {
	      enumerable: true,
	      configurable: true,
	      writable: true,
	      value: (params, opts) => this.api.app.bsky.labeler.getServices(params, opts)
	    });
	  }
	  clone() {
	    const inst = new BskyAgent({
	      service: this.service
	    });
	    this.copyInto(inst);
	    return inst;
	  }
	  get app() {
	    return this.api.app;
	  }
	  async getLabelDefinitions(prefs) {
	    // collect the labeler dids
	    let dids = BskyAgent.appLabelers;
	    if (isBskyPrefs(prefs)) {
	      dids = dids.concat(prefs.moderationPrefs.labelers.map(l => l.did));
	    } else if (isModPrefs(prefs)) {
	      dids = dids.concat(prefs.labelers.map(l => l.did));
	    } else {
	      dids = dids.concat(prefs);
	    }
	    // fetch their definitions
	    const labelers = await this.getLabelers({
	      dids,
	      detailed: true
	    });
	    // assemble a map of labeler dids to the interpretted label value definitions
	    const labelDefs = {};
	    if (labelers.data) {
	      for (const labeler of labelers.data.views) {
	        labelDefs[labeler.creator.did] = (0, moderation_1.interpretLabelValueDefinitions)(labeler);
	      }
	    }
	    return labelDefs;
	  }
	  async post(record) {
	    if (!this.session) {
	      throw new Error('Not logged in');
	    }
	    record.createdAt = record.createdAt || new Date().toISOString();
	    return this.api.app.bsky.feed.post.create({
	      repo: this.session.did
	    }, record);
	  }
	  async deletePost(postUri) {
	    if (!this.session) {
	      throw new Error('Not logged in');
	    }
	    const postUrip = new syntax_1.AtUri(postUri);
	    return await this.api.app.bsky.feed.post.delete({
	      repo: postUrip.hostname,
	      rkey: postUrip.rkey
	    });
	  }
	  async like(uri, cid) {
	    if (!this.session) {
	      throw new Error('Not logged in');
	    }
	    return await this.api.app.bsky.feed.like.create({
	      repo: this.session.did
	    }, {
	      subject: {
	        uri,
	        cid
	      },
	      createdAt: new Date().toISOString()
	    });
	  }
	  async deleteLike(likeUri) {
	    if (!this.session) {
	      throw new Error('Not logged in');
	    }
	    const likeUrip = new syntax_1.AtUri(likeUri);
	    return await this.api.app.bsky.feed.like.delete({
	      repo: likeUrip.hostname,
	      rkey: likeUrip.rkey
	    });
	  }
	  async repost(uri, cid) {
	    if (!this.session) {
	      throw new Error('Not logged in');
	    }
	    return await this.api.app.bsky.feed.repost.create({
	      repo: this.session.did
	    }, {
	      subject: {
	        uri,
	        cid
	      },
	      createdAt: new Date().toISOString()
	    });
	  }
	  async deleteRepost(repostUri) {
	    if (!this.session) {
	      throw new Error('Not logged in');
	    }
	    const repostUrip = new syntax_1.AtUri(repostUri);
	    return await this.api.app.bsky.feed.repost.delete({
	      repo: repostUrip.hostname,
	      rkey: repostUrip.rkey
	    });
	  }
	  async follow(subjectDid) {
	    if (!this.session) {
	      throw new Error('Not logged in');
	    }
	    return await this.api.app.bsky.graph.follow.create({
	      repo: this.session.did
	    }, {
	      subject: subjectDid,
	      createdAt: new Date().toISOString()
	    });
	  }
	  async deleteFollow(followUri) {
	    if (!this.session) {
	      throw new Error('Not logged in');
	    }
	    const followUrip = new syntax_1.AtUri(followUri);
	    return await this.api.app.bsky.graph.follow.delete({
	      repo: followUrip.hostname,
	      rkey: followUrip.rkey
	    });
	  }
	  async upsertProfile(updateFn) {
	    if (!this.session) {
	      throw new Error('Not logged in');
	    }
	    let retriesRemaining = 5;
	    while (retriesRemaining >= 0) {
	      // fetch existing
	      const existing = await this.com.atproto.repo.getRecord({
	        repo: this.session.did,
	        collection: 'app.bsky.actor.profile',
	        rkey: 'self'
	      }).catch(_ => undefined);
	      // run the update
	      const updated = await updateFn(existing?.data.value);
	      if (updated) {
	        updated.$type = 'app.bsky.actor.profile';
	      }
	      // validate the record
	      const validation = client_1.AppBskyActorProfile.validateRecord(updated);
	      if (!validation.success) {
	        throw validation.error;
	      }
	      try {
	        // attempt the put
	        await this.com.atproto.repo.putRecord({
	          repo: this.session.did,
	          collection: 'app.bsky.actor.profile',
	          rkey: 'self',
	          record: updated,
	          swapRecord: existing?.data.cid || null
	        });
	      } catch (e) {
	        if (retriesRemaining > 0 && e instanceof client_1.ComAtprotoRepoPutRecord.InvalidSwapError) {
	          // try again
	          retriesRemaining--;
	          continue;
	        } else {
	          throw e;
	        }
	      }
	      break;
	    }
	  }
	  async mute(actor) {
	    return this.api.app.bsky.graph.muteActor({
	      actor
	    });
	  }
	  async unmute(actor) {
	    return this.api.app.bsky.graph.unmuteActor({
	      actor
	    });
	  }
	  async muteModList(uri) {
	    return this.api.app.bsky.graph.muteActorList({
	      list: uri
	    });
	  }
	  async unmuteModList(uri) {
	    return this.api.app.bsky.graph.unmuteActorList({
	      list: uri
	    });
	  }
	  async blockModList(uri) {
	    if (!this.session) {
	      throw new Error('Not logged in');
	    }
	    return await this.api.app.bsky.graph.listblock.create({
	      repo: this.session.did
	    }, {
	      subject: uri,
	      createdAt: new Date().toISOString()
	    });
	  }
	  async unblockModList(uri) {
	    if (!this.session) {
	      throw new Error('Not logged in');
	    }
	    const listInfo = await this.api.app.bsky.graph.getList({
	      list: uri,
	      limit: 1
	    });
	    if (!listInfo.data.list.viewer?.blocked) {
	      return;
	    }
	    const {
	      rkey
	    } = new syntax_1.AtUri(listInfo.data.list.viewer.blocked);
	    return await this.api.app.bsky.graph.listblock.delete({
	      repo: this.session.did,
	      rkey
	    });
	  }
	  async updateSeenNotifications(seenAt) {
	    seenAt = seenAt || new Date().toISOString();
	    return this.api.app.bsky.notification.updateSeen({
	      seenAt
	    });
	  }
	  async getPreferences() {
	    const prefs = {
	      feeds: {
	        saved: undefined,
	        pinned: undefined
	      },
	      // @ts-ignore populating below
	      savedFeeds: undefined,
	      feedViewPrefs: {
	        home: {
	          ...FEED_VIEW_PREF_DEFAULTS
	        }
	      },
	      threadViewPrefs: {
	        ...THREAD_VIEW_PREF_DEFAULTS
	      },
	      moderationPrefs: {
	        adultContentEnabled: false,
	        labels: {
	          ...labels_1.DEFAULT_LABEL_SETTINGS
	        },
	        labelers: BskyAgent.appLabelers.map(did => ({
	          did,
	          labels: {}
	        })),
	        mutedWords: [],
	        hiddenPosts: []
	      },
	      birthDate: undefined,
	      interests: {
	        tags: []
	      }
	    };
	    const res = await this.app.bsky.actor.getPreferences({});
	    const labelPrefs = [];
	    for (const pref of res.data.preferences) {
	      if (client_1.AppBskyActorDefs.isAdultContentPref(pref) && client_1.AppBskyActorDefs.validateAdultContentPref(pref).success) {
	        // adult content preferences
	        prefs.moderationPrefs.adultContentEnabled = pref.enabled;
	      } else if (client_1.AppBskyActorDefs.isContentLabelPref(pref) && client_1.AppBskyActorDefs.validateContentLabelPref(pref).success) {
	        // content label preference
	        const adjustedPref = adjustLegacyContentLabelPref(pref);
	        labelPrefs.push(adjustedPref);
	      } else if (client_1.AppBskyActorDefs.isLabelersPref(pref) && client_1.AppBskyActorDefs.validateLabelersPref(pref).success) {
	        // labelers preferences
	        prefs.moderationPrefs.labelers = BskyAgent.appLabelers.map(did => ({
	          did,
	          labels: {}
	        })).concat(pref.labelers.map(labeler => ({
	          ...labeler,
	          labels: {}
	        })));
	      } else if (client_1.AppBskyActorDefs.isSavedFeedsPrefV2(pref) && client_1.AppBskyActorDefs.validateSavedFeedsPrefV2(pref).success) {
	        prefs.savedFeeds = pref.items;
	      } else if (client_1.AppBskyActorDefs.isSavedFeedsPref(pref) && client_1.AppBskyActorDefs.validateSavedFeedsPref(pref).success) {
	        // saved and pinned feeds
	        prefs.feeds.saved = pref.saved;
	        prefs.feeds.pinned = pref.pinned;
	      } else if (client_1.AppBskyActorDefs.isPersonalDetailsPref(pref) && client_1.AppBskyActorDefs.validatePersonalDetailsPref(pref).success) {
	        // birth date (irl)
	        if (pref.birthDate) {
	          prefs.birthDate = new Date(pref.birthDate);
	        }
	      } else if (client_1.AppBskyActorDefs.isFeedViewPref(pref) && client_1.AppBskyActorDefs.validateFeedViewPref(pref).success) {
	        // feed view preferences
	        // eslint-disable-next-line @typescript-eslint/no-unused-vars
	        const {
	          $type,
	          feed,
	          ...v
	        } = pref;
	        prefs.feedViewPrefs[pref.feed] = {
	          ...FEED_VIEW_PREF_DEFAULTS,
	          ...v
	        };
	      } else if (client_1.AppBskyActorDefs.isThreadViewPref(pref) && client_1.AppBskyActorDefs.validateThreadViewPref(pref).success) {
	        // thread view preferences
	        // eslint-disable-next-line @typescript-eslint/no-unused-vars
	        const {
	          $type,
	          ...v
	        } = pref;
	        prefs.threadViewPrefs = {
	          ...prefs.threadViewPrefs,
	          ...v
	        };
	      } else if (client_1.AppBskyActorDefs.isInterestsPref(pref) && client_1.AppBskyActorDefs.validateInterestsPref(pref).success) {
	        // eslint-disable-next-line @typescript-eslint/no-unused-vars
	        const {
	          $type,
	          ...v
	        } = pref;
	        prefs.interests = {
	          ...prefs.interests,
	          ...v
	        };
	      } else if (client_1.AppBskyActorDefs.isMutedWordsPref(pref) && client_1.AppBskyActorDefs.validateMutedWordsPref(pref).success) {
	        // eslint-disable-next-line @typescript-eslint/no-unused-vars
	        const {
	          $type,
	          ...v
	        } = pref;
	        prefs.moderationPrefs.mutedWords = v.items;
	      } else if (client_1.AppBskyActorDefs.isHiddenPostsPref(pref) && client_1.AppBskyActorDefs.validateHiddenPostsPref(pref).success) {
	        // eslint-disable-next-line @typescript-eslint/no-unused-vars
	        const {
	          $type,
	          ...v
	        } = pref;
	        prefs.moderationPrefs.hiddenPosts = v.items;
	      }
	    }
	    /*
	     * If `prefs.savedFeeds` is undefined, no `savedFeedsPrefV2` exists, which
	     * means we want to try to migrate if needed.
	     *
	     * If v1 prefs exist, they will be migrated to v2.
	     *
	     * If no v1 prefs exist, the user is either new, or could be old and has
	     * never edited their feeds.
	     */
	    if (prefs.savedFeeds === undefined) {
	      const {
	        saved,
	        pinned
	      } = prefs.feeds;
	      if (saved && pinned) {
	        const uniqueMigratedSavedFeeds = new Map();
	        // insert Following feed first
	        uniqueMigratedSavedFeeds.set('timeline', {
	          id: common_web_1.TID.nextStr(),
	          type: 'timeline',
	          value: 'following',
	          pinned: true
	        });
	        // use pinned as source of truth for feed order
	        for (const uri of pinned) {
	          const type = (0, util_1.getSavedFeedType)(uri);
	          // only want supported types
	          if (type === 'unknown') continue;
	          uniqueMigratedSavedFeeds.set(uri, {
	            id: common_web_1.TID.nextStr(),
	            type,
	            value: uri,
	            pinned: true
	          });
	        }
	        for (const uri of saved) {
	          if (!uniqueMigratedSavedFeeds.has(uri)) {
	            const type = (0, util_1.getSavedFeedType)(uri);
	            // only want supported types
	            if (type === 'unknown') continue;
	            uniqueMigratedSavedFeeds.set(uri, {
	              id: common_web_1.TID.nextStr(),
	              type,
	              value: uri,
	              pinned: false
	            });
	          }
	        }
	        prefs.savedFeeds = Array.from(uniqueMigratedSavedFeeds.values());
	      } else {
	        prefs.savedFeeds = [{
	          id: common_web_1.TID.nextStr(),
	          type: 'timeline',
	          value: 'following',
	          pinned: true
	        }];
	      }
	      // save to user preferences so this migration doesn't re-occur
	      await this.overwriteSavedFeeds(prefs.savedFeeds);
	    }
	    // apply the label prefs
	    for (const pref of labelPrefs) {
	      if (pref.labelerDid) {
	        const labeler = prefs.moderationPrefs.labelers.find(labeler => labeler.did === pref.labelerDid);
	        if (!labeler) continue;
	        labeler.labels[pref.label] = pref.visibility;
	      } else {
	        prefs.moderationPrefs.labels[pref.label] = pref.visibility;
	      }
	    }
	    prefs.moderationPrefs.labels = remapLegacyLabels(prefs.moderationPrefs.labels);
	    // automatically configure the client
	    this.configureLabelersHeader(prefsArrayToLabelerDids(res.data.preferences));
	    return prefs;
	  }
	  async overwriteSavedFeeds(savedFeeds) {
	    savedFeeds.forEach(util_1.validateSavedFeed);
	    const uniqueSavedFeeds = new Map();
	    savedFeeds.forEach(feed => {
	      // remove and re-insert to preserve order
	      if (uniqueSavedFeeds.has(feed.id)) {
	        uniqueSavedFeeds.delete(feed.id);
	      }
	      uniqueSavedFeeds.set(feed.id, feed);
	    });
	    return updateSavedFeedsV2Preferences(this, () => Array.from(uniqueSavedFeeds.values()));
	  }
	  async updateSavedFeeds(savedFeedsToUpdate) {
	    savedFeedsToUpdate.map(util_1.validateSavedFeed);
	    return updateSavedFeedsV2Preferences(this, savedFeeds => {
	      return savedFeeds.map(savedFeed => {
	        const updatedVersion = savedFeedsToUpdate.find(updated => savedFeed.id === updated.id);
	        if (updatedVersion) {
	          return {
	            ...savedFeed,
	            // only update pinned
	            pinned: updatedVersion.pinned
	          };
	        }
	        return savedFeed;
	      });
	    });
	  }
	  async addSavedFeeds(savedFeeds) {
	    const toSave = savedFeeds.map(f => ({
	      ...f,
	      id: common_web_1.TID.nextStr()
	    }));
	    toSave.forEach(util_1.validateSavedFeed);
	    return updateSavedFeedsV2Preferences(this, savedFeeds => [...savedFeeds, ...toSave]);
	  }
	  async removeSavedFeeds(ids) {
	    return updateSavedFeedsV2Preferences(this, savedFeeds => [...savedFeeds.filter(feed => !ids.find(id => feed.id === id))]);
	  }
	  /**
	   * @deprecated use `overwriteSavedFeeds`
	   */
	  async setSavedFeeds(saved, pinned) {
	    return updateFeedPreferences(this, () => ({
	      saved,
	      pinned
	    }));
	  }
	  /**
	   * @deprecated use `addSavedFeeds`
	   */
	  async addSavedFeed(v) {
	    return updateFeedPreferences(this, (saved, pinned) => ({
	      saved: [...saved.filter(uri => uri !== v), v],
	      pinned
	    }));
	  }
	  /**
	   * @deprecated use `removeSavedFeeds`
	   */
	  async removeSavedFeed(v) {
	    return updateFeedPreferences(this, (saved, pinned) => ({
	      saved: saved.filter(uri => uri !== v),
	      pinned: pinned.filter(uri => uri !== v)
	    }));
	  }
	  /**
	   * @deprecated use `addSavedFeeds` or `updateSavedFeeds`
	   */
	  async addPinnedFeed(v) {
	    return updateFeedPreferences(this, (saved, pinned) => ({
	      saved: [...saved.filter(uri => uri !== v), v],
	      pinned: [...pinned.filter(uri => uri !== v), v]
	    }));
	  }
	  /**
	   * @deprecated use `updateSavedFeeds` or `removeSavedFeeds`
	   */
	  async removePinnedFeed(v) {
	    return updateFeedPreferences(this, (saved, pinned) => ({
	      saved,
	      pinned: pinned.filter(uri => uri !== v)
	    }));
	  }
	  async setAdultContentEnabled(v) {
	    await updatePreferences(this, prefs => {
	      let adultContentPref = prefs.findLast(pref => client_1.AppBskyActorDefs.isAdultContentPref(pref) && client_1.AppBskyActorDefs.validateAdultContentPref(pref).success);
	      if (adultContentPref) {
	        adultContentPref.enabled = v;
	      } else {
	        adultContentPref = {
	          $type: 'app.bsky.actor.defs#adultContentPref',
	          enabled: v
	        };
	      }
	      return prefs.filter(pref => !client_1.AppBskyActorDefs.isAdultContentPref(pref)).concat([adultContentPref]);
	    });
	  }
	  async setContentLabelPref(key, value, labelerDid) {
	    if (labelerDid) {
	      (0, syntax_1.ensureValidDid)(labelerDid);
	    }
	    await updatePreferences(this, prefs => {
	      let labelPref = prefs.findLast(pref => client_1.AppBskyActorDefs.isContentLabelPref(pref) && client_1.AppBskyActorDefs.validateContentLabelPref(pref).success && pref.label === key && pref.labelerDid === labelerDid);
	      let legacyLabelPref;
	      if (labelPref) {
	        labelPref.visibility = value;
	      } else {
	        labelPref = {
	          $type: 'app.bsky.actor.defs#contentLabelPref',
	          label: key,
	          labelerDid,
	          visibility: value
	        };
	      }
	      if (client_1.AppBskyActorDefs.isContentLabelPref(labelPref)) {
	        // is global
	        if (!labelPref.labelerDid) {
	          const legacyLabelValue = {
	            'graphic-media': 'gore',
	            porn: 'nsfw',
	            sexual: 'suggestive'
	          }[labelPref.label];
	          // if it's a legacy label, double-write the legacy label
	          if (legacyLabelValue) {
	            legacyLabelPref = prefs.findLast(pref => client_1.AppBskyActorDefs.isContentLabelPref(pref) && client_1.AppBskyActorDefs.validateContentLabelPref(pref).success && pref.label === legacyLabelValue && pref.labelerDid === undefined);
	            if (legacyLabelPref) {
	              legacyLabelPref.visibility = value;
	            } else {
	              legacyLabelPref = {
	                $type: 'app.bsky.actor.defs#contentLabelPref',
	                label: legacyLabelValue,
	                labelerDid: undefined,
	                visibility: value
	              };
	            }
	          }
	        }
	      }
	      return prefs.filter(pref => !client_1.AppBskyActorDefs.isContentLabelPref(pref) || !(pref.label === key && pref.labelerDid === labelerDid)).concat([labelPref]).filter(pref => {
	        if (!legacyLabelPref) return true;
	        return !client_1.AppBskyActorDefs.isContentLabelPref(pref) || !(pref.label === legacyLabelPref.label && pref.labelerDid === undefined);
	      }).concat(legacyLabelPref ? [legacyLabelPref] : []);
	    });
	  }
	  async addLabeler(did) {
	    const prefs = await updatePreferences(this, prefs => {
	      let labelersPref = prefs.findLast(pref => client_1.AppBskyActorDefs.isLabelersPref(pref) && client_1.AppBskyActorDefs.validateLabelersPref(pref).success);
	      if (!labelersPref) {
	        labelersPref = {
	          $type: 'app.bsky.actor.defs#labelersPref',
	          labelers: []
	        };
	      }
	      if (client_1.AppBskyActorDefs.isLabelersPref(labelersPref)) {
	        let labelerPrefItem = labelersPref.labelers.find(labeler => labeler.did === did);
	        if (!labelerPrefItem) {
	          labelerPrefItem = {
	            did
	          };
	          labelersPref.labelers.push(labelerPrefItem);
	        }
	      }
	      return prefs.filter(pref => !client_1.AppBskyActorDefs.isLabelersPref(pref)).concat([labelersPref]);
	    });
	    // automatically configure the client
	    this.configureLabelersHeader(prefsArrayToLabelerDids(prefs));
	  }
	  async removeLabeler(did) {
	    const prefs = await updatePreferences(this, prefs => {
	      let labelersPref = prefs.findLast(pref => client_1.AppBskyActorDefs.isLabelersPref(pref) && client_1.AppBskyActorDefs.validateLabelersPref(pref).success);
	      if (!labelersPref) {
	        labelersPref = {
	          $type: 'app.bsky.actor.defs#labelersPref',
	          labelers: []
	        };
	      }
	      if (client_1.AppBskyActorDefs.isLabelersPref(labelersPref)) {
	        labelersPref.labelers = labelersPref.labelers.filter(labeler => labeler.did !== did);
	      }
	      return prefs.filter(pref => !client_1.AppBskyActorDefs.isLabelersPref(pref)).concat([labelersPref]);
	    });
	    // automatically configure the client
	    this.configureLabelersHeader(prefsArrayToLabelerDids(prefs));
	  }
	  async setPersonalDetails({
	    birthDate
	  }) {
	    birthDate = birthDate instanceof Date ? birthDate.toISOString() : birthDate;
	    await updatePreferences(this, prefs => {
	      let personalDetailsPref = prefs.findLast(pref => client_1.AppBskyActorDefs.isPersonalDetailsPref(pref) && client_1.AppBskyActorDefs.validatePersonalDetailsPref(pref).success);
	      if (personalDetailsPref) {
	        personalDetailsPref.birthDate = birthDate;
	      } else {
	        personalDetailsPref = {
	          $type: 'app.bsky.actor.defs#personalDetailsPref',
	          birthDate
	        };
	      }
	      return prefs.filter(pref => !client_1.AppBskyActorDefs.isPersonalDetailsPref(pref)).concat([personalDetailsPref]);
	    });
	  }
	  async setFeedViewPrefs(feed, pref) {
	    await updatePreferences(this, prefs => {
	      const existing = prefs.findLast(pref => client_1.AppBskyActorDefs.isFeedViewPref(pref) && client_1.AppBskyActorDefs.validateFeedViewPref(pref).success && pref.feed === feed);
	      if (existing) {
	        pref = {
	          ...existing,
	          ...pref
	        };
	      }
	      return prefs.filter(p => !client_1.AppBskyActorDefs.isFeedViewPref(pref) || p.feed !== feed).concat([{
	        ...pref,
	        $type: 'app.bsky.actor.defs#feedViewPref',
	        feed
	      }]);
	    });
	  }
	  async setThreadViewPrefs(pref) {
	    await updatePreferences(this, prefs => {
	      const existing = prefs.findLast(pref => client_1.AppBskyActorDefs.isThreadViewPref(pref) && client_1.AppBskyActorDefs.validateThreadViewPref(pref).success);
	      if (existing) {
	        pref = {
	          ...existing,
	          ...pref
	        };
	      }
	      return prefs.filter(p => !client_1.AppBskyActorDefs.isThreadViewPref(p)).concat([{
	        ...pref,
	        $type: 'app.bsky.actor.defs#threadViewPref'
	      }]);
	    });
	  }
	  async setInterestsPref(pref) {
	    await updatePreferences(this, prefs => {
	      const existing = prefs.findLast(pref => client_1.AppBskyActorDefs.isInterestsPref(pref) && client_1.AppBskyActorDefs.validateInterestsPref(pref).success);
	      if (existing) {
	        pref = {
	          ...existing,
	          ...pref
	        };
	      }
	      return prefs.filter(p => !client_1.AppBskyActorDefs.isInterestsPref(p)).concat([{
	        ...pref,
	        $type: 'app.bsky.actor.defs#interestsPref'
	      }]);
	    });
	  }
	  async upsertMutedWords(newMutedWords) {
	    await updatePreferences(this, prefs => {
	      let mutedWordsPref = prefs.findLast(pref => client_1.AppBskyActorDefs.isMutedWordsPref(pref) && client_1.AppBskyActorDefs.validateMutedWordsPref(pref).success);
	      if (mutedWordsPref && client_1.AppBskyActorDefs.isMutedWordsPref(mutedWordsPref)) {
	        for (const updatedWord of newMutedWords) {
	          let foundMatch = false;
	          const sanitizedUpdatedValue = (0, util_1.sanitizeMutedWordValue)(updatedWord.value);
	          // was trimmed down to an empty string e.g. single `#`
	          if (!sanitizedUpdatedValue) continue;
	          for (const existingItem of mutedWordsPref.items) {
	            if (existingItem.value === sanitizedUpdatedValue) {
	              existingItem.targets = Array.from(new Set([...existingItem.targets, ...updatedWord.targets]));
	              foundMatch = true;
	              break;
	            }
	          }
	          if (!foundMatch) {
	            mutedWordsPref.items.push({
	              ...updatedWord,
	              value: sanitizedUpdatedValue
	            });
	          }
	        }
	      } else {
	        // if the pref doesn't exist, create it
	        mutedWordsPref = {
	          items: newMutedWords.map(w => ({
	            ...w,
	            value: (0, util_1.sanitizeMutedWordValue)(w.value)
	          }))
	        };
	      }
	      return prefs.filter(p => !client_1.AppBskyActorDefs.isMutedWordsPref(p)).concat([{
	        ...mutedWordsPref,
	        $type: 'app.bsky.actor.defs#mutedWordsPref'
	      }]);
	    });
	  }
	  async updateMutedWord(mutedWord) {
	    await updatePreferences(this, prefs => {
	      const mutedWordsPref = prefs.findLast(pref => client_1.AppBskyActorDefs.isMutedWordsPref(pref) && client_1.AppBskyActorDefs.validateMutedWordsPref(pref).success);
	      if (mutedWordsPref && client_1.AppBskyActorDefs.isMutedWordsPref(mutedWordsPref)) {
	        for (const existingItem of mutedWordsPref.items) {
	          if (existingItem.value === mutedWord.value) {
	            existingItem.targets = mutedWord.targets;
	            break;
	          }
	        }
	      }
	      return prefs.filter(p => !client_1.AppBskyActorDefs.isMutedWordsPref(p)).concat([{
	        ...mutedWordsPref,
	        $type: 'app.bsky.actor.defs#mutedWordsPref'
	      }]);
	    });
	  }
	  async removeMutedWord(mutedWord) {
	    await updatePreferences(this, prefs => {
	      const mutedWordsPref = prefs.findLast(pref => client_1.AppBskyActorDefs.isMutedWordsPref(pref) && client_1.AppBskyActorDefs.validateMutedWordsPref(pref).success);
	      if (mutedWordsPref && client_1.AppBskyActorDefs.isMutedWordsPref(mutedWordsPref)) {
	        for (let i = 0; i < mutedWordsPref.items.length; i++) {
	          const existing = mutedWordsPref.items[i];
	          if (existing.value === mutedWord.value) {
	            mutedWordsPref.items.splice(i, 1);
	            break;
	          }
	        }
	      }
	      return prefs.filter(p => !client_1.AppBskyActorDefs.isMutedWordsPref(p)).concat([{
	        ...mutedWordsPref,
	        $type: 'app.bsky.actor.defs#mutedWordsPref'
	      }]);
	    });
	  }
	  async hidePost(postUri) {
	    await updateHiddenPost(this, postUri, 'hide');
	  }
	  async unhidePost(postUri) {
	    await updateHiddenPost(this, postUri, 'unhide');
	  }
	}
	bskyAgent.BskyAgent = BskyAgent;
	/**
	 * This function updates the preferences of a user and allows for a callback function to be executed
	 * before the update.
	 * @param cb - cb is a callback function that takes in a single parameter of type
	 * AppBskyActorDefs.Preferences and returns either a boolean or void. This callback function is used to
	 * update the preferences of the user. The function is called with the current preferences as an
	 * argument and if the callback returns false, the preferences are not updated.
	 */
	async function updatePreferences(agent, cb) {
	  const res = await agent.app.bsky.actor.getPreferences({});
	  const newPrefs = cb(res.data.preferences);
	  if (newPrefs === false) {
	    return res.data.preferences;
	  }
	  await agent.app.bsky.actor.putPreferences({
	    preferences: newPrefs
	  });
	  return newPrefs;
	}
	/**
	 * A helper specifically for updating feed preferences
	 */
	async function updateFeedPreferences(agent, cb) {
	  let res;
	  await updatePreferences(agent, prefs => {
	    let feedsPref = prefs.findLast(pref => client_1.AppBskyActorDefs.isSavedFeedsPref(pref) && client_1.AppBskyActorDefs.validateSavedFeedsPref(pref).success);
	    if (feedsPref) {
	      res = cb(feedsPref.saved, feedsPref.pinned);
	      feedsPref.saved = res.saved;
	      feedsPref.pinned = res.pinned;
	    } else {
	      res = cb([], []);
	      feedsPref = {
	        $type: 'app.bsky.actor.defs#savedFeedsPref',
	        saved: res.saved,
	        pinned: res.pinned
	      };
	    }
	    return prefs.filter(pref => !client_1.AppBskyActorDefs.isSavedFeedsPref(pref)).concat([feedsPref]);
	  });
	  return res;
	}
	async function updateSavedFeedsV2Preferences(agent, cb) {
	  let maybeMutatedSavedFeeds = [];
	  await updatePreferences(agent, prefs => {
	    let existingV2Pref = prefs.findLast(pref => client_1.AppBskyActorDefs.isSavedFeedsPrefV2(pref) && client_1.AppBskyActorDefs.validateSavedFeedsPrefV2(pref).success);
	    let existingV1Pref = prefs.findLast(pref => client_1.AppBskyActorDefs.isSavedFeedsPref(pref) && client_1.AppBskyActorDefs.validateSavedFeedsPref(pref).success);
	    if (existingV2Pref) {
	      maybeMutatedSavedFeeds = cb(existingV2Pref.items);
	      existingV2Pref = {
	        ...existingV2Pref,
	        items: maybeMutatedSavedFeeds
	      };
	    } else {
	      maybeMutatedSavedFeeds = cb([]);
	      existingV2Pref = {
	        $type: 'app.bsky.actor.defs#savedFeedsPrefV2',
	        items: maybeMutatedSavedFeeds
	      };
	    }
	    // enforce ordering, pinned then saved
	    const pinned = existingV2Pref.items.filter(i => i.pinned);
	    const saved = existingV2Pref.items.filter(i => !i.pinned);
	    existingV2Pref.items = pinned.concat(saved);
	    let updatedPrefs = prefs.filter(pref => !client_1.AppBskyActorDefs.isSavedFeedsPrefV2(pref)).concat(existingV2Pref);
	    /*
	     * If there's a v2 pref present, it means this account was migrated from v1
	     * to v2. During the transition period, we double write v2 prefs back to
	     * v1, but NOT the other way around.
	     */
	    if (existingV1Pref) {
	      const {
	        saved,
	        pinned
	      } = existingV1Pref;
	      const v2Compat = (0, util_1.savedFeedsToUriArrays)(
	      // v1 only supports feeds and lists
	      existingV2Pref.items.filter(i => ['feed', 'list'].includes(i.type)));
	      existingV1Pref = {
	        ...existingV1Pref,
	        saved: Array.from(new Set([...saved, ...v2Compat.saved])),
	        pinned: Array.from(new Set([...pinned, ...v2Compat.pinned]))
	      };
	      updatedPrefs = updatedPrefs.filter(pref => !client_1.AppBskyActorDefs.isSavedFeedsPref(pref)).concat(existingV1Pref);
	    }
	    return updatedPrefs;
	  });
	  return maybeMutatedSavedFeeds;
	}
	/**
	 * Helper to transform the legacy content preferences.
	 */
	function adjustLegacyContentLabelPref(pref) {
	  let visibility = pref.visibility;
	  // adjust legacy values
	  if (visibility === 'show') {
	    visibility = 'ignore';
	  }
	  return {
	    ...pref,
	    visibility
	  };
	}
	/**
	 * Re-maps legacy labels to new labels on READ. Does not save these changes to
	 * the user's preferences.
	 */
	function remapLegacyLabels(labels) {
	  const _labels = {
	    ...labels
	  };
	  const legacyToNewMap = {
	    gore: 'graphic-media',
	    nsfw: 'porn',
	    suggestive: 'sexual'
	  };
	  for (const labelName in _labels) {
	    const newLabelName = legacyToNewMap[labelName];
	    if (newLabelName) {
	      _labels[newLabelName] = _labels[labelName];
	    }
	  }
	  return _labels;
	}
	/**
	 * A helper to get the currently enabled labelers from the full preferences array
	 */
	function prefsArrayToLabelerDids(prefs) {
	  const labelersPref = prefs.findLast(pref => client_1.AppBskyActorDefs.isLabelersPref(pref) && client_1.AppBskyActorDefs.validateLabelersPref(pref).success);
	  let dids = [];
	  if (labelersPref) {
	    dids = labelersPref.labelers.map(labeler => labeler.did);
	  }
	  return dids;
	}
	async function updateHiddenPost(agent, postUri, action) {
	  await updatePreferences(agent, prefs => {
	    let pref = prefs.findLast(pref => client_1.AppBskyActorDefs.isHiddenPostsPref(pref) && client_1.AppBskyActorDefs.validateHiddenPostsPref(pref).success);
	    if (pref && client_1.AppBskyActorDefs.isHiddenPostsPref(pref)) {
	      pref.items = action === 'hide' ? Array.from(new Set([...pref.items, postUri])) : pref.items.filter(uri => uri !== postUri);
	    } else {
	      if (action === 'hide') {
	        pref = {
	          $type: 'app.bsky.actor.defs#hiddenPostsPref',
	          items: [postUri]
	        };
	      }
	    }
	    return prefs.filter(p => !client_1.AppBskyActorDefs.isInterestsPref(p)).concat([{
	      ...pref,
	      $type: 'app.bsky.actor.defs#hiddenPostsPref'
	    }]);
	  });
	}
	function isBskyPrefs(v) {
	  return v && typeof v === 'object' && 'moderationPrefs' in v && isModPrefs(v.moderationPrefs);
	}
	function isModPrefs(v) {
	  return v && typeof v === 'object' && 'labelers' in v;
	}

	(function (exports) {

	  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = {
	        enumerable: true,
	        get: function () {
	          return m[k];
	        }
	      };
	    }
	    Object.defineProperty(o, k2, desc);
	  } : function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	  });
	  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function (m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	  };
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.default = exports.BskyAgent = exports.DEFAULT_LABEL_SETTINGS = exports.LABELS = exports.parseLanguage = exports.jsonStringToLex = exports.jsonToLex = exports.stringifyLex = exports.lexToJson = exports.BlobRef = exports.AtUri = void 0;
	  var syntax_1 = dist$4;
	  Object.defineProperty(exports, "AtUri", {
	    enumerable: true,
	    get: function () {
	      return syntax_1.AtUri;
	    }
	  });
	  var lexicon_1 = dist$3;
	  Object.defineProperty(exports, "BlobRef", {
	    enumerable: true,
	    get: function () {
	      return lexicon_1.BlobRef;
	    }
	  });
	  Object.defineProperty(exports, "lexToJson", {
	    enumerable: true,
	    get: function () {
	      return lexicon_1.lexToJson;
	    }
	  });
	  Object.defineProperty(exports, "stringifyLex", {
	    enumerable: true,
	    get: function () {
	      return lexicon_1.stringifyLex;
	    }
	  });
	  Object.defineProperty(exports, "jsonToLex", {
	    enumerable: true,
	    get: function () {
	      return lexicon_1.jsonToLex;
	    }
	  });
	  Object.defineProperty(exports, "jsonStringToLex", {
	    enumerable: true,
	    get: function () {
	      return lexicon_1.jsonStringToLex;
	    }
	  });
	  var common_web_1 = dist$2;
	  Object.defineProperty(exports, "parseLanguage", {
	    enumerable: true,
	    get: function () {
	      return common_web_1.parseLanguage;
	    }
	  });
	  __exportStar(types$2, exports);
	  __exportStar(_const, exports);
	  __exportStar(util$4, exports);
	  __exportStar(client$1, exports);
	  __exportStar(agent, exports);
	  __exportStar(richText, exports);
	  __exportStar(sanitization, exports);
	  __exportStar(unicode, exports);
	  __exportStar(util$1, exports);
	  __exportStar(moderation, exports);
	  __exportStar(types, exports);
	  __exportStar(mocker, exports);
	  var labels_1 = labels;
	  Object.defineProperty(exports, "LABELS", {
	    enumerable: true,
	    get: function () {
	      return labels_1.LABELS;
	    }
	  });
	  Object.defineProperty(exports, "DEFAULT_LABEL_SETTINGS", {
	    enumerable: true,
	    get: function () {
	      return labels_1.DEFAULT_LABEL_SETTINGS;
	    }
	  });
	  var bsky_agent_1 = bskyAgent;
	  Object.defineProperty(exports, "BskyAgent", {
	    enumerable: true,
	    get: function () {
	      return bsky_agent_1.BskyAgent;
	    }
	  });
	  var agent_1 = agent;
	  Object.defineProperty(exports, "default", {
	    enumerable: true,
	    get: function () {
	      return agent_1.AtpAgent;
	    }
	  });
	})(dist$5);
	var index = /*@__PURE__*/getDefaultExportFromCjs(dist$5);

	var atproto_api = /*#__PURE__*/_mergeNamespaces({
		__proto__: null,
		default: index
	}, [dist$5]);

	/**
	 * Fuse.js v6.6.2 - Lightweight fuzzy-search (http://fusejs.io)
	 *
	 * Copyright (c) 2022 Kiro Risk (http://kiro.me)
	 * All Rights Reserved. Apache Software License 2.0
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 */

	function isArray(value) {
	  return !Array.isArray ? getTag(value) === '[object Array]' : Array.isArray(value);
	}

	// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js
	const INFINITY = 1 / 0;
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  let result = value + '';
	  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
	}
	function toString(value) {
	  return value == null ? '' : baseToString(value);
	}
	function isString(value) {
	  return typeof value === 'string';
	}
	function isNumber(value) {
	  return typeof value === 'number';
	}

	// Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js
	function isBoolean(value) {
	  return value === true || value === false || isObjectLike(value) && getTag(value) == '[object Boolean]';
	}
	function isObject(value) {
	  return typeof value === 'object';
	}

	// Checks if `value` is object-like.
	function isObjectLike(value) {
	  return isObject(value) && value !== null;
	}
	function isDefined(value) {
	  return value !== undefined && value !== null;
	}
	function isBlank(value) {
	  return !value.trim().length;
	}

	// Gets the `toStringTag` of `value`.
	// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js
	function getTag(value) {
	  return value == null ? value === undefined ? '[object Undefined]' : '[object Null]' : Object.prototype.toString.call(value);
	}
	const EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';
	const INCORRECT_INDEX_TYPE = "Incorrect 'index' type";
	const LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = key => `Invalid value for key ${key}`;
	const PATTERN_LENGTH_TOO_LARGE = max => `Pattern length exceeds max of ${max}.`;
	const MISSING_KEY_PROPERTY = name => `Missing ${name} property in key`;
	const INVALID_KEY_WEIGHT_VALUE = key => `Property 'weight' in key '${key}' must be a positive integer`;
	const hasOwn = Object.prototype.hasOwnProperty;
	class KeyStore {
	  constructor(keys) {
	    this._keys = [];
	    this._keyMap = {};
	    let totalWeight = 0;
	    keys.forEach(key => {
	      let obj = createKey(key);
	      totalWeight += obj.weight;
	      this._keys.push(obj);
	      this._keyMap[obj.id] = obj;
	      totalWeight += obj.weight;
	    });

	    // Normalize weights so that their sum is equal to 1
	    this._keys.forEach(key => {
	      key.weight /= totalWeight;
	    });
	  }
	  get(keyId) {
	    return this._keyMap[keyId];
	  }
	  keys() {
	    return this._keys;
	  }
	  toJSON() {
	    return JSON.stringify(this._keys);
	  }
	}
	function createKey(key) {
	  let path = null;
	  let id = null;
	  let src = null;
	  let weight = 1;
	  let getFn = null;
	  if (isString(key) || isArray(key)) {
	    src = key;
	    path = createKeyPath(key);
	    id = createKeyId(key);
	  } else {
	    if (!hasOwn.call(key, 'name')) {
	      throw new Error(MISSING_KEY_PROPERTY('name'));
	    }
	    const name = key.name;
	    src = name;
	    if (hasOwn.call(key, 'weight')) {
	      weight = key.weight;
	      if (weight <= 0) {
	        throw new Error(INVALID_KEY_WEIGHT_VALUE(name));
	      }
	    }
	    path = createKeyPath(name);
	    id = createKeyId(name);
	    getFn = key.getFn;
	  }
	  return {
	    path,
	    id,
	    weight,
	    src,
	    getFn
	  };
	}
	function createKeyPath(key) {
	  return isArray(key) ? key : key.split('.');
	}
	function createKeyId(key) {
	  return isArray(key) ? key.join('.') : key;
	}
	function get(obj, path) {
	  let list = [];
	  let arr = false;
	  const deepGet = (obj, path, index) => {
	    if (!isDefined(obj)) {
	      return;
	    }
	    if (!path[index]) {
	      // If there's no path left, we've arrived at the object we care about.
	      list.push(obj);
	    } else {
	      let key = path[index];
	      const value = obj[key];
	      if (!isDefined(value)) {
	        return;
	      }

	      // If we're at the last value in the path, and if it's a string/number/bool,
	      // add it to the list
	      if (index === path.length - 1 && (isString(value) || isNumber(value) || isBoolean(value))) {
	        list.push(toString(value));
	      } else if (isArray(value)) {
	        arr = true;
	        // Search each item in the array.
	        for (let i = 0, len = value.length; i < len; i += 1) {
	          deepGet(value[i], path, index + 1);
	        }
	      } else if (path.length) {
	        // An object. Recurse further.
	        deepGet(value, path, index + 1);
	      }
	    }
	  };

	  // Backwards compatibility (since path used to be a string)
	  deepGet(obj, isString(path) ? path.split('.') : path, 0);
	  return arr ? list : list[0];
	}
	const MatchOptions = {
	  // Whether the matches should be included in the result set. When `true`, each record in the result
	  // set will include the indices of the matched characters.
	  // These can consequently be used for highlighting purposes.
	  includeMatches: false,
	  // When `true`, the matching function will continue to the end of a search pattern even if
	  // a perfect match has already been located in the string.
	  findAllMatches: false,
	  // Minimum number of characters that must be matched before a result is considered a match
	  minMatchCharLength: 1
	};
	const BasicOptions = {
	  // When `true`, the algorithm continues searching to the end of the input even if a perfect
	  // match is found before the end of the same input.
	  isCaseSensitive: false,
	  // When true, the matching function will continue to the end of a search pattern even if
	  includeScore: false,
	  // List of properties that will be searched. This also supports nested properties.
	  keys: [],
	  // Whether to sort the result list, by score
	  shouldSort: true,
	  // Default sort function: sort by ascending score, ascending index
	  sortFn: (a, b) => a.score === b.score ? a.idx < b.idx ? -1 : 1 : a.score < b.score ? -1 : 1
	};
	const FuzzyOptions = {
	  // Approximately where in the text is the pattern expected to be found?
	  location: 0,
	  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match
	  // (of both letters and location), a threshold of '1.0' would match anything.
	  threshold: 0.6,
	  // Determines how close the match must be to the fuzzy location (specified above).
	  // An exact letter match which is 'distance' characters away from the fuzzy location
	  // would score as a complete mismatch. A distance of '0' requires the match be at
	  // the exact location specified, a threshold of '1000' would require a perfect match
	  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.
	  distance: 100
	};
	const AdvancedOptions = {
	  // When `true`, it enables the use of unix-like search commands
	  useExtendedSearch: false,
	  // The get function to use when fetching an object's properties.
	  // The default will search nested paths *ie foo.bar.baz*
	  getFn: get,
	  // When `true`, search will ignore `location` and `distance`, so it won't matter
	  // where in the string the pattern appears.
	  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score
	  ignoreLocation: false,
	  // When `true`, the calculation for the relevance score (used for sorting) will
	  // ignore the field-length norm.
	  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm
	  ignoreFieldNorm: false,
	  // The weight to determine how much field length norm effects scoring.
	  fieldNormWeight: 1
	};
	var Config = {
	  ...BasicOptions,
	  ...MatchOptions,
	  ...FuzzyOptions,
	  ...AdvancedOptions
	};
	const SPACE = /[^ ]+/g;

	// Field-length norm: the shorter the field, the higher the weight.
	// Set to 3 decimals to reduce index size.
	function norm(weight = 1, mantissa = 3) {
	  const cache = new Map();
	  const m = Math.pow(10, mantissa);
	  return {
	    get(value) {
	      const numTokens = value.match(SPACE).length;
	      if (cache.has(numTokens)) {
	        return cache.get(numTokens);
	      }

	      // Default function is 1/sqrt(x), weight makes that variable
	      const norm = 1 / Math.pow(numTokens, 0.5 * weight);

	      // In place of `toFixed(mantissa)`, for faster computation
	      const n = parseFloat(Math.round(norm * m) / m);
	      cache.set(numTokens, n);
	      return n;
	    },
	    clear() {
	      cache.clear();
	    }
	  };
	}
	class FuseIndex {
	  constructor({
	    getFn = Config.getFn,
	    fieldNormWeight = Config.fieldNormWeight
	  } = {}) {
	    this.norm = norm(fieldNormWeight, 3);
	    this.getFn = getFn;
	    this.isCreated = false;
	    this.setIndexRecords();
	  }
	  setSources(docs = []) {
	    this.docs = docs;
	  }
	  setIndexRecords(records = []) {
	    this.records = records;
	  }
	  setKeys(keys = []) {
	    this.keys = keys;
	    this._keysMap = {};
	    keys.forEach((key, idx) => {
	      this._keysMap[key.id] = idx;
	    });
	  }
	  create() {
	    if (this.isCreated || !this.docs.length) {
	      return;
	    }
	    this.isCreated = true;

	    // List is Array<String>
	    if (isString(this.docs[0])) {
	      this.docs.forEach((doc, docIndex) => {
	        this._addString(doc, docIndex);
	      });
	    } else {
	      // List is Array<Object>
	      this.docs.forEach((doc, docIndex) => {
	        this._addObject(doc, docIndex);
	      });
	    }
	    this.norm.clear();
	  }
	  // Adds a doc to the end of the index
	  add(doc) {
	    const idx = this.size();
	    if (isString(doc)) {
	      this._addString(doc, idx);
	    } else {
	      this._addObject(doc, idx);
	    }
	  }
	  // Removes the doc at the specified index of the index
	  removeAt(idx) {
	    this.records.splice(idx, 1);

	    // Change ref index of every subsquent doc
	    for (let i = idx, len = this.size(); i < len; i += 1) {
	      this.records[i].i -= 1;
	    }
	  }
	  getValueForItemAtKeyId(item, keyId) {
	    return item[this._keysMap[keyId]];
	  }
	  size() {
	    return this.records.length;
	  }
	  _addString(doc, docIndex) {
	    if (!isDefined(doc) || isBlank(doc)) {
	      return;
	    }
	    let record = {
	      v: doc,
	      i: docIndex,
	      n: this.norm.get(doc)
	    };
	    this.records.push(record);
	  }
	  _addObject(doc, docIndex) {
	    let record = {
	      i: docIndex,
	      $: {}
	    };

	    // Iterate over every key (i.e, path), and fetch the value at that key
	    this.keys.forEach((key, keyIndex) => {
	      let value = key.getFn ? key.getFn(doc) : this.getFn(doc, key.path);
	      if (!isDefined(value)) {
	        return;
	      }
	      if (isArray(value)) {
	        let subRecords = [];
	        const stack = [{
	          nestedArrIndex: -1,
	          value
	        }];
	        while (stack.length) {
	          const {
	            nestedArrIndex,
	            value
	          } = stack.pop();
	          if (!isDefined(value)) {
	            continue;
	          }
	          if (isString(value) && !isBlank(value)) {
	            let subRecord = {
	              v: value,
	              i: nestedArrIndex,
	              n: this.norm.get(value)
	            };
	            subRecords.push(subRecord);
	          } else if (isArray(value)) {
	            value.forEach((item, k) => {
	              stack.push({
	                nestedArrIndex: k,
	                value: item
	              });
	            });
	          } else ;
	        }
	        record.$[keyIndex] = subRecords;
	      } else if (isString(value) && !isBlank(value)) {
	        let subRecord = {
	          v: value,
	          n: this.norm.get(value)
	        };
	        record.$[keyIndex] = subRecord;
	      }
	    });
	    this.records.push(record);
	  }
	  toJSON() {
	    return {
	      keys: this.keys,
	      records: this.records
	    };
	  }
	}
	function createIndex(keys, docs, {
	  getFn = Config.getFn,
	  fieldNormWeight = Config.fieldNormWeight
	} = {}) {
	  const myIndex = new FuseIndex({
	    getFn,
	    fieldNormWeight
	  });
	  myIndex.setKeys(keys.map(createKey));
	  myIndex.setSources(docs);
	  myIndex.create();
	  return myIndex;
	}
	function parseIndex(data, {
	  getFn = Config.getFn,
	  fieldNormWeight = Config.fieldNormWeight
	} = {}) {
	  const {
	    keys,
	    records
	  } = data;
	  const myIndex = new FuseIndex({
	    getFn,
	    fieldNormWeight
	  });
	  myIndex.setKeys(keys);
	  myIndex.setIndexRecords(records);
	  return myIndex;
	}
	function computeScore$1(pattern, {
	  errors = 0,
	  currentLocation = 0,
	  expectedLocation = 0,
	  distance = Config.distance,
	  ignoreLocation = Config.ignoreLocation
	} = {}) {
	  const accuracy = errors / pattern.length;
	  if (ignoreLocation) {
	    return accuracy;
	  }
	  const proximity = Math.abs(expectedLocation - currentLocation);
	  if (!distance) {
	    // Dodge divide by zero error.
	    return proximity ? 1.0 : accuracy;
	  }
	  return accuracy + proximity / distance;
	}
	function convertMaskToIndices(matchmask = [], minMatchCharLength = Config.minMatchCharLength) {
	  let indices = [];
	  let start = -1;
	  let end = -1;
	  let i = 0;
	  for (let len = matchmask.length; i < len; i += 1) {
	    let match = matchmask[i];
	    if (match && start === -1) {
	      start = i;
	    } else if (!match && start !== -1) {
	      end = i - 1;
	      if (end - start + 1 >= minMatchCharLength) {
	        indices.push([start, end]);
	      }
	      start = -1;
	    }
	  }

	  // (i-1 - start) + 1 => i - start
	  if (matchmask[i - 1] && i - start >= minMatchCharLength) {
	    indices.push([start, i - 1]);
	  }
	  return indices;
	}

	// Machine word size
	const MAX_BITS = 32;
	function search(text, pattern, patternAlphabet, {
	  location = Config.location,
	  distance = Config.distance,
	  threshold = Config.threshold,
	  findAllMatches = Config.findAllMatches,
	  minMatchCharLength = Config.minMatchCharLength,
	  includeMatches = Config.includeMatches,
	  ignoreLocation = Config.ignoreLocation
	} = {}) {
	  if (pattern.length > MAX_BITS) {
	    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS));
	  }
	  const patternLen = pattern.length;
	  // Set starting location at beginning text and initialize the alphabet.
	  const textLen = text.length;
	  // Handle the case when location > text.length
	  const expectedLocation = Math.max(0, Math.min(location, textLen));
	  // Highest score beyond which we give up.
	  let currentThreshold = threshold;
	  // Is there a nearby exact match? (speedup)
	  let bestLocation = expectedLocation;

	  // Performance: only computer matches when the minMatchCharLength > 1
	  // OR if `includeMatches` is true.
	  const computeMatches = minMatchCharLength > 1 || includeMatches;
	  // A mask of the matches, used for building the indices
	  const matchMask = computeMatches ? Array(textLen) : [];
	  let index;

	  // Get all exact matches, here for speed up
	  while ((index = text.indexOf(pattern, bestLocation)) > -1) {
	    let score = computeScore$1(pattern, {
	      currentLocation: index,
	      expectedLocation,
	      distance,
	      ignoreLocation
	    });
	    currentThreshold = Math.min(score, currentThreshold);
	    bestLocation = index + patternLen;
	    if (computeMatches) {
	      let i = 0;
	      while (i < patternLen) {
	        matchMask[index + i] = 1;
	        i += 1;
	      }
	    }
	  }

	  // Reset the best location
	  bestLocation = -1;
	  let lastBitArr = [];
	  let finalScore = 1;
	  let binMax = patternLen + textLen;
	  const mask = 1 << patternLen - 1;
	  for (let i = 0; i < patternLen; i += 1) {
	    // Scan for the best match; each iteration allows for one more error.
	    // Run a binary search to determine how far from the match location we can stray
	    // at this error level.
	    let binMin = 0;
	    let binMid = binMax;
	    while (binMin < binMid) {
	      const score = computeScore$1(pattern, {
	        errors: i,
	        currentLocation: expectedLocation + binMid,
	        expectedLocation,
	        distance,
	        ignoreLocation
	      });
	      if (score <= currentThreshold) {
	        binMin = binMid;
	      } else {
	        binMax = binMid;
	      }
	      binMid = Math.floor((binMax - binMin) / 2 + binMin);
	    }

	    // Use the result from this iteration as the maximum for the next.
	    binMax = binMid;
	    let start = Math.max(1, expectedLocation - binMid + 1);
	    let finish = findAllMatches ? textLen : Math.min(expectedLocation + binMid, textLen) + patternLen;

	    // Initialize the bit array
	    let bitArr = Array(finish + 2);
	    bitArr[finish + 1] = (1 << i) - 1;
	    for (let j = finish; j >= start; j -= 1) {
	      let currentLocation = j - 1;
	      let charMatch = patternAlphabet[text.charAt(currentLocation)];
	      if (computeMatches) {
	        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)
	        matchMask[currentLocation] = +!!charMatch;
	      }

	      // First pass: exact match
	      bitArr[j] = (bitArr[j + 1] << 1 | 1) & charMatch;

	      // Subsequent passes: fuzzy match
	      if (i) {
	        bitArr[j] |= (lastBitArr[j + 1] | lastBitArr[j]) << 1 | 1 | lastBitArr[j + 1];
	      }
	      if (bitArr[j] & mask) {
	        finalScore = computeScore$1(pattern, {
	          errors: i,
	          currentLocation,
	          expectedLocation,
	          distance,
	          ignoreLocation
	        });

	        // This match will almost certainly be better than any existing match.
	        // But check anyway.
	        if (finalScore <= currentThreshold) {
	          // Indeed it is
	          currentThreshold = finalScore;
	          bestLocation = currentLocation;

	          // Already passed `loc`, downhill from here on in.
	          if (bestLocation <= expectedLocation) {
	            break;
	          }

	          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.
	          start = Math.max(1, 2 * expectedLocation - bestLocation);
	        }
	      }
	    }

	    // No hope for a (better) match at greater error levels.
	    const score = computeScore$1(pattern, {
	      errors: i + 1,
	      currentLocation: expectedLocation,
	      expectedLocation,
	      distance,
	      ignoreLocation
	    });
	    if (score > currentThreshold) {
	      break;
	    }
	    lastBitArr = bitArr;
	  }
	  const result = {
	    isMatch: bestLocation >= 0,
	    // Count exact matches (those with a score of 0) to be "almost" exact
	    score: Math.max(0.001, finalScore)
	  };
	  if (computeMatches) {
	    const indices = convertMaskToIndices(matchMask, minMatchCharLength);
	    if (!indices.length) {
	      result.isMatch = false;
	    } else if (includeMatches) {
	      result.indices = indices;
	    }
	  }
	  return result;
	}
	function createPatternAlphabet(pattern) {
	  let mask = {};
	  for (let i = 0, len = pattern.length; i < len; i += 1) {
	    const char = pattern.charAt(i);
	    mask[char] = (mask[char] || 0) | 1 << len - i - 1;
	  }
	  return mask;
	}
	class BitapSearch {
	  constructor(pattern, {
	    location = Config.location,
	    threshold = Config.threshold,
	    distance = Config.distance,
	    includeMatches = Config.includeMatches,
	    findAllMatches = Config.findAllMatches,
	    minMatchCharLength = Config.minMatchCharLength,
	    isCaseSensitive = Config.isCaseSensitive,
	    ignoreLocation = Config.ignoreLocation
	  } = {}) {
	    this.options = {
	      location,
	      threshold,
	      distance,
	      includeMatches,
	      findAllMatches,
	      minMatchCharLength,
	      isCaseSensitive,
	      ignoreLocation
	    };
	    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();
	    this.chunks = [];
	    if (!this.pattern.length) {
	      return;
	    }
	    const addChunk = (pattern, startIndex) => {
	      this.chunks.push({
	        pattern,
	        alphabet: createPatternAlphabet(pattern),
	        startIndex
	      });
	    };
	    const len = this.pattern.length;
	    if (len > MAX_BITS) {
	      let i = 0;
	      const remainder = len % MAX_BITS;
	      const end = len - remainder;
	      while (i < end) {
	        addChunk(this.pattern.substr(i, MAX_BITS), i);
	        i += MAX_BITS;
	      }
	      if (remainder) {
	        const startIndex = len - MAX_BITS;
	        addChunk(this.pattern.substr(startIndex), startIndex);
	      }
	    } else {
	      addChunk(this.pattern, 0);
	    }
	  }
	  searchIn(text) {
	    const {
	      isCaseSensitive,
	      includeMatches
	    } = this.options;
	    if (!isCaseSensitive) {
	      text = text.toLowerCase();
	    }

	    // Exact match
	    if (this.pattern === text) {
	      let result = {
	        isMatch: true,
	        score: 0
	      };
	      if (includeMatches) {
	        result.indices = [[0, text.length - 1]];
	      }
	      return result;
	    }

	    // Otherwise, use Bitap algorithm
	    const {
	      location,
	      distance,
	      threshold,
	      findAllMatches,
	      minMatchCharLength,
	      ignoreLocation
	    } = this.options;
	    let allIndices = [];
	    let totalScore = 0;
	    let hasMatches = false;
	    this.chunks.forEach(({
	      pattern,
	      alphabet,
	      startIndex
	    }) => {
	      const {
	        isMatch,
	        score,
	        indices
	      } = search(text, pattern, alphabet, {
	        location: location + startIndex,
	        distance,
	        threshold,
	        findAllMatches,
	        minMatchCharLength,
	        includeMatches,
	        ignoreLocation
	      });
	      if (isMatch) {
	        hasMatches = true;
	      }
	      totalScore += score;
	      if (isMatch && indices) {
	        allIndices = [...allIndices, ...indices];
	      }
	    });
	    let result = {
	      isMatch: hasMatches,
	      score: hasMatches ? totalScore / this.chunks.length : 1
	    };
	    if (hasMatches && includeMatches) {
	      result.indices = allIndices;
	    }
	    return result;
	  }
	}
	class BaseMatch {
	  constructor(pattern) {
	    this.pattern = pattern;
	  }
	  static isMultiMatch(pattern) {
	    return getMatch(pattern, this.multiRegex);
	  }
	  static isSingleMatch(pattern) {
	    return getMatch(pattern, this.singleRegex);
	  }
	  search( /*text*/) {}
	}
	function getMatch(pattern, exp) {
	  const matches = pattern.match(exp);
	  return matches ? matches[1] : null;
	}

	// Token: 'file

	class ExactMatch extends BaseMatch {
	  constructor(pattern) {
	    super(pattern);
	  }
	  static get type() {
	    return 'exact';
	  }
	  static get multiRegex() {
	    return /^="(.*)"$/;
	  }
	  static get singleRegex() {
	    return /^=(.*)$/;
	  }
	  search(text) {
	    const isMatch = text === this.pattern;
	    return {
	      isMatch,
	      score: isMatch ? 0 : 1,
	      indices: [0, this.pattern.length - 1]
	    };
	  }
	}

	// Token: !fire

	class InverseExactMatch extends BaseMatch {
	  constructor(pattern) {
	    super(pattern);
	  }
	  static get type() {
	    return 'inverse-exact';
	  }
	  static get multiRegex() {
	    return /^!"(.*)"$/;
	  }
	  static get singleRegex() {
	    return /^!(.*)$/;
	  }
	  search(text) {
	    const index = text.indexOf(this.pattern);
	    const isMatch = index === -1;
	    return {
	      isMatch,
	      score: isMatch ? 0 : 1,
	      indices: [0, text.length - 1]
	    };
	  }
	}

	// Token: ^file

	class PrefixExactMatch extends BaseMatch {
	  constructor(pattern) {
	    super(pattern);
	  }
	  static get type() {
	    return 'prefix-exact';
	  }
	  static get multiRegex() {
	    return /^\^"(.*)"$/;
	  }
	  static get singleRegex() {
	    return /^\^(.*)$/;
	  }
	  search(text) {
	    const isMatch = text.startsWith(this.pattern);
	    return {
	      isMatch,
	      score: isMatch ? 0 : 1,
	      indices: [0, this.pattern.length - 1]
	    };
	  }
	}

	// Token: !^fire

	class InversePrefixExactMatch extends BaseMatch {
	  constructor(pattern) {
	    super(pattern);
	  }
	  static get type() {
	    return 'inverse-prefix-exact';
	  }
	  static get multiRegex() {
	    return /^!\^"(.*)"$/;
	  }
	  static get singleRegex() {
	    return /^!\^(.*)$/;
	  }
	  search(text) {
	    const isMatch = !text.startsWith(this.pattern);
	    return {
	      isMatch,
	      score: isMatch ? 0 : 1,
	      indices: [0, text.length - 1]
	    };
	  }
	}

	// Token: .file$

	class SuffixExactMatch extends BaseMatch {
	  constructor(pattern) {
	    super(pattern);
	  }
	  static get type() {
	    return 'suffix-exact';
	  }
	  static get multiRegex() {
	    return /^"(.*)"\$$/;
	  }
	  static get singleRegex() {
	    return /^(.*)\$$/;
	  }
	  search(text) {
	    const isMatch = text.endsWith(this.pattern);
	    return {
	      isMatch,
	      score: isMatch ? 0 : 1,
	      indices: [text.length - this.pattern.length, text.length - 1]
	    };
	  }
	}

	// Token: !.file$

	class InverseSuffixExactMatch extends BaseMatch {
	  constructor(pattern) {
	    super(pattern);
	  }
	  static get type() {
	    return 'inverse-suffix-exact';
	  }
	  static get multiRegex() {
	    return /^!"(.*)"\$$/;
	  }
	  static get singleRegex() {
	    return /^!(.*)\$$/;
	  }
	  search(text) {
	    const isMatch = !text.endsWith(this.pattern);
	    return {
	      isMatch,
	      score: isMatch ? 0 : 1,
	      indices: [0, text.length - 1]
	    };
	  }
	}
	class FuzzyMatch extends BaseMatch {
	  constructor(pattern, {
	    location = Config.location,
	    threshold = Config.threshold,
	    distance = Config.distance,
	    includeMatches = Config.includeMatches,
	    findAllMatches = Config.findAllMatches,
	    minMatchCharLength = Config.minMatchCharLength,
	    isCaseSensitive = Config.isCaseSensitive,
	    ignoreLocation = Config.ignoreLocation
	  } = {}) {
	    super(pattern);
	    this._bitapSearch = new BitapSearch(pattern, {
	      location,
	      threshold,
	      distance,
	      includeMatches,
	      findAllMatches,
	      minMatchCharLength,
	      isCaseSensitive,
	      ignoreLocation
	    });
	  }
	  static get type() {
	    return 'fuzzy';
	  }
	  static get multiRegex() {
	    return /^"(.*)"$/;
	  }
	  static get singleRegex() {
	    return /^(.*)$/;
	  }
	  search(text) {
	    return this._bitapSearch.searchIn(text);
	  }
	}

	// Token: 'file

	class IncludeMatch extends BaseMatch {
	  constructor(pattern) {
	    super(pattern);
	  }
	  static get type() {
	    return 'include';
	  }
	  static get multiRegex() {
	    return /^'"(.*)"$/;
	  }
	  static get singleRegex() {
	    return /^'(.*)$/;
	  }
	  search(text) {
	    let location = 0;
	    let index;
	    const indices = [];
	    const patternLen = this.pattern.length;

	    // Get all exact matches
	    while ((index = text.indexOf(this.pattern, location)) > -1) {
	      location = index + patternLen;
	      indices.push([index, location - 1]);
	    }
	    const isMatch = !!indices.length;
	    return {
	      isMatch,
	      score: isMatch ? 0 : 1,
	      indices
	    };
	  }
	}

	// ❗Order is important. DO NOT CHANGE.
	const searchers = [ExactMatch, IncludeMatch, PrefixExactMatch, InversePrefixExactMatch, InverseSuffixExactMatch, SuffixExactMatch, InverseExactMatch, FuzzyMatch];
	const searchersLen = searchers.length;

	// Regex to split by spaces, but keep anything in quotes together
	const SPACE_RE = / +(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/;
	const OR_TOKEN = '|';

	// Return a 2D array representation of the query, for simpler parsing.
	// Example:
	// "^core go$ | rb$ | py$ xy$" => [["^core", "go$"], ["rb$"], ["py$", "xy$"]]
	function parseQuery(pattern, options = {}) {
	  return pattern.split(OR_TOKEN).map(item => {
	    let query = item.trim().split(SPACE_RE).filter(item => item && !!item.trim());
	    let results = [];
	    for (let i = 0, len = query.length; i < len; i += 1) {
	      const queryItem = query[i];

	      // 1. Handle multiple query match (i.e, once that are quoted, like `"hello world"`)
	      let found = false;
	      let idx = -1;
	      while (!found && ++idx < searchersLen) {
	        const searcher = searchers[idx];
	        let token = searcher.isMultiMatch(queryItem);
	        if (token) {
	          results.push(new searcher(token, options));
	          found = true;
	        }
	      }
	      if (found) {
	        continue;
	      }

	      // 2. Handle single query matches (i.e, once that are *not* quoted)
	      idx = -1;
	      while (++idx < searchersLen) {
	        const searcher = searchers[idx];
	        let token = searcher.isSingleMatch(queryItem);
	        if (token) {
	          results.push(new searcher(token, options));
	          break;
	        }
	      }
	    }
	    return results;
	  });
	}

	// These extended matchers can return an array of matches, as opposed
	// to a singl match
	const MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);

	/**
	 * Command-like searching
	 * ======================
	 *
	 * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,
	 * search in a given text.
	 *
	 * Search syntax:
	 *
	 * | Token       | Match type                 | Description                            |
	 * | ----------- | -------------------------- | -------------------------------------- |
	 * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |
	 * | `=scheme`   | exact-match                | Items that are `scheme`                |
	 * | `'python`   | include-match              | Items that include `python`            |
	 * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |
	 * | `^java`     | prefix-exact-match         | Items that start with `java`           |
	 * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |
	 * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |
	 * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |
	 *
	 * A single pipe character acts as an OR operator. For example, the following
	 * query matches entries that start with `core` and end with either`go`, `rb`,
	 * or`py`.
	 *
	 * ```
	 * ^core go$ | rb$ | py$
	 * ```
	 */
	class ExtendedSearch {
	  constructor(pattern, {
	    isCaseSensitive = Config.isCaseSensitive,
	    includeMatches = Config.includeMatches,
	    minMatchCharLength = Config.minMatchCharLength,
	    ignoreLocation = Config.ignoreLocation,
	    findAllMatches = Config.findAllMatches,
	    location = Config.location,
	    threshold = Config.threshold,
	    distance = Config.distance
	  } = {}) {
	    this.query = null;
	    this.options = {
	      isCaseSensitive,
	      includeMatches,
	      minMatchCharLength,
	      findAllMatches,
	      ignoreLocation,
	      location,
	      threshold,
	      distance
	    };
	    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();
	    this.query = parseQuery(this.pattern, this.options);
	  }
	  static condition(_, options) {
	    return options.useExtendedSearch;
	  }
	  searchIn(text) {
	    const query = this.query;
	    if (!query) {
	      return {
	        isMatch: false,
	        score: 1
	      };
	    }
	    const {
	      includeMatches,
	      isCaseSensitive
	    } = this.options;
	    text = isCaseSensitive ? text : text.toLowerCase();
	    let numMatches = 0;
	    let allIndices = [];
	    let totalScore = 0;

	    // ORs
	    for (let i = 0, qLen = query.length; i < qLen; i += 1) {
	      const searchers = query[i];

	      // Reset indices
	      allIndices.length = 0;
	      numMatches = 0;

	      // ANDs
	      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {
	        const searcher = searchers[j];
	        const {
	          isMatch,
	          indices,
	          score
	        } = searcher.search(text);
	        if (isMatch) {
	          numMatches += 1;
	          totalScore += score;
	          if (includeMatches) {
	            const type = searcher.constructor.type;
	            if (MultiMatchSet.has(type)) {
	              allIndices = [...allIndices, ...indices];
	            } else {
	              allIndices.push(indices);
	            }
	          }
	        } else {
	          totalScore = 0;
	          numMatches = 0;
	          allIndices.length = 0;
	          break;
	        }
	      }

	      // OR condition, so if TRUE, return
	      if (numMatches) {
	        let result = {
	          isMatch: true,
	          score: totalScore / numMatches
	        };
	        if (includeMatches) {
	          result.indices = allIndices;
	        }
	        return result;
	      }
	    }

	    // Nothing was matched
	    return {
	      isMatch: false,
	      score: 1
	    };
	  }
	}
	const registeredSearchers = [];
	function register(...args) {
	  registeredSearchers.push(...args);
	}
	function createSearcher(pattern, options) {
	  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {
	    let searcherClass = registeredSearchers[i];
	    if (searcherClass.condition(pattern, options)) {
	      return new searcherClass(pattern, options);
	    }
	  }
	  return new BitapSearch(pattern, options);
	}
	const LogicalOperator = {
	  AND: '$and',
	  OR: '$or'
	};
	const KeyType = {
	  PATH: '$path',
	  PATTERN: '$val'
	};
	const isExpression = query => !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);
	const isPath = query => !!query[KeyType.PATH];
	const isLeaf = query => !isArray(query) && isObject(query) && !isExpression(query);
	const convertToExplicit = query => ({
	  [LogicalOperator.AND]: Object.keys(query).map(key => ({
	    [key]: query[key]
	  }))
	});

	// When `auto` is `true`, the parse function will infer and initialize and add
	// the appropriate `Searcher` instance
	function parse(query, options, {
	  auto = true
	} = {}) {
	  const next = query => {
	    let keys = Object.keys(query);
	    const isQueryPath = isPath(query);
	    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {
	      return next(convertToExplicit(query));
	    }
	    if (isLeaf(query)) {
	      const key = isQueryPath ? query[KeyType.PATH] : keys[0];
	      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];
	      if (!isString(pattern)) {
	        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key));
	      }
	      const obj = {
	        keyId: createKeyId(key),
	        pattern
	      };
	      if (auto) {
	        obj.searcher = createSearcher(pattern, options);
	      }
	      return obj;
	    }
	    let node = {
	      children: [],
	      operator: keys[0]
	    };
	    keys.forEach(key => {
	      const value = query[key];
	      if (isArray(value)) {
	        value.forEach(item => {
	          node.children.push(next(item));
	        });
	      }
	    });
	    return node;
	  };
	  if (!isExpression(query)) {
	    query = convertToExplicit(query);
	  }
	  return next(query);
	}

	// Practical scoring function
	function computeScore(results, {
	  ignoreFieldNorm = Config.ignoreFieldNorm
	}) {
	  results.forEach(result => {
	    let totalScore = 1;
	    result.matches.forEach(({
	      key,
	      norm,
	      score
	    }) => {
	      const weight = key ? key.weight : null;
	      totalScore *= Math.pow(score === 0 && weight ? Number.EPSILON : score, (weight || 1) * (ignoreFieldNorm ? 1 : norm));
	    });
	    result.score = totalScore;
	  });
	}
	function transformMatches(result, data) {
	  const matches = result.matches;
	  data.matches = [];
	  if (!isDefined(matches)) {
	    return;
	  }
	  matches.forEach(match => {
	    if (!isDefined(match.indices) || !match.indices.length) {
	      return;
	    }
	    const {
	      indices,
	      value
	    } = match;
	    let obj = {
	      indices,
	      value
	    };
	    if (match.key) {
	      obj.key = match.key.src;
	    }
	    if (match.idx > -1) {
	      obj.refIndex = match.idx;
	    }
	    data.matches.push(obj);
	  });
	}
	function transformScore(result, data) {
	  data.score = result.score;
	}
	function format(results, docs, {
	  includeMatches = Config.includeMatches,
	  includeScore = Config.includeScore
	} = {}) {
	  const transformers = [];
	  if (includeMatches) transformers.push(transformMatches);
	  if (includeScore) transformers.push(transformScore);
	  return results.map(result => {
	    const {
	      idx
	    } = result;
	    const data = {
	      item: docs[idx],
	      refIndex: idx
	    };
	    if (transformers.length) {
	      transformers.forEach(transformer => {
	        transformer(result, data);
	      });
	    }
	    return data;
	  });
	}
	class Fuse {
	  constructor(docs, options = {}, index) {
	    this.options = {
	      ...Config,
	      ...options
	    };
	    if (this.options.useExtendedSearch && !true) {
	      throw new Error(EXTENDED_SEARCH_UNAVAILABLE);
	    }
	    this._keyStore = new KeyStore(this.options.keys);
	    this.setCollection(docs, index);
	  }
	  setCollection(docs, index) {
	    this._docs = docs;
	    if (index && !(index instanceof FuseIndex)) {
	      throw new Error(INCORRECT_INDEX_TYPE);
	    }
	    this._myIndex = index || createIndex(this.options.keys, this._docs, {
	      getFn: this.options.getFn,
	      fieldNormWeight: this.options.fieldNormWeight
	    });
	  }
	  add(doc) {
	    if (!isDefined(doc)) {
	      return;
	    }
	    this._docs.push(doc);
	    this._myIndex.add(doc);
	  }
	  remove(predicate = ( /* doc, idx */) => false) {
	    const results = [];
	    for (let i = 0, len = this._docs.length; i < len; i += 1) {
	      const doc = this._docs[i];
	      if (predicate(doc, i)) {
	        this.removeAt(i);
	        i -= 1;
	        len -= 1;
	        results.push(doc);
	      }
	    }
	    return results;
	  }
	  removeAt(idx) {
	    this._docs.splice(idx, 1);
	    this._myIndex.removeAt(idx);
	  }
	  getIndex() {
	    return this._myIndex;
	  }
	  search(query, {
	    limit = -1
	  } = {}) {
	    const {
	      includeMatches,
	      includeScore,
	      shouldSort,
	      sortFn,
	      ignoreFieldNorm
	    } = this.options;
	    let results = isString(query) ? isString(this._docs[0]) ? this._searchStringList(query) : this._searchObjectList(query) : this._searchLogical(query);
	    computeScore(results, {
	      ignoreFieldNorm
	    });
	    if (shouldSort) {
	      results.sort(sortFn);
	    }
	    if (isNumber(limit) && limit > -1) {
	      results = results.slice(0, limit);
	    }
	    return format(results, this._docs, {
	      includeMatches,
	      includeScore
	    });
	  }
	  _searchStringList(query) {
	    const searcher = createSearcher(query, this.options);
	    const {
	      records
	    } = this._myIndex;
	    const results = [];

	    // Iterate over every string in the index
	    records.forEach(({
	      v: text,
	      i: idx,
	      n: norm
	    }) => {
	      if (!isDefined(text)) {
	        return;
	      }
	      const {
	        isMatch,
	        score,
	        indices
	      } = searcher.searchIn(text);
	      if (isMatch) {
	        results.push({
	          item: text,
	          idx,
	          matches: [{
	            score,
	            value: text,
	            norm,
	            indices
	          }]
	        });
	      }
	    });
	    return results;
	  }
	  _searchLogical(query) {
	    const expression = parse(query, this.options);
	    const evaluate = (node, item, idx) => {
	      if (!node.children) {
	        const {
	          keyId,
	          searcher
	        } = node;
	        const matches = this._findMatches({
	          key: this._keyStore.get(keyId),
	          value: this._myIndex.getValueForItemAtKeyId(item, keyId),
	          searcher
	        });
	        if (matches && matches.length) {
	          return [{
	            idx,
	            item,
	            matches
	          }];
	        }
	        return [];
	      }
	      const res = [];
	      for (let i = 0, len = node.children.length; i < len; i += 1) {
	        const child = node.children[i];
	        const result = evaluate(child, item, idx);
	        if (result.length) {
	          res.push(...result);
	        } else if (node.operator === LogicalOperator.AND) {
	          return [];
	        }
	      }
	      return res;
	    };
	    const records = this._myIndex.records;
	    const resultMap = {};
	    const results = [];
	    records.forEach(({
	      $: item,
	      i: idx
	    }) => {
	      if (isDefined(item)) {
	        let expResults = evaluate(expression, item, idx);
	        if (expResults.length) {
	          // Dedupe when adding
	          if (!resultMap[idx]) {
	            resultMap[idx] = {
	              idx,
	              item,
	              matches: []
	            };
	            results.push(resultMap[idx]);
	          }
	          expResults.forEach(({
	            matches
	          }) => {
	            resultMap[idx].matches.push(...matches);
	          });
	        }
	      }
	    });
	    return results;
	  }
	  _searchObjectList(query) {
	    const searcher = createSearcher(query, this.options);
	    const {
	      keys,
	      records
	    } = this._myIndex;
	    const results = [];

	    // List is Array<Object>
	    records.forEach(({
	      $: item,
	      i: idx
	    }) => {
	      if (!isDefined(item)) {
	        return;
	      }
	      let matches = [];

	      // Iterate over every key (i.e, path), and fetch the value at that key
	      keys.forEach((key, keyIndex) => {
	        matches.push(...this._findMatches({
	          key,
	          value: item[keyIndex],
	          searcher
	        }));
	      });
	      if (matches.length) {
	        results.push({
	          idx,
	          item,
	          matches
	        });
	      }
	    });
	    return results;
	  }
	  _findMatches({
	    key,
	    value,
	    searcher
	  }) {
	    if (!isDefined(value)) {
	      return [];
	    }
	    let matches = [];
	    if (isArray(value)) {
	      value.forEach(({
	        v: text,
	        i: idx,
	        n: norm
	      }) => {
	        if (!isDefined(text)) {
	          return;
	        }
	        const {
	          isMatch,
	          score,
	          indices
	        } = searcher.searchIn(text);
	        if (isMatch) {
	          matches.push({
	            score,
	            key,
	            value: text,
	            idx,
	            norm,
	            indices
	          });
	        }
	      });
	    } else {
	      const {
	        v: text,
	        n: norm
	      } = value;
	      const {
	        isMatch,
	        score,
	        indices
	      } = searcher.searchIn(text);
	      if (isMatch) {
	        matches.push({
	          score,
	          key,
	          value: text,
	          norm,
	          indices
	        });
	      }
	    }
	    return matches;
	  }
	}
	Fuse.version = '6.6.2';
	Fuse.createIndex = createIndex;
	Fuse.parseIndex = parseIndex;
	Fuse.config = Config;
	{
	  Fuse.parseQuery = parse;
	}
	{
	  register(ExtendedSearch);
	}

	var fuse = /*#__PURE__*/Object.freeze({
		__proto__: null,
		default: Fuse
	});

	// import * as atproto_repo from '@atproto/repo';

	[typeof globalThis !== 'undefined' && globalThis || typeof window !== 'undefined' && window || typeof self !== 'undefined' && self || this].map(self => {
	  const exported = atproto_api;
	  self.atproto_api = exported;
	  self.fuse = fuse;
	  //self.atproto_repo = atproto_repo;
	  console.log('loaded @atproto/api ', exported
	  //' @atproto/repo ', atproto_repo
	  );
	});

}));
